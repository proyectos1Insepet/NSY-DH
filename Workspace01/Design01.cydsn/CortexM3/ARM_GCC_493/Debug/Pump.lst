ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Pump.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Pump_Init,"ax",%progbits
  19              		.align	2
  20              		.global	Pump_Init
  21              		.thumb
  22              		.thumb_func
  23              		.type	Pump_Init, %function
  24              	Pump_Init:
  25              	.LFB1:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\Pump.c"
   1:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/Pump.c **** * File Name: Pump.c
   3:.\Generated_Source\PSoC5/Pump.c **** * Version 2.50
   4:.\Generated_Source\PSoC5/Pump.c **** *
   5:.\Generated_Source\PSoC5/Pump.c **** * Description:
   6:.\Generated_Source\PSoC5/Pump.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/Pump.c **** *
   8:.\Generated_Source\PSoC5/Pump.c **** * Note:
   9:.\Generated_Source\PSoC5/Pump.c **** *
  10:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/Pump.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/Pump.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/Pump.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/Pump.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/Pump.c **** 
  17:.\Generated_Source\PSoC5/Pump.c **** #include "Pump.h"
  18:.\Generated_Source\PSoC5/Pump.c **** #if (Pump_INTERNAL_CLOCK_USED)
  19:.\Generated_Source\PSoC5/Pump.c ****     #include "Pump_IntClock.h"
  20:.\Generated_Source\PSoC5/Pump.c **** #endif /* End Pump_INTERNAL_CLOCK_USED */
  21:.\Generated_Source\PSoC5/Pump.c **** 
  22:.\Generated_Source\PSoC5/Pump.c **** 
  23:.\Generated_Source\PSoC5/Pump.c **** /***************************************
  24:.\Generated_Source\PSoC5/Pump.c **** * Global data allocation
  25:.\Generated_Source\PSoC5/Pump.c **** ***************************************/
  26:.\Generated_Source\PSoC5/Pump.c **** 
  27:.\Generated_Source\PSoC5/Pump.c **** uint8 Pump_initVar = 0u;
  28:.\Generated_Source\PSoC5/Pump.c **** 
  29:.\Generated_Source\PSoC5/Pump.c **** #if (Pump_TX_INTERRUPT_ENABLED && Pump_TX_ENABLED)
  30:.\Generated_Source\PSoC5/Pump.c ****     volatile uint8 Pump_txBuffer[Pump_TX_BUFFER_SIZE];
  31:.\Generated_Source\PSoC5/Pump.c ****     volatile uint8 Pump_txBufferRead = 0u;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 2


  32:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/Pump.c **** #endif /* (Pump_TX_INTERRUPT_ENABLED && Pump_TX_ENABLED) */
  34:.\Generated_Source\PSoC5/Pump.c **** 
  35:.\Generated_Source\PSoC5/Pump.c **** #if (Pump_RX_INTERRUPT_ENABLED && (Pump_RX_ENABLED || Pump_HD_ENABLED))
  36:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_errorStatus = 0u;
  37:.\Generated_Source\PSoC5/Pump.c ****     volatile uint8 Pump_rxBuffer[Pump_RX_BUFFER_SIZE];
  38:.\Generated_Source\PSoC5/Pump.c ****     volatile uint16 Pump_rxBufferRead  = 0u;
  39:.\Generated_Source\PSoC5/Pump.c ****     volatile uint16 Pump_rxBufferWrite = 0u;
  40:.\Generated_Source\PSoC5/Pump.c ****     volatile uint8 Pump_rxBufferLoopDetect = 0u;
  41:.\Generated_Source\PSoC5/Pump.c ****     volatile uint8 Pump_rxBufferOverflow   = 0u;
  42:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RXHW_ADDRESS_ENABLED)
  43:.\Generated_Source\PSoC5/Pump.c ****         volatile uint8 Pump_rxAddressMode = Pump_RX_ADDRESS_MODE;
  44:.\Generated_Source\PSoC5/Pump.c ****         volatile uint8 Pump_rxAddressDetected = 0u;
  45:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RXHW_ADDRESS_ENABLED) */
  46:.\Generated_Source\PSoC5/Pump.c **** #endif /* (Pump_RX_INTERRUPT_ENABLED && (Pump_RX_ENABLED || Pump_HD_ENABLED)) */
  47:.\Generated_Source\PSoC5/Pump.c **** 
  48:.\Generated_Source\PSoC5/Pump.c **** 
  49:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
  50:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_Start
  51:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
  52:.\Generated_Source\PSoC5/Pump.c **** *
  53:.\Generated_Source\PSoC5/Pump.c **** * Summary:
  54:.\Generated_Source\PSoC5/Pump.c **** *  This is the preferred method to begin component operation.
  55:.\Generated_Source\PSoC5/Pump.c **** *  Pump_Start() sets the initVar variable, calls the
  56:.\Generated_Source\PSoC5/Pump.c **** *  Pump_Init() function, and then calls the
  57:.\Generated_Source\PSoC5/Pump.c **** *  Pump_Enable() function.
  58:.\Generated_Source\PSoC5/Pump.c **** *
  59:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
  60:.\Generated_Source\PSoC5/Pump.c **** *  None.
  61:.\Generated_Source\PSoC5/Pump.c **** *
  62:.\Generated_Source\PSoC5/Pump.c **** * Return:
  63:.\Generated_Source\PSoC5/Pump.c **** *  None.
  64:.\Generated_Source\PSoC5/Pump.c **** *
  65:.\Generated_Source\PSoC5/Pump.c **** * Global variables:
  66:.\Generated_Source\PSoC5/Pump.c **** *  The Pump_intiVar variable is used to indicate initial
  67:.\Generated_Source\PSoC5/Pump.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:.\Generated_Source\PSoC5/Pump.c **** *  and set to one (1u) the first time Pump_Start() is called. This
  69:.\Generated_Source\PSoC5/Pump.c **** *  allows for component initialization without re-initialization in all
  70:.\Generated_Source\PSoC5/Pump.c **** *  subsequent calls to the Pump_Start() routine.
  71:.\Generated_Source\PSoC5/Pump.c **** *
  72:.\Generated_Source\PSoC5/Pump.c **** * Reentrant:
  73:.\Generated_Source\PSoC5/Pump.c **** *  No.
  74:.\Generated_Source\PSoC5/Pump.c **** *
  75:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
  76:.\Generated_Source\PSoC5/Pump.c **** void Pump_Start(void) 
  77:.\Generated_Source\PSoC5/Pump.c **** {
  78:.\Generated_Source\PSoC5/Pump.c ****     /* If not initialized then initialize all required hardware and software */
  79:.\Generated_Source\PSoC5/Pump.c ****     if(Pump_initVar == 0u)
  80:.\Generated_Source\PSoC5/Pump.c ****     {
  81:.\Generated_Source\PSoC5/Pump.c ****         Pump_Init();
  82:.\Generated_Source\PSoC5/Pump.c ****         Pump_initVar = 1u;
  83:.\Generated_Source\PSoC5/Pump.c ****     }
  84:.\Generated_Source\PSoC5/Pump.c **** 
  85:.\Generated_Source\PSoC5/Pump.c ****     Pump_Enable();
  86:.\Generated_Source\PSoC5/Pump.c **** }
  87:.\Generated_Source\PSoC5/Pump.c **** 
  88:.\Generated_Source\PSoC5/Pump.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 3


  89:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_Init
  91:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
  92:.\Generated_Source\PSoC5/Pump.c **** *
  93:.\Generated_Source\PSoC5/Pump.c **** * Summary:
  94:.\Generated_Source\PSoC5/Pump.c **** *  Initializes or restores the component according to the customizer Configure
  95:.\Generated_Source\PSoC5/Pump.c **** *  dialog settings. It is not necessary to call Pump_Init() because
  96:.\Generated_Source\PSoC5/Pump.c **** *  the Pump_Start() API calls this function and is the preferred
  97:.\Generated_Source\PSoC5/Pump.c **** *  method to begin component operation.
  98:.\Generated_Source\PSoC5/Pump.c **** *
  99:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
 100:.\Generated_Source\PSoC5/Pump.c **** *  None.
 101:.\Generated_Source\PSoC5/Pump.c **** *
 102:.\Generated_Source\PSoC5/Pump.c **** * Return:
 103:.\Generated_Source\PSoC5/Pump.c **** *  None.
 104:.\Generated_Source\PSoC5/Pump.c **** *
 105:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC5/Pump.c **** void Pump_Init(void) 
 107:.\Generated_Source\PSoC5/Pump.c **** {
  27              		.loc 1 107 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 108:.\Generated_Source\PSoC5/Pump.c ****     #if(Pump_RX_ENABLED || Pump_HD_ENABLED)
 109:.\Generated_Source\PSoC5/Pump.c **** 
 110:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_RX_INTERRUPT_ENABLED)
 111:.\Generated_Source\PSoC5/Pump.c ****             /* Set RX interrupt vector and priority */
 112:.\Generated_Source\PSoC5/Pump.c ****             (void) CyIntSetVector(Pump_RX_VECT_NUM, &Pump_RXISR);
  35              		.loc 1 112 0
  36 0002 0220     		movs	r0, #2
  37 0004 0C49     		ldr	r1, .L3
  38 0006 FFF7FEFF 		bl	CyIntSetVector
  39              	.LVL0:
 113:.\Generated_Source\PSoC5/Pump.c ****             CyIntSetPriority(Pump_RX_VECT_NUM, Pump_RX_PRIOR_NUM);
  40              		.loc 1 113 0
  41 000a 0220     		movs	r0, #2
  42 000c 0721     		movs	r1, #7
  43 000e FFF7FEFF 		bl	CyIntSetPriority
  44              	.LVL1:
 114:.\Generated_Source\PSoC5/Pump.c ****             Pump_errorStatus = 0u;
  45              		.loc 1 114 0
  46 0012 0023     		movs	r3, #0
  47 0014 094A     		ldr	r2, .L3+4
  48 0016 1370     		strb	r3, [r2]
 115:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 116:.\Generated_Source\PSoC5/Pump.c **** 
 117:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_RXHW_ADDRESS_ENABLED)
 118:.\Generated_Source\PSoC5/Pump.c ****             Pump_SetRxAddressMode(Pump_RX_ADDRESS_MODE);
 119:.\Generated_Source\PSoC5/Pump.c ****             Pump_SetRxAddress1(Pump_RX_HW_ADDRESS1);
 120:.\Generated_Source\PSoC5/Pump.c ****             Pump_SetRxAddress2(Pump_RX_HW_ADDRESS2);
 121:.\Generated_Source\PSoC5/Pump.c ****         #endif /* End Pump_RXHW_ADDRESS_ENABLED */
 122:.\Generated_Source\PSoC5/Pump.c **** 
 123:.\Generated_Source\PSoC5/Pump.c ****         /* Init Count7 period */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 4


 124:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXBITCTR_PERIOD_REG = Pump_RXBITCTR_INIT;
  49              		.loc 1 124 0
  50 0018 7221     		movs	r1, #114
  51 001a 094A     		ldr	r2, .L3+8
  52 001c 1170     		strb	r1, [r2]
 125:.\Generated_Source\PSoC5/Pump.c ****         /* Configure the Initial RX interrupt mask */
 126:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXSTATUS_MASK_REG  = Pump_INIT_RX_INTERRUPTS_MASK;
  53              		.loc 1 126 0
  54 001e 2021     		movs	r1, #32
  55 0020 0932     		adds	r2, r2, #9
  56 0022 1170     		strb	r1, [r2]
 127:.\Generated_Source\PSoC5/Pump.c ****     #endif /* End Pump_RX_ENABLED || Pump_HD_ENABLED*/
 128:.\Generated_Source\PSoC5/Pump.c **** 
 129:.\Generated_Source\PSoC5/Pump.c ****     #if(Pump_TX_ENABLED)
 130:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TX_INTERRUPT_ENABLED)
 131:.\Generated_Source\PSoC5/Pump.c ****             /* Set TX interrupt vector and priority */
 132:.\Generated_Source\PSoC5/Pump.c ****             (void) CyIntSetVector(Pump_TX_VECT_NUM, &Pump_TXISR);
 133:.\Generated_Source\PSoC5/Pump.c ****             CyIntSetPriority(Pump_TX_VECT_NUM, Pump_TX_PRIOR_NUM);
 134:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_INTERRUPT_ENABLED) */
 135:.\Generated_Source\PSoC5/Pump.c **** 
 136:.\Generated_Source\PSoC5/Pump.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TXCLKGEN_DP)
 138:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXBITCLKGEN_CTR_REG = Pump_BIT_CENTER;
  57              		.loc 1 138 0
  58 0024 0621     		movs	r1, #6
  59 0026 9932     		adds	r2, r2, #153
  60 0028 1170     		strb	r1, [r2]
 139:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXBITCLKTX_COMPLETE_REG = ((Pump_NUMBER_OF_DATA_BITS +
  61              		.loc 1 139 0
  62 002a 4721     		movs	r1, #71
  63 002c 1032     		adds	r2, r2, #16
  64 002e 1170     		strb	r1, [r2]
 140:.\Generated_Source\PSoC5/Pump.c ****                         Pump_NUMBER_OF_START_BIT) * Pump_OVER_SAMPLE_COUNT) - 1u;
 141:.\Generated_Source\PSoC5/Pump.c ****         #else
 142:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXBITCTR_PERIOD_REG = ((Pump_NUMBER_OF_DATA_BITS +
 143:.\Generated_Source\PSoC5/Pump.c ****                         Pump_NUMBER_OF_START_BIT) * Pump_OVER_SAMPLE_8) - 1u;
 144:.\Generated_Source\PSoC5/Pump.c ****         #endif /* End Pump_TXCLKGEN_DP */
 145:.\Generated_Source\PSoC5/Pump.c **** 
 146:.\Generated_Source\PSoC5/Pump.c ****         /* Configure the Initial TX interrupt mask */
 147:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TX_INTERRUPT_ENABLED)
 148:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXSTATUS_MASK_REG = Pump_TX_STS_FIFO_EMPTY;
 149:.\Generated_Source\PSoC5/Pump.c ****         #else
 150:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXSTATUS_MASK_REG = Pump_INIT_TX_INTERRUPTS_MASK;
  65              		.loc 1 150 0
  66 0030 5432     		adds	r2, r2, #84
  67 0032 1370     		strb	r3, [r2]
  68 0034 08BD     		pop	{r3, pc}
  69              	.L4:
  70 0036 00BF     		.align	2
  71              	.L3:
  72 0038 00000000 		.word	Pump_RXISR
  73 003c 00000000 		.word	.LANCHOR0
  74 0040 83640040 		.word	1073767555
  75              		.cfi_endproc
  76              	.LFE1:
  77              		.size	Pump_Init, .-Pump_Init
  78              		.section	.text.Pump_Enable,"ax",%progbits
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 5


  79              		.align	2
  80              		.global	Pump_Enable
  81              		.thumb
  82              		.thumb_func
  83              		.type	Pump_Enable, %function
  84              	Pump_Enable:
  85              	.LFB2:
 151:.\Generated_Source\PSoC5/Pump.c ****         #endif /*End Pump_TX_INTERRUPT_ENABLED*/
 152:.\Generated_Source\PSoC5/Pump.c **** 
 153:.\Generated_Source\PSoC5/Pump.c ****     #endif /* End Pump_TX_ENABLED */
 154:.\Generated_Source\PSoC5/Pump.c **** 
 155:.\Generated_Source\PSoC5/Pump.c ****     #if(Pump_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:.\Generated_Source\PSoC5/Pump.c ****         Pump_WriteControlRegister( \
 157:.\Generated_Source\PSoC5/Pump.c ****             (Pump_ReadControlRegister() & (uint8)~Pump_CTRL_PARITY_TYPE_MASK) | \
 158:.\Generated_Source\PSoC5/Pump.c ****             (uint8)(Pump_PARITY_TYPE << Pump_CTRL_PARITY_TYPE0_SHIFT) );
 159:.\Generated_Source\PSoC5/Pump.c ****     #endif /* End Pump_PARITY_TYPE_SW */
 160:.\Generated_Source\PSoC5/Pump.c **** }
 161:.\Generated_Source\PSoC5/Pump.c **** 
 162:.\Generated_Source\PSoC5/Pump.c **** 
 163:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_Enable
 165:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
 166:.\Generated_Source\PSoC5/Pump.c **** *
 167:.\Generated_Source\PSoC5/Pump.c **** * Summary:
 168:.\Generated_Source\PSoC5/Pump.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:.\Generated_Source\PSoC5/Pump.c **** *  to call Pump_Enable() because the Pump_Start() API
 170:.\Generated_Source\PSoC5/Pump.c **** *  calls this function, which is the preferred method to begin component
 171:.\Generated_Source\PSoC5/Pump.c **** *  operation.
 172:.\Generated_Source\PSoC5/Pump.c **** 
 173:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
 174:.\Generated_Source\PSoC5/Pump.c **** *  None.
 175:.\Generated_Source\PSoC5/Pump.c **** *
 176:.\Generated_Source\PSoC5/Pump.c **** * Return:
 177:.\Generated_Source\PSoC5/Pump.c **** *  None.
 178:.\Generated_Source\PSoC5/Pump.c **** *
 179:.\Generated_Source\PSoC5/Pump.c **** * Global Variables:
 180:.\Generated_Source\PSoC5/Pump.c **** *  Pump_rxAddressDetected - set to initial state (0).
 181:.\Generated_Source\PSoC5/Pump.c **** *
 182:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
 183:.\Generated_Source\PSoC5/Pump.c **** void Pump_Enable(void) 
 184:.\Generated_Source\PSoC5/Pump.c **** {
  86              		.loc 1 184 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 08B5     		push	{r3, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 3, -8
  93              		.cfi_offset 14, -4
 185:.\Generated_Source\PSoC5/Pump.c ****     uint8 enableInterrupts;
 186:.\Generated_Source\PSoC5/Pump.c ****     enableInterrupts = CyEnterCriticalSection();
  94              		.loc 1 186 0
  95 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  96              	.LVL2:
 187:.\Generated_Source\PSoC5/Pump.c **** 
 188:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_ENABLED || Pump_HD_ENABLED)
 189:.\Generated_Source\PSoC5/Pump.c ****         /* RX Counter (Count7) Enable */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 6


 190:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXBITCTR_CONTROL_REG |= Pump_CNTR_ENABLE;
  97              		.loc 1 190 0
  98 0006 0A4A     		ldr	r2, .L7
  99 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 100 000a 43F02003 		orr	r3, r3, #32
 101 000e 1370     		strb	r3, [r2]
 191:.\Generated_Source\PSoC5/Pump.c **** 
 192:.\Generated_Source\PSoC5/Pump.c ****         /* Enable the RX Interrupt */
 193:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXSTATUS_ACTL_REG  |= Pump_INT_ENABLE;
 102              		.loc 1 193 0
 103 0010 0932     		adds	r2, r2, #9
 104 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 105 0014 43F01003 		orr	r3, r3, #16
 106 0018 1370     		strb	r3, [r2]
 194:.\Generated_Source\PSoC5/Pump.c **** 
 195:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_RX_INTERRUPT_ENABLED)
 196:.\Generated_Source\PSoC5/Pump.c ****             Pump_EnableRxInt();
 107              		.loc 1 196 0
 108 001a 0422     		movs	r2, #4
 109 001c 054B     		ldr	r3, .L7+4
 110 001e 1A60     		str	r2, [r3]
 197:.\Generated_Source\PSoC5/Pump.c **** 
 198:.\Generated_Source\PSoC5/Pump.c ****             #if (Pump_RXHW_ADDRESS_ENABLED)
 199:.\Generated_Source\PSoC5/Pump.c ****                 Pump_rxAddressDetected = 0u;
 200:.\Generated_Source\PSoC5/Pump.c ****             #endif /* (Pump_RXHW_ADDRESS_ENABLED) */
 201:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 202:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_ENABLED || Pump_HD_ENABLED) */
 203:.\Generated_Source\PSoC5/Pump.c **** 
 204:.\Generated_Source\PSoC5/Pump.c ****     #if(Pump_TX_ENABLED)
 205:.\Generated_Source\PSoC5/Pump.c ****         /* TX Counter (DP/Count7) Enable */
 206:.\Generated_Source\PSoC5/Pump.c ****         #if(!Pump_TXCLKGEN_DP)
 207:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXBITCTR_CONTROL_REG |= Pump_CNTR_ENABLE;
 208:.\Generated_Source\PSoC5/Pump.c ****         #endif /* End Pump_TXCLKGEN_DP */
 209:.\Generated_Source\PSoC5/Pump.c **** 
 210:.\Generated_Source\PSoC5/Pump.c ****         /* Enable the TX Interrupt */
 211:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXSTATUS_ACTL_REG |= Pump_INT_ENABLE;
 111              		.loc 1 211 0
 112 0020 054A     		ldr	r2, .L7+8
 113 0022 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 114 0024 43F01003 		orr	r3, r3, #16
 115 0028 1370     		strb	r3, [r2]
 212:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TX_INTERRUPT_ENABLED)
 213:.\Generated_Source\PSoC5/Pump.c ****             Pump_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:.\Generated_Source\PSoC5/Pump.c ****             Pump_EnableTxInt();
 215:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_INTERRUPT_ENABLED) */
 216:.\Generated_Source\PSoC5/Pump.c ****      #endif /* (Pump_TX_INTERRUPT_ENABLED) */
 217:.\Generated_Source\PSoC5/Pump.c **** 
 218:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_INTERNAL_CLOCK_USED)
 219:.\Generated_Source\PSoC5/Pump.c ****         Pump_IntClock_Start();  /* Enable the clock */
 220:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_INTERNAL_CLOCK_USED) */
 221:.\Generated_Source\PSoC5/Pump.c **** 
 222:.\Generated_Source\PSoC5/Pump.c ****     CyExitCriticalSection(enableInterrupts);
 116              		.loc 1 222 0
 117 002a FFF7FEFF 		bl	CyExitCriticalSection
 118              	.LVL3:
 119 002e 08BD     		pop	{r3, pc}
 120              	.L8:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 7


 121              		.align	2
 122              	.L7:
 123 0030 93640040 		.word	1073767571
 124 0034 00E100E0 		.word	-536813312
 125 0038 99650040 		.word	1073767833
 126              		.cfi_endproc
 127              	.LFE2:
 128              		.size	Pump_Enable, .-Pump_Enable
 129              		.section	.text.Pump_Start,"ax",%progbits
 130              		.align	2
 131              		.global	Pump_Start
 132              		.thumb
 133              		.thumb_func
 134              		.type	Pump_Start, %function
 135              	Pump_Start:
 136              	.LFB0:
  77:.\Generated_Source\PSoC5/Pump.c ****     /* If not initialized then initialize all required hardware and software */
 137              		.loc 1 77 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141 0000 08B5     		push	{r3, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
  79:.\Generated_Source\PSoC5/Pump.c ****     {
 145              		.loc 1 79 0
 146 0002 054B     		ldr	r3, .L12
 147 0004 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 148 0006 23B9     		cbnz	r3, .L10
  81:.\Generated_Source\PSoC5/Pump.c ****         Pump_initVar = 1u;
 149              		.loc 1 81 0
 150 0008 FFF7FEFF 		bl	Pump_Init
 151              	.LVL4:
  82:.\Generated_Source\PSoC5/Pump.c ****     }
 152              		.loc 1 82 0
 153 000c 0122     		movs	r2, #1
 154 000e 024B     		ldr	r3, .L12
 155 0010 5A70     		strb	r2, [r3, #1]
 156              	.L10:
  85:.\Generated_Source\PSoC5/Pump.c **** }
 157              		.loc 1 85 0
 158 0012 FFF7FEFF 		bl	Pump_Enable
 159              	.LVL5:
 160 0016 08BD     		pop	{r3, pc}
 161              	.L13:
 162              		.align	2
 163              	.L12:
 164 0018 00000000 		.word	.LANCHOR0
 165              		.cfi_endproc
 166              	.LFE0:
 167              		.size	Pump_Start, .-Pump_Start
 168              		.section	.text.Pump_Stop,"ax",%progbits
 169              		.align	2
 170              		.global	Pump_Stop
 171              		.thumb
 172              		.thumb_func
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 8


 173              		.type	Pump_Stop, %function
 174              	Pump_Stop:
 175              	.LFB3:
 223:.\Generated_Source\PSoC5/Pump.c **** }
 224:.\Generated_Source\PSoC5/Pump.c **** 
 225:.\Generated_Source\PSoC5/Pump.c **** 
 226:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
 227:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_Stop
 228:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
 229:.\Generated_Source\PSoC5/Pump.c **** *
 230:.\Generated_Source\PSoC5/Pump.c **** * Summary:
 231:.\Generated_Source\PSoC5/Pump.c **** *  Disables the UART operation.
 232:.\Generated_Source\PSoC5/Pump.c **** *
 233:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
 234:.\Generated_Source\PSoC5/Pump.c **** *  None.
 235:.\Generated_Source\PSoC5/Pump.c **** *
 236:.\Generated_Source\PSoC5/Pump.c **** * Return:
 237:.\Generated_Source\PSoC5/Pump.c **** *  None.
 238:.\Generated_Source\PSoC5/Pump.c **** *
 239:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
 240:.\Generated_Source\PSoC5/Pump.c **** void Pump_Stop(void) 
 241:.\Generated_Source\PSoC5/Pump.c **** {
 176              		.loc 1 241 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180 0000 08B5     		push	{r3, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 3, -8
 183              		.cfi_offset 14, -4
 242:.\Generated_Source\PSoC5/Pump.c ****     uint8 enableInterrupts;
 243:.\Generated_Source\PSoC5/Pump.c ****     enableInterrupts = CyEnterCriticalSection();
 184              		.loc 1 243 0
 185 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 186              	.LVL6:
 244:.\Generated_Source\PSoC5/Pump.c **** 
 245:.\Generated_Source\PSoC5/Pump.c ****     /* Write Bit Counter Disable */
 246:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_ENABLED || Pump_HD_ENABLED)
 247:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXBITCTR_CONTROL_REG &= (uint8) ~Pump_CNTR_ENABLE;
 187              		.loc 1 247 0
 188 0006 0A4A     		ldr	r2, .L16
 189 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 190 000a 03F0DF03 		and	r3, r3, #223
 191 000e 1370     		strb	r3, [r2]
 248:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_ENABLED || Pump_HD_ENABLED) */
 249:.\Generated_Source\PSoC5/Pump.c **** 
 250:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_TX_ENABLED)
 251:.\Generated_Source\PSoC5/Pump.c ****         #if(!Pump_TXCLKGEN_DP)
 252:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXBITCTR_CONTROL_REG &= (uint8) ~Pump_CNTR_ENABLE;
 253:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (!Pump_TXCLKGEN_DP) */
 254:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_TX_ENABLED) */
 255:.\Generated_Source\PSoC5/Pump.c **** 
 256:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_INTERNAL_CLOCK_USED)
 257:.\Generated_Source\PSoC5/Pump.c ****         Pump_IntClock_Stop();   /* Disable the clock */
 258:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_INTERNAL_CLOCK_USED) */
 259:.\Generated_Source\PSoC5/Pump.c **** 
 260:.\Generated_Source\PSoC5/Pump.c ****     /* Disable internal interrupt component */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 9


 261:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_ENABLED || Pump_HD_ENABLED)
 262:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXSTATUS_ACTL_REG  &= (uint8) ~Pump_INT_ENABLE;
 192              		.loc 1 262 0
 193 0010 0932     		adds	r2, r2, #9
 194 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 195 0014 03F0EF03 		and	r3, r3, #239
 196 0018 1370     		strb	r3, [r2]
 263:.\Generated_Source\PSoC5/Pump.c **** 
 264:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_RX_INTERRUPT_ENABLED)
 265:.\Generated_Source\PSoC5/Pump.c ****             Pump_DisableRxInt();
 197              		.loc 1 265 0
 198 001a 0422     		movs	r2, #4
 199 001c 054B     		ldr	r3, .L16+4
 200 001e 1A60     		str	r2, [r3]
 266:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 267:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_ENABLED || Pump_HD_ENABLED) */
 268:.\Generated_Source\PSoC5/Pump.c **** 
 269:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_TX_ENABLED)
 270:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXSTATUS_ACTL_REG &= (uint8) ~Pump_INT_ENABLE;
 201              		.loc 1 270 0
 202 0020 054A     		ldr	r2, .L16+8
 203 0022 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 204 0024 03F0EF03 		and	r3, r3, #239
 205 0028 1370     		strb	r3, [r2]
 271:.\Generated_Source\PSoC5/Pump.c **** 
 272:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TX_INTERRUPT_ENABLED)
 273:.\Generated_Source\PSoC5/Pump.c ****             Pump_DisableTxInt();
 274:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_INTERRUPT_ENABLED) */
 275:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_TX_ENABLED) */
 276:.\Generated_Source\PSoC5/Pump.c **** 
 277:.\Generated_Source\PSoC5/Pump.c ****     CyExitCriticalSection(enableInterrupts);
 206              		.loc 1 277 0
 207 002a FFF7FEFF 		bl	CyExitCriticalSection
 208              	.LVL7:
 209 002e 08BD     		pop	{r3, pc}
 210              	.L17:
 211              		.align	2
 212              	.L16:
 213 0030 93640040 		.word	1073767571
 214 0034 80E100E0 		.word	-536813184
 215 0038 99650040 		.word	1073767833
 216              		.cfi_endproc
 217              	.LFE3:
 218              		.size	Pump_Stop, .-Pump_Stop
 219              		.section	.text.Pump_ReadControlRegister,"ax",%progbits
 220              		.align	2
 221              		.global	Pump_ReadControlRegister
 222              		.thumb
 223              		.thumb_func
 224              		.type	Pump_ReadControlRegister, %function
 225              	Pump_ReadControlRegister:
 226              	.LFB4:
 278:.\Generated_Source\PSoC5/Pump.c **** }
 279:.\Generated_Source\PSoC5/Pump.c **** 
 280:.\Generated_Source\PSoC5/Pump.c **** 
 281:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_ReadControlRegister
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 10


 283:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
 284:.\Generated_Source\PSoC5/Pump.c **** *
 285:.\Generated_Source\PSoC5/Pump.c **** * Summary:
 286:.\Generated_Source\PSoC5/Pump.c **** *  Returns the current value of the control register.
 287:.\Generated_Source\PSoC5/Pump.c **** *
 288:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
 289:.\Generated_Source\PSoC5/Pump.c **** *  None.
 290:.\Generated_Source\PSoC5/Pump.c **** *
 291:.\Generated_Source\PSoC5/Pump.c **** * Return:
 292:.\Generated_Source\PSoC5/Pump.c **** *  Contents of the control register.
 293:.\Generated_Source\PSoC5/Pump.c **** *
 294:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC5/Pump.c **** uint8 Pump_ReadControlRegister(void) 
 296:.\Generated_Source\PSoC5/Pump.c **** {
 227              		.loc 1 296 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 297:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_CONTROL_REG_REMOVED)
 298:.\Generated_Source\PSoC5/Pump.c ****         return(0u);
 299:.\Generated_Source\PSoC5/Pump.c ****     #else
 300:.\Generated_Source\PSoC5/Pump.c ****         return(Pump_CONTROL_REG);
 301:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_CONTROL_REG_REMOVED) */
 302:.\Generated_Source\PSoC5/Pump.c **** }
 232              		.loc 1 302 0
 233 0000 0020     		movs	r0, #0
 234 0002 7047     		bx	lr
 235              		.cfi_endproc
 236              	.LFE4:
 237              		.size	Pump_ReadControlRegister, .-Pump_ReadControlRegister
 238              		.section	.text.Pump_WriteControlRegister,"ax",%progbits
 239              		.align	2
 240              		.global	Pump_WriteControlRegister
 241              		.thumb
 242              		.thumb_func
 243              		.type	Pump_WriteControlRegister, %function
 244              	Pump_WriteControlRegister:
 245              	.LFB5:
 303:.\Generated_Source\PSoC5/Pump.c **** 
 304:.\Generated_Source\PSoC5/Pump.c **** 
 305:.\Generated_Source\PSoC5/Pump.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC5/Pump.c **** * Function Name: Pump_WriteControlRegister
 307:.\Generated_Source\PSoC5/Pump.c **** ********************************************************************************
 308:.\Generated_Source\PSoC5/Pump.c **** *
 309:.\Generated_Source\PSoC5/Pump.c **** * Summary:
 310:.\Generated_Source\PSoC5/Pump.c **** *  Writes an 8-bit value into the control register
 311:.\Generated_Source\PSoC5/Pump.c **** *
 312:.\Generated_Source\PSoC5/Pump.c **** * Parameters:
 313:.\Generated_Source\PSoC5/Pump.c **** *  control:  control register value
 314:.\Generated_Source\PSoC5/Pump.c **** *
 315:.\Generated_Source\PSoC5/Pump.c **** * Return:
 316:.\Generated_Source\PSoC5/Pump.c **** *  None.
 317:.\Generated_Source\PSoC5/Pump.c **** *
 318:.\Generated_Source\PSoC5/Pump.c **** *******************************************************************************/
 319:.\Generated_Source\PSoC5/Pump.c **** void  Pump_WriteControlRegister(uint8 control) 
 320:.\Generated_Source\PSoC5/Pump.c **** {
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 11


 246              		.loc 1 320 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251              	.LVL8:
 252 0000 7047     		bx	lr
 253              		.cfi_endproc
 254              	.LFE5:
 255              		.size	Pump_WriteControlRegister, .-Pump_WriteControlRegister
 256 0002 00BF     		.section	.text.Pump_SetRxInterruptMode,"ax",%progbits
 257              		.align	2
 258              		.global	Pump_SetRxInterruptMode
 259              		.thumb
 260              		.thumb_func
 261              		.type	Pump_SetRxInterruptMode, %function
 262              	Pump_SetRxInterruptMode:
 263              	.LFB6:
 321:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_CONTROL_REG_REMOVED)
 322:.\Generated_Source\PSoC5/Pump.c ****         if(0u != control)
 323:.\Generated_Source\PSoC5/Pump.c ****         {
 324:.\Generated_Source\PSoC5/Pump.c ****             /* Suppress compiler warning */
 325:.\Generated_Source\PSoC5/Pump.c ****         }
 326:.\Generated_Source\PSoC5/Pump.c ****     #else
 327:.\Generated_Source\PSoC5/Pump.c ****        Pump_CONTROL_REG = control;
 328:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_CONTROL_REG_REMOVED) */
 329:.\Generated_Source\PSoC5/Pump.c **** }
 330:.\Generated_Source\PSoC5/Pump.c **** 
 331:.\Generated_Source\PSoC5/Pump.c **** 
 332:.\Generated_Source\PSoC5/Pump.c **** #if(Pump_RX_ENABLED || Pump_HD_ENABLED)
 333:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 334:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetRxInterruptMode
 335:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 336:.\Generated_Source\PSoC5/Pump.c ****     *
 337:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 338:.\Generated_Source\PSoC5/Pump.c ****     *  Configures the RX interrupt sources enabled.
 339:.\Generated_Source\PSoC5/Pump.c ****     *
 340:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 341:.\Generated_Source\PSoC5/Pump.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:.\Generated_Source\PSoC5/Pump.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:.\Generated_Source\PSoC5/Pump.c ****     *  combination of status register bit-masks shown below:
 344:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_BREAK            Interrupt on break.
 348:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_OVERRUN          Interrupt on overrun error.
 349:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_RX_STS_MRKSPC           Interrupt on address detect.
 351:.\Generated_Source\PSoC5/Pump.c ****     *
 352:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 353:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 354:.\Generated_Source\PSoC5/Pump.c ****     *
 355:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
 356:.\Generated_Source\PSoC5/Pump.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:.\Generated_Source\PSoC5/Pump.c ****     *
 358:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 359:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetRxInterruptMode(uint8 intSrc) 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 12


 360:.\Generated_Source\PSoC5/Pump.c ****     {
 264              		.loc 1 360 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 269              	.LVL9:
 361:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXSTATUS_MASK_REG  = intSrc;
 270              		.loc 1 361 0
 271 0000 014B     		ldr	r3, .L21
 272 0002 1870     		strb	r0, [r3]
 273 0004 7047     		bx	lr
 274              	.L22:
 275 0006 00BF     		.align	2
 276              	.L21:
 277 0008 8C640040 		.word	1073767564
 278              		.cfi_endproc
 279              	.LFE6:
 280              		.size	Pump_SetRxInterruptMode, .-Pump_SetRxInterruptMode
 281              		.section	.text.Pump_ReadRxData,"ax",%progbits
 282              		.align	2
 283              		.global	Pump_ReadRxData
 284              		.thumb
 285              		.thumb_func
 286              		.type	Pump_ReadRxData, %function
 287              	Pump_ReadRxData:
 288              	.LFB7:
 362:.\Generated_Source\PSoC5/Pump.c ****     }
 363:.\Generated_Source\PSoC5/Pump.c **** 
 364:.\Generated_Source\PSoC5/Pump.c **** 
 365:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 366:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_ReadRxData
 367:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 368:.\Generated_Source\PSoC5/Pump.c ****     *
 369:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 370:.\Generated_Source\PSoC5/Pump.c ****     *  Returns the next byte of received data. This function returns data without
 371:.\Generated_Source\PSoC5/Pump.c ****     *  checking the status. You must check the status separately.
 372:.\Generated_Source\PSoC5/Pump.c ****     *
 373:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 374:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 375:.\Generated_Source\PSoC5/Pump.c ****     *
 376:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 377:.\Generated_Source\PSoC5/Pump.c ****     *  Received data from RX register
 378:.\Generated_Source\PSoC5/Pump.c ****     *
 379:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 380:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBuffer - RAM buffer pointer for save received data.
 381:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferWrite - cyclic index for write to rxBuffer,
 382:.\Generated_Source\PSoC5/Pump.c ****     *     checked to identify new data.
 383:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferRead - cyclic index for read from rxBuffer,
 384:.\Generated_Source\PSoC5/Pump.c ****     *     incremented after each byte has been read from buffer.
 385:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferLoopDetect - cleared if loop condition was detected
 386:.\Generated_Source\PSoC5/Pump.c ****     *     in RX ISR.
 387:.\Generated_Source\PSoC5/Pump.c ****     *
 388:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 389:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 390:.\Generated_Source\PSoC5/Pump.c ****     *
 391:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 13


 392:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_ReadRxData(void) 
 393:.\Generated_Source\PSoC5/Pump.c ****     {
 289              		.loc 1 393 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 394:.\Generated_Source\PSoC5/Pump.c ****         uint8 rxData;
 395:.\Generated_Source\PSoC5/Pump.c **** 
 396:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 397:.\Generated_Source\PSoC5/Pump.c **** 
 398:.\Generated_Source\PSoC5/Pump.c ****         uint16 locRxBufferRead;
 399:.\Generated_Source\PSoC5/Pump.c ****         uint16 locRxBufferWrite;
 400:.\Generated_Source\PSoC5/Pump.c **** 
 401:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt */
 402:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableRxInt();
 294              		.loc 1 402 0
 295 0000 0422     		movs	r2, #4
 296 0002 134B     		ldr	r3, .L29
 297 0004 1A60     		str	r2, [r3]
 403:.\Generated_Source\PSoC5/Pump.c **** 
 404:.\Generated_Source\PSoC5/Pump.c ****         locRxBufferRead  = Pump_rxBufferRead;
 298              		.loc 1 404 0
 299 0006 134A     		ldr	r2, .L29+4
 300 0008 5388     		ldrh	r3, [r2, #2]
 301 000a 9BB2     		uxth	r3, r3
 302              	.LVL10:
 405:.\Generated_Source\PSoC5/Pump.c ****         locRxBufferWrite = Pump_rxBufferWrite;
 303              		.loc 1 405 0
 304 000c 9188     		ldrh	r1, [r2, #4]
 305 000e 89B2     		uxth	r1, r1
 306              	.LVL11:
 406:.\Generated_Source\PSoC5/Pump.c **** 
 407:.\Generated_Source\PSoC5/Pump.c ****         if( (Pump_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 307              		.loc 1 407 0
 308 0010 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 309 0012 12F0FF0F 		tst	r2, #255
 310 0016 01D1     		bne	.L24
 311              		.loc 1 407 0 is_stmt 0 discriminator 1
 312 0018 8B42     		cmp	r3, r1
 313 001a 11D0     		beq	.L25
 314              	.L24:
 408:.\Generated_Source\PSoC5/Pump.c ****         {
 409:.\Generated_Source\PSoC5/Pump.c ****             rxData = Pump_rxBuffer[locRxBufferRead];
 315              		.loc 1 409 0 is_stmt 1
 316 001c 0E4A     		ldr	r2, .L29+8
 317 001e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 318 0020 C0B2     		uxtb	r0, r0
 319              	.LVL12:
 410:.\Generated_Source\PSoC5/Pump.c ****             locRxBufferRead++;
 320              		.loc 1 410 0
 321 0022 0133     		adds	r3, r3, #1
 322              	.LVL13:
 323 0024 9BB2     		uxth	r3, r3
 324              	.LVL14:
 411:.\Generated_Source\PSoC5/Pump.c **** 
 412:.\Generated_Source\PSoC5/Pump.c ****             if(locRxBufferRead >= Pump_RX_BUFFER_SIZE)
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 14


 325              		.loc 1 412 0
 326 0026 FF2B     		cmp	r3, #255
 327 0028 00D9     		bls	.L26
 413:.\Generated_Source\PSoC5/Pump.c ****             {
 414:.\Generated_Source\PSoC5/Pump.c ****                 locRxBufferRead = 0u;
 328              		.loc 1 414 0
 329 002a 0023     		movs	r3, #0
 330              	.LVL15:
 331              	.L26:
 415:.\Generated_Source\PSoC5/Pump.c ****             }
 416:.\Generated_Source\PSoC5/Pump.c ****             /* Update the real pointer */
 417:.\Generated_Source\PSoC5/Pump.c ****             Pump_rxBufferRead = locRxBufferRead;
 332              		.loc 1 417 0
 333 002c 094A     		ldr	r2, .L29+4
 334 002e 5380     		strh	r3, [r2, #2]	@ movhi
 418:.\Generated_Source\PSoC5/Pump.c **** 
 419:.\Generated_Source\PSoC5/Pump.c ****             if(Pump_rxBufferLoopDetect != 0u)
 335              		.loc 1 419 0
 336 0030 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 337              	.LVL16:
 338 0032 13F0FF0F 		tst	r3, #255
 339 0036 06D0     		beq	.L27
 420:.\Generated_Source\PSoC5/Pump.c ****             {
 421:.\Generated_Source\PSoC5/Pump.c ****                 Pump_rxBufferLoopDetect = 0u;
 340              		.loc 1 421 0
 341 0038 0022     		movs	r2, #0
 342 003a 064B     		ldr	r3, .L29+4
 343 003c 9A71     		strb	r2, [r3, #6]
 344              	.LVL17:
 345 003e 02E0     		b	.L27
 346              	.LVL18:
 347              	.L25:
 422:.\Generated_Source\PSoC5/Pump.c ****                 #if ((Pump_RX_INTERRUPT_ENABLED) && (Pump_FLOW_CONTROL != 0u))
 423:.\Generated_Source\PSoC5/Pump.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:.\Generated_Source\PSoC5/Pump.c ****                     #if( Pump_HD_ENABLED )
 425:.\Generated_Source\PSoC5/Pump.c ****                         if((Pump_CONTROL_REG & Pump_CTRL_HD_SEND) == 0u)
 426:.\Generated_Source\PSoC5/Pump.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:.\Generated_Source\PSoC5/Pump.c ****                             *  configuration set, otherwise
 428:.\Generated_Source\PSoC5/Pump.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:.\Generated_Source\PSoC5/Pump.c ****                             */
 430:.\Generated_Source\PSoC5/Pump.c ****                             Pump_RXSTATUS_MASK_REG  |= Pump_RX_STS_FIFO_NOTEMPTY;
 431:.\Generated_Source\PSoC5/Pump.c ****                         }
 432:.\Generated_Source\PSoC5/Pump.c ****                     #else
 433:.\Generated_Source\PSoC5/Pump.c ****                         Pump_RXSTATUS_MASK_REG  |= Pump_RX_STS_FIFO_NOTEMPTY;
 434:.\Generated_Source\PSoC5/Pump.c ****                     #endif /* end Pump_HD_ENABLED */
 435:.\Generated_Source\PSoC5/Pump.c ****                 #endif /* ((Pump_RX_INTERRUPT_ENABLED) && (Pump_FLOW_CONTROL != 0u)) */
 436:.\Generated_Source\PSoC5/Pump.c ****             }
 437:.\Generated_Source\PSoC5/Pump.c ****         }
 438:.\Generated_Source\PSoC5/Pump.c ****         else
 439:.\Generated_Source\PSoC5/Pump.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:.\Generated_Source\PSoC5/Pump.c ****             rxData = Pump_RXDATA_REG;
 348              		.loc 1 440 0
 349 0040 064B     		ldr	r3, .L29+12
 350              	.LVL19:
 351 0042 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 352 0044 C0B2     		uxtb	r0, r0
 353              	.LVL20:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 15


 354              	.L27:
 441:.\Generated_Source\PSoC5/Pump.c ****         }
 442:.\Generated_Source\PSoC5/Pump.c **** 
 443:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableRxInt();
 355              		.loc 1 443 0
 356 0046 0422     		movs	r2, #4
 357 0048 054B     		ldr	r3, .L29+16
 358 004a 1A60     		str	r2, [r3]
 444:.\Generated_Source\PSoC5/Pump.c **** 
 445:.\Generated_Source\PSoC5/Pump.c ****     #else
 446:.\Generated_Source\PSoC5/Pump.c **** 
 447:.\Generated_Source\PSoC5/Pump.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:.\Generated_Source\PSoC5/Pump.c ****         rxData = Pump_RXDATA_REG;
 449:.\Generated_Source\PSoC5/Pump.c **** 
 450:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 451:.\Generated_Source\PSoC5/Pump.c **** 
 452:.\Generated_Source\PSoC5/Pump.c ****         return(rxData);
 453:.\Generated_Source\PSoC5/Pump.c ****     }
 359              		.loc 1 453 0
 360 004c 7047     		bx	lr
 361              	.L30:
 362 004e 00BF     		.align	2
 363              	.L29:
 364 0050 80E100E0 		.word	-536813184
 365 0054 00000000 		.word	.LANCHOR0
 366 0058 00000000 		.word	Pump_rxBuffer
 367 005c 4B640040 		.word	1073767499
 368 0060 00E100E0 		.word	-536813312
 369              		.cfi_endproc
 370              	.LFE7:
 371              		.size	Pump_ReadRxData, .-Pump_ReadRxData
 372              		.section	.text.Pump_ReadRxStatus,"ax",%progbits
 373              		.align	2
 374              		.global	Pump_ReadRxStatus
 375              		.thumb
 376              		.thumb_func
 377              		.type	Pump_ReadRxStatus, %function
 378              	Pump_ReadRxStatus:
 379              	.LFB8:
 454:.\Generated_Source\PSoC5/Pump.c **** 
 455:.\Generated_Source\PSoC5/Pump.c **** 
 456:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 457:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_ReadRxStatus
 458:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 459:.\Generated_Source\PSoC5/Pump.c ****     *
 460:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 461:.\Generated_Source\PSoC5/Pump.c ****     *  Returns the current state of the receiver status register and the software
 462:.\Generated_Source\PSoC5/Pump.c ****     *  buffer overflow status.
 463:.\Generated_Source\PSoC5/Pump.c ****     *
 464:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 465:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 466:.\Generated_Source\PSoC5/Pump.c ****     *
 467:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 468:.\Generated_Source\PSoC5/Pump.c ****     *  Current state of the status register.
 469:.\Generated_Source\PSoC5/Pump.c ****     *
 470:.\Generated_Source\PSoC5/Pump.c ****     * Side Effect:
 471:.\Generated_Source\PSoC5/Pump.c ****     *  All status register bits are clear-on-read except
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 16


 472:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_RX_STS_FIFO_NOTEMPTY.
 473:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:.\Generated_Source\PSoC5/Pump.c ****     *  register read.
 475:.\Generated_Source\PSoC5/Pump.c ****     *
 476:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 477:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferOverflow - used to indicate overload condition.
 478:.\Generated_Source\PSoC5/Pump.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_rxBufferRead to write new data. This condition returned
 480:.\Generated_Source\PSoC5/Pump.c ****     *   and cleared to zero by this API as an
 481:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:.\Generated_Source\PSoC5/Pump.c ****     *   bits.
 483:.\Generated_Source\PSoC5/Pump.c ****     *
 484:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 485:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_ReadRxStatus(void) 
 486:.\Generated_Source\PSoC5/Pump.c ****     {
 380              		.loc 1 486 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 487:.\Generated_Source\PSoC5/Pump.c ****         uint8 status;
 488:.\Generated_Source\PSoC5/Pump.c **** 
 489:.\Generated_Source\PSoC5/Pump.c ****         status = Pump_RXSTATUS_REG & Pump_RX_HW_MASK;
 385              		.loc 1 489 0
 386 0000 074B     		ldr	r3, .L33
 387 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 388 0004 00F07F00 		and	r0, r0, #127
 389              	.LVL21:
 490:.\Generated_Source\PSoC5/Pump.c **** 
 491:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 492:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_rxBufferOverflow != 0u)
 390              		.loc 1 492 0
 391 0008 064B     		ldr	r3, .L33+4
 392 000a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 393 000c 13F0FF0F 		tst	r3, #255
 394 0010 04D0     		beq	.L32
 493:.\Generated_Source\PSoC5/Pump.c ****         {
 494:.\Generated_Source\PSoC5/Pump.c ****             status |= Pump_RX_STS_SOFT_BUFF_OVER;
 395              		.loc 1 494 0
 396 0012 40F08000 		orr	r0, r0, #128
 397              	.LVL22:
 495:.\Generated_Source\PSoC5/Pump.c ****             Pump_rxBufferOverflow = 0u;
 398              		.loc 1 495 0
 399 0016 0022     		movs	r2, #0
 400 0018 024B     		ldr	r3, .L33+4
 401 001a DA71     		strb	r2, [r3, #7]
 402              	.L32:
 496:.\Generated_Source\PSoC5/Pump.c ****         }
 497:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 498:.\Generated_Source\PSoC5/Pump.c **** 
 499:.\Generated_Source\PSoC5/Pump.c ****         return(status);
 500:.\Generated_Source\PSoC5/Pump.c ****     }
 403              		.loc 1 500 0
 404 001c 7047     		bx	lr
 405              	.L34:
 406 001e 00BF     		.align	2
 407              	.L33:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 17


 408 0020 6C640040 		.word	1073767532
 409 0024 00000000 		.word	.LANCHOR0
 410              		.cfi_endproc
 411              	.LFE8:
 412              		.size	Pump_ReadRxStatus, .-Pump_ReadRxStatus
 413              		.section	.text.Pump_GetChar,"ax",%progbits
 414              		.align	2
 415              		.global	Pump_GetChar
 416              		.thumb
 417              		.thumb_func
 418              		.type	Pump_GetChar, %function
 419              	Pump_GetChar:
 420              	.LFB9:
 501:.\Generated_Source\PSoC5/Pump.c **** 
 502:.\Generated_Source\PSoC5/Pump.c **** 
 503:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 504:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_GetChar
 505:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 506:.\Generated_Source\PSoC5/Pump.c ****     *
 507:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 508:.\Generated_Source\PSoC5/Pump.c ****     *  Returns the last received byte of data. Pump_GetChar() is
 509:.\Generated_Source\PSoC5/Pump.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:.\Generated_Source\PSoC5/Pump.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:.\Generated_Source\PSoC5/Pump.c ****     *
 512:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 513:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 514:.\Generated_Source\PSoC5/Pump.c ****     *
 515:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 516:.\Generated_Source\PSoC5/Pump.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:.\Generated_Source\PSoC5/Pump.c ****     *  A returned zero signifies an error condition or no data available.
 518:.\Generated_Source\PSoC5/Pump.c ****     *
 519:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 520:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBuffer - RAM buffer pointer for save received data.
 521:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferWrite - cyclic index for write to rxBuffer,
 522:.\Generated_Source\PSoC5/Pump.c ****     *     checked to identify new data.
 523:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferRead - cyclic index for read from rxBuffer,
 524:.\Generated_Source\PSoC5/Pump.c ****     *     incremented after each byte has been read from buffer.
 525:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferLoopDetect - cleared if loop condition was detected
 526:.\Generated_Source\PSoC5/Pump.c ****     *     in RX ISR.
 527:.\Generated_Source\PSoC5/Pump.c ****     *
 528:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 529:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 530:.\Generated_Source\PSoC5/Pump.c ****     *
 531:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 532:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_GetChar(void) 
 533:.\Generated_Source\PSoC5/Pump.c ****     {
 421              		.loc 1 533 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL23:
 534:.\Generated_Source\PSoC5/Pump.c ****         uint8 rxData = 0u;
 535:.\Generated_Source\PSoC5/Pump.c ****         uint8 rxStatus;
 536:.\Generated_Source\PSoC5/Pump.c **** 
 537:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 538:.\Generated_Source\PSoC5/Pump.c ****         uint16 locRxBufferRead;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 18


 539:.\Generated_Source\PSoC5/Pump.c ****         uint16 locRxBufferWrite;
 540:.\Generated_Source\PSoC5/Pump.c **** 
 541:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt */
 542:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableRxInt();
 427              		.loc 1 542 0
 428 0000 0422     		movs	r2, #4
 429 0002 194B     		ldr	r3, .L43
 430 0004 1A60     		str	r2, [r3]
 543:.\Generated_Source\PSoC5/Pump.c **** 
 544:.\Generated_Source\PSoC5/Pump.c ****         locRxBufferRead  = Pump_rxBufferRead;
 431              		.loc 1 544 0
 432 0006 194A     		ldr	r2, .L43+4
 433 0008 5388     		ldrh	r3, [r2, #2]
 434 000a 9BB2     		uxth	r3, r3
 435              	.LVL24:
 545:.\Generated_Source\PSoC5/Pump.c ****         locRxBufferWrite = Pump_rxBufferWrite;
 436              		.loc 1 545 0
 437 000c 9188     		ldrh	r1, [r2, #4]
 438 000e 89B2     		uxth	r1, r1
 439              	.LVL25:
 546:.\Generated_Source\PSoC5/Pump.c **** 
 547:.\Generated_Source\PSoC5/Pump.c ****         if( (Pump_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 440              		.loc 1 547 0
 441 0010 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 442 0012 12F0FF0F 		tst	r2, #255
 443 0016 01D1     		bne	.L36
 444              		.loc 1 547 0 is_stmt 0 discriminator 1
 445 0018 8B42     		cmp	r3, r1
 446 001a 11D0     		beq	.L37
 447              	.L36:
 548:.\Generated_Source\PSoC5/Pump.c ****         {
 549:.\Generated_Source\PSoC5/Pump.c ****             rxData = Pump_rxBuffer[locRxBufferRead];
 448              		.loc 1 549 0 is_stmt 1
 449 001c 144A     		ldr	r2, .L43+8
 450 001e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 451 0020 C0B2     		uxtb	r0, r0
 452              	.LVL26:
 550:.\Generated_Source\PSoC5/Pump.c ****             locRxBufferRead++;
 453              		.loc 1 550 0
 454 0022 0133     		adds	r3, r3, #1
 455              	.LVL27:
 456 0024 9BB2     		uxth	r3, r3
 457              	.LVL28:
 551:.\Generated_Source\PSoC5/Pump.c ****             if(locRxBufferRead >= Pump_RX_BUFFER_SIZE)
 458              		.loc 1 551 0
 459 0026 FF2B     		cmp	r3, #255
 460 0028 00D9     		bls	.L38
 552:.\Generated_Source\PSoC5/Pump.c ****             {
 553:.\Generated_Source\PSoC5/Pump.c ****                 locRxBufferRead = 0u;
 461              		.loc 1 553 0
 462 002a 0023     		movs	r3, #0
 463              	.LVL29:
 464              	.L38:
 554:.\Generated_Source\PSoC5/Pump.c ****             }
 555:.\Generated_Source\PSoC5/Pump.c ****             /* Update the real pointer */
 556:.\Generated_Source\PSoC5/Pump.c ****             Pump_rxBufferRead = locRxBufferRead;
 465              		.loc 1 556 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 19


 466 002c 0F4A     		ldr	r2, .L43+4
 467 002e 5380     		strh	r3, [r2, #2]	@ movhi
 557:.\Generated_Source\PSoC5/Pump.c **** 
 558:.\Generated_Source\PSoC5/Pump.c ****             if(Pump_rxBufferLoopDetect != 0u)
 468              		.loc 1 558 0
 469 0030 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 470              	.LVL30:
 471 0032 13F0FF0F 		tst	r3, #255
 472 0036 13D0     		beq	.L39
 559:.\Generated_Source\PSoC5/Pump.c ****             {
 560:.\Generated_Source\PSoC5/Pump.c ****                 Pump_rxBufferLoopDetect = 0u;
 473              		.loc 1 560 0
 474 0038 0022     		movs	r2, #0
 475 003a 0C4B     		ldr	r3, .L43+4
 476 003c 9A71     		strb	r2, [r3, #6]
 477              	.LVL31:
 478 003e 0FE0     		b	.L39
 479              	.LVL32:
 480              	.L37:
 561:.\Generated_Source\PSoC5/Pump.c ****                 #if( (Pump_RX_INTERRUPT_ENABLED) && (Pump_FLOW_CONTROL != 0u) )
 562:.\Generated_Source\PSoC5/Pump.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:.\Generated_Source\PSoC5/Pump.c ****                     #if( Pump_HD_ENABLED )
 564:.\Generated_Source\PSoC5/Pump.c ****                         if((Pump_CONTROL_REG & Pump_CTRL_HD_SEND) == 0u)
 565:.\Generated_Source\PSoC5/Pump.c ****                         {   /* In Half duplex mode return RX mask only if
 566:.\Generated_Source\PSoC5/Pump.c ****                             *  RX configuration set, otherwise
 567:.\Generated_Source\PSoC5/Pump.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:.\Generated_Source\PSoC5/Pump.c ****                             */
 569:.\Generated_Source\PSoC5/Pump.c ****                             Pump_RXSTATUS_MASK_REG |= Pump_RX_STS_FIFO_NOTEMPTY;
 570:.\Generated_Source\PSoC5/Pump.c ****                         }
 571:.\Generated_Source\PSoC5/Pump.c ****                     #else
 572:.\Generated_Source\PSoC5/Pump.c ****                         Pump_RXSTATUS_MASK_REG |= Pump_RX_STS_FIFO_NOTEMPTY;
 573:.\Generated_Source\PSoC5/Pump.c ****                     #endif /* end Pump_HD_ENABLED */
 574:.\Generated_Source\PSoC5/Pump.c ****                 #endif /* Pump_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:.\Generated_Source\PSoC5/Pump.c ****             }
 576:.\Generated_Source\PSoC5/Pump.c **** 
 577:.\Generated_Source\PSoC5/Pump.c ****         }
 578:.\Generated_Source\PSoC5/Pump.c ****         else
 579:.\Generated_Source\PSoC5/Pump.c ****         {   rxStatus = Pump_RXSTATUS_REG;
 481              		.loc 1 579 0
 482 0040 0C4B     		ldr	r3, .L43+12
 483              	.LVL33:
 484 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 485 0044 DBB2     		uxtb	r3, r3
 486              	.LVL34:
 580:.\Generated_Source\PSoC5/Pump.c ****             if((rxStatus & Pump_RX_STS_FIFO_NOTEMPTY) != 0u)
 487              		.loc 1 580 0
 488 0046 13F0200F 		tst	r3, #32
 489 004a 06D0     		beq	.L41
 581:.\Generated_Source\PSoC5/Pump.c ****             {   /* Read received data from FIFO */
 582:.\Generated_Source\PSoC5/Pump.c ****                 rxData = Pump_RXDATA_REG;
 490              		.loc 1 582 0
 491 004c 0A4A     		ldr	r2, .L43+16
 492 004e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 493 0050 C0B2     		uxtb	r0, r0
 494              	.LVL35:
 583:.\Generated_Source\PSoC5/Pump.c ****                 /*Check status on error*/
 584:.\Generated_Source\PSoC5/Pump.c ****                 if((rxStatus & (Pump_RX_STS_BREAK | Pump_RX_STS_PAR_ERROR |
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 20


 495              		.loc 1 584 0
 496 0052 13F01E0F 		tst	r3, #30
 497 0056 02D1     		bne	.L42
 498 0058 02E0     		b	.L39
 499              	.LVL36:
 500              	.L41:
 534:.\Generated_Source\PSoC5/Pump.c ****         uint8 rxStatus;
 501              		.loc 1 534 0
 502 005a 0020     		movs	r0, #0
 503 005c 00E0     		b	.L39
 504              	.LVL37:
 505              	.L42:
 585:.\Generated_Source\PSoC5/Pump.c ****                                 Pump_RX_STS_STOP_ERROR | Pump_RX_STS_OVERRUN)) != 0u)
 586:.\Generated_Source\PSoC5/Pump.c ****                 {
 587:.\Generated_Source\PSoC5/Pump.c ****                     rxData = 0u;
 506              		.loc 1 587 0
 507 005e 0020     		movs	r0, #0
 508              	.LVL38:
 509              	.L39:
 588:.\Generated_Source\PSoC5/Pump.c ****                 }
 589:.\Generated_Source\PSoC5/Pump.c ****             }
 590:.\Generated_Source\PSoC5/Pump.c ****         }
 591:.\Generated_Source\PSoC5/Pump.c **** 
 592:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableRxInt();
 510              		.loc 1 592 0
 511 0060 0422     		movs	r2, #4
 512 0062 064B     		ldr	r3, .L43+20
 513 0064 1A60     		str	r2, [r3]
 593:.\Generated_Source\PSoC5/Pump.c **** 
 594:.\Generated_Source\PSoC5/Pump.c ****     #else
 595:.\Generated_Source\PSoC5/Pump.c **** 
 596:.\Generated_Source\PSoC5/Pump.c ****         rxStatus =Pump_RXSTATUS_REG;
 597:.\Generated_Source\PSoC5/Pump.c ****         if((rxStatus & Pump_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:.\Generated_Source\PSoC5/Pump.c ****         {
 599:.\Generated_Source\PSoC5/Pump.c ****             /* Read received data from FIFO */
 600:.\Generated_Source\PSoC5/Pump.c ****             rxData = Pump_RXDATA_REG;
 601:.\Generated_Source\PSoC5/Pump.c **** 
 602:.\Generated_Source\PSoC5/Pump.c ****             /*Check status on error*/
 603:.\Generated_Source\PSoC5/Pump.c ****             if((rxStatus & (Pump_RX_STS_BREAK | Pump_RX_STS_PAR_ERROR |
 604:.\Generated_Source\PSoC5/Pump.c ****                             Pump_RX_STS_STOP_ERROR | Pump_RX_STS_OVERRUN)) != 0u)
 605:.\Generated_Source\PSoC5/Pump.c ****             {
 606:.\Generated_Source\PSoC5/Pump.c ****                 rxData = 0u;
 607:.\Generated_Source\PSoC5/Pump.c ****             }
 608:.\Generated_Source\PSoC5/Pump.c ****         }
 609:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 610:.\Generated_Source\PSoC5/Pump.c **** 
 611:.\Generated_Source\PSoC5/Pump.c ****         return(rxData);
 612:.\Generated_Source\PSoC5/Pump.c ****     }
 514              		.loc 1 612 0
 515 0066 7047     		bx	lr
 516              	.L44:
 517              		.align	2
 518              	.L43:
 519 0068 80E100E0 		.word	-536813184
 520 006c 00000000 		.word	.LANCHOR0
 521 0070 00000000 		.word	Pump_rxBuffer
 522 0074 6C640040 		.word	1073767532
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 21


 523 0078 4B640040 		.word	1073767499
 524 007c 00E100E0 		.word	-536813312
 525              		.cfi_endproc
 526              	.LFE9:
 527              		.size	Pump_GetChar, .-Pump_GetChar
 528              		.section	.text.Pump_GetByte,"ax",%progbits
 529              		.align	2
 530              		.global	Pump_GetByte
 531              		.thumb
 532              		.thumb_func
 533              		.type	Pump_GetByte, %function
 534              	Pump_GetByte:
 535              	.LFB10:
 613:.\Generated_Source\PSoC5/Pump.c **** 
 614:.\Generated_Source\PSoC5/Pump.c **** 
 615:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 616:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_GetByte
 617:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 618:.\Generated_Source\PSoC5/Pump.c ****     *
 619:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 620:.\Generated_Source\PSoC5/Pump.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:.\Generated_Source\PSoC5/Pump.c ****     *  condition.
 622:.\Generated_Source\PSoC5/Pump.c ****     *
 623:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 624:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 625:.\Generated_Source\PSoC5/Pump.c ****     *
 626:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 627:.\Generated_Source\PSoC5/Pump.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:.\Generated_Source\PSoC5/Pump.c ****     *  an error has occurred.
 629:.\Generated_Source\PSoC5/Pump.c ****     *
 630:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 631:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 632:.\Generated_Source\PSoC5/Pump.c ****     *
 633:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 634:.\Generated_Source\PSoC5/Pump.c ****     uint16 Pump_GetByte(void) 
 635:.\Generated_Source\PSoC5/Pump.c ****     {
 536              		.loc 1 635 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540 0000 10B5     		push	{r4, lr}
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 4, -8
 543              		.cfi_offset 14, -4
 636:.\Generated_Source\PSoC5/Pump.c ****         
 637:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 638:.\Generated_Source\PSoC5/Pump.c ****         uint16 locErrorStatus;
 639:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt */
 640:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableRxInt();
 544              		.loc 1 640 0
 545 0002 0423     		movs	r3, #4
 546 0004 064A     		ldr	r2, .L47
 547 0006 1360     		str	r3, [r2]
 641:.\Generated_Source\PSoC5/Pump.c ****         locErrorStatus = (uint16)Pump_errorStatus;
 548              		.loc 1 641 0
 549 0008 064A     		ldr	r2, .L47+4
 550 000a 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 22


 551              	.LVL39:
 642:.\Generated_Source\PSoC5/Pump.c ****         Pump_errorStatus = 0u;
 552              		.loc 1 642 0
 553 000c 0021     		movs	r1, #0
 554 000e 1170     		strb	r1, [r2]
 643:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableRxInt();
 555              		.loc 1 643 0
 556 0010 054A     		ldr	r2, .L47+8
 557 0012 1360     		str	r3, [r2]
 644:.\Generated_Source\PSoC5/Pump.c ****         return ( (uint16)(locErrorStatus << 8u) | Pump_ReadRxData() );
 558              		.loc 1 644 0
 559 0014 2402     		lsls	r4, r4, #8
 560              	.LVL40:
 561 0016 FFF7FEFF 		bl	Pump_ReadRxData
 562              	.LVL41:
 563 001a 2043     		orrs	r0, r0, r4
 645:.\Generated_Source\PSoC5/Pump.c ****     #else
 646:.\Generated_Source\PSoC5/Pump.c ****         return ( ((uint16)Pump_ReadRxStatus() << 8u) | Pump_ReadRxData() );
 647:.\Generated_Source\PSoC5/Pump.c ****     #endif /* Pump_RX_INTERRUPT_ENABLED */
 648:.\Generated_Source\PSoC5/Pump.c ****         
 649:.\Generated_Source\PSoC5/Pump.c ****     }
 564              		.loc 1 649 0
 565 001c 80B2     		uxth	r0, r0
 566 001e 10BD     		pop	{r4, pc}
 567              	.L48:
 568              		.align	2
 569              	.L47:
 570 0020 80E100E0 		.word	-536813184
 571 0024 00000000 		.word	.LANCHOR0
 572 0028 00E100E0 		.word	-536813312
 573              		.cfi_endproc
 574              	.LFE10:
 575              		.size	Pump_GetByte, .-Pump_GetByte
 576              		.section	.text.Pump_GetRxBufferSize,"ax",%progbits
 577              		.align	2
 578              		.global	Pump_GetRxBufferSize
 579              		.thumb
 580              		.thumb_func
 581              		.type	Pump_GetRxBufferSize, %function
 582              	Pump_GetRxBufferSize:
 583              	.LFB11:
 650:.\Generated_Source\PSoC5/Pump.c **** 
 651:.\Generated_Source\PSoC5/Pump.c **** 
 652:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 653:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_GetRxBufferSize
 654:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 655:.\Generated_Source\PSoC5/Pump.c ****     *
 656:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 657:.\Generated_Source\PSoC5/Pump.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:.\Generated_Source\PSoC5/Pump.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:.\Generated_Source\PSoC5/Pump.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:.\Generated_Source\PSoC5/Pump.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:.\Generated_Source\PSoC5/Pump.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:.\Generated_Source\PSoC5/Pump.c ****     *    account.
 663:.\Generated_Source\PSoC5/Pump.c ****     *
 664:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 665:.\Generated_Source\PSoC5/Pump.c ****     *  None.
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 23


 666:.\Generated_Source\PSoC5/Pump.c ****     *
 667:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 668:.\Generated_Source\PSoC5/Pump.c ****     *  uint16: Number of bytes in the RX buffer. 
 669:.\Generated_Source\PSoC5/Pump.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:.\Generated_Source\PSoC5/Pump.c ****     *
 671:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 672:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferWrite - used to calculate left bytes.
 673:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferRead - used to calculate left bytes.
 674:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferLoopDetect - checked to decide left bytes amount.
 675:.\Generated_Source\PSoC5/Pump.c ****     *
 676:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 677:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 678:.\Generated_Source\PSoC5/Pump.c ****     *
 679:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
 680:.\Generated_Source\PSoC5/Pump.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:.\Generated_Source\PSoC5/Pump.c ****     *
 682:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 683:.\Generated_Source\PSoC5/Pump.c ****     uint16 Pump_GetRxBufferSize(void)
 684:.\Generated_Source\PSoC5/Pump.c ****                                                             
 685:.\Generated_Source\PSoC5/Pump.c ****     {
 584              		.loc 1 685 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 686:.\Generated_Source\PSoC5/Pump.c ****         uint16 size;
 687:.\Generated_Source\PSoC5/Pump.c **** 
 688:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 689:.\Generated_Source\PSoC5/Pump.c **** 
 690:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt */
 691:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableRxInt();
 589              		.loc 1 691 0
 590 0000 0422     		movs	r2, #4
 591 0002 164B     		ldr	r3, .L54
 592 0004 1A60     		str	r2, [r3]
 692:.\Generated_Source\PSoC5/Pump.c **** 
 693:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_rxBufferRead == Pump_rxBufferWrite)
 593              		.loc 1 693 0
 594 0006 164B     		ldr	r3, .L54+4
 595 0008 5A88     		ldrh	r2, [r3, #2]
 596 000a 92B2     		uxth	r2, r2
 597 000c 9B88     		ldrh	r3, [r3, #4]
 598 000e 9BB2     		uxth	r3, r3
 599 0010 9A42     		cmp	r2, r3
 600 0012 07D1     		bne	.L50
 694:.\Generated_Source\PSoC5/Pump.c ****         {
 695:.\Generated_Source\PSoC5/Pump.c ****             if(Pump_rxBufferLoopDetect != 0u)
 601              		.loc 1 695 0
 602 0014 124B     		ldr	r3, .L54+4
 603 0016 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 604 0018 13F0FF0F 		tst	r3, #255
 605 001c 19D0     		beq	.L53
 696:.\Generated_Source\PSoC5/Pump.c ****             {
 697:.\Generated_Source\PSoC5/Pump.c ****                 size = Pump_RX_BUFFER_SIZE;
 606              		.loc 1 697 0
 607 001e 4FF48070 		mov	r0, #256
 608 0022 17E0     		b	.L51
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 24


 609              	.L50:
 698:.\Generated_Source\PSoC5/Pump.c ****             }
 699:.\Generated_Source\PSoC5/Pump.c ****             else
 700:.\Generated_Source\PSoC5/Pump.c ****             {
 701:.\Generated_Source\PSoC5/Pump.c ****                 size = 0u;
 702:.\Generated_Source\PSoC5/Pump.c ****             }
 703:.\Generated_Source\PSoC5/Pump.c ****         }
 704:.\Generated_Source\PSoC5/Pump.c ****         else if(Pump_rxBufferRead < Pump_rxBufferWrite)
 610              		.loc 1 704 0
 611 0024 0E4B     		ldr	r3, .L54+4
 612 0026 5A88     		ldrh	r2, [r3, #2]
 613 0028 92B2     		uxth	r2, r2
 614 002a 9B88     		ldrh	r3, [r3, #4]
 615 002c 9BB2     		uxth	r3, r3
 616 002e 9A42     		cmp	r2, r3
 617 0030 05D2     		bcs	.L52
 705:.\Generated_Source\PSoC5/Pump.c ****         {
 706:.\Generated_Source\PSoC5/Pump.c ****             size = (Pump_rxBufferWrite - Pump_rxBufferRead);
 618              		.loc 1 706 0
 619 0032 0B4A     		ldr	r2, .L54+4
 620 0034 9388     		ldrh	r3, [r2, #4]
 621 0036 5088     		ldrh	r0, [r2, #2]
 622 0038 181A     		subs	r0, r3, r0
 623 003a 80B2     		uxth	r0, r0
 624              	.LVL42:
 625 003c 0AE0     		b	.L51
 626              	.LVL43:
 627              	.L52:
 707:.\Generated_Source\PSoC5/Pump.c ****         }
 708:.\Generated_Source\PSoC5/Pump.c ****         else
 709:.\Generated_Source\PSoC5/Pump.c ****         {
 710:.\Generated_Source\PSoC5/Pump.c ****             size = (Pump_RX_BUFFER_SIZE - Pump_rxBufferRead) + Pump_rxBufferWrite;
 628              		.loc 1 710 0
 629 003e 084A     		ldr	r2, .L54+4
 630 0040 9088     		ldrh	r0, [r2, #4]
 631 0042 83B2     		uxth	r3, r0
 632 0044 5088     		ldrh	r0, [r2, #2]
 633 0046 80B2     		uxth	r0, r0
 634 0048 181A     		subs	r0, r3, r0
 635 004a 00F58070 		add	r0, r0, #256
 636 004e 80B2     		uxth	r0, r0
 637              	.LVL44:
 638 0050 00E0     		b	.L51
 639              	.LVL45:
 640              	.L53:
 701:.\Generated_Source\PSoC5/Pump.c ****             }
 641              		.loc 1 701 0
 642 0052 0020     		movs	r0, #0
 643              	.L51:
 644              	.LVL46:
 711:.\Generated_Source\PSoC5/Pump.c ****         }
 712:.\Generated_Source\PSoC5/Pump.c **** 
 713:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableRxInt();
 645              		.loc 1 713 0
 646 0054 0422     		movs	r2, #4
 647 0056 034B     		ldr	r3, .L54+8
 648 0058 1A60     		str	r2, [r3]
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 25


 714:.\Generated_Source\PSoC5/Pump.c **** 
 715:.\Generated_Source\PSoC5/Pump.c ****     #else
 716:.\Generated_Source\PSoC5/Pump.c **** 
 717:.\Generated_Source\PSoC5/Pump.c ****         /* We can only know if there is data in the fifo. */
 718:.\Generated_Source\PSoC5/Pump.c ****         size = ((Pump_RXSTATUS_REG & Pump_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:.\Generated_Source\PSoC5/Pump.c **** 
 720:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 721:.\Generated_Source\PSoC5/Pump.c **** 
 722:.\Generated_Source\PSoC5/Pump.c ****         return(size);
 723:.\Generated_Source\PSoC5/Pump.c ****     }
 649              		.loc 1 723 0
 650 005a 7047     		bx	lr
 651              	.L55:
 652              		.align	2
 653              	.L54:
 654 005c 80E100E0 		.word	-536813184
 655 0060 00000000 		.word	.LANCHOR0
 656 0064 00E100E0 		.word	-536813312
 657              		.cfi_endproc
 658              	.LFE11:
 659              		.size	Pump_GetRxBufferSize, .-Pump_GetRxBufferSize
 660              		.section	.text.Pump_ClearRxBuffer,"ax",%progbits
 661              		.align	2
 662              		.global	Pump_ClearRxBuffer
 663              		.thumb
 664              		.thumb_func
 665              		.type	Pump_ClearRxBuffer, %function
 666              	Pump_ClearRxBuffer:
 667              	.LFB12:
 724:.\Generated_Source\PSoC5/Pump.c **** 
 725:.\Generated_Source\PSoC5/Pump.c **** 
 726:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 727:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_ClearRxBuffer
 728:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 729:.\Generated_Source\PSoC5/Pump.c ****     *
 730:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 731:.\Generated_Source\PSoC5/Pump.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:.\Generated_Source\PSoC5/Pump.c ****     *
 733:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 734:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 735:.\Generated_Source\PSoC5/Pump.c ****     *
 736:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 737:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 738:.\Generated_Source\PSoC5/Pump.c ****     *
 739:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 740:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferWrite - cleared to zero.
 741:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferRead - cleared to zero.
 742:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferLoopDetect - cleared to zero.
 743:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxBufferOverflow - cleared to zero.
 744:.\Generated_Source\PSoC5/Pump.c ****     *
 745:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 746:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 747:.\Generated_Source\PSoC5/Pump.c ****     *
 748:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
 749:.\Generated_Source\PSoC5/Pump.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:.\Generated_Source\PSoC5/Pump.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:.\Generated_Source\PSoC5/Pump.c ****     *  have remained in the RAM.
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 26


 752:.\Generated_Source\PSoC5/Pump.c ****     *
 753:.\Generated_Source\PSoC5/Pump.c ****     * Side Effects:
 754:.\Generated_Source\PSoC5/Pump.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:.\Generated_Source\PSoC5/Pump.c ****     *
 756:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC5/Pump.c ****     void Pump_ClearRxBuffer(void) 
 758:.\Generated_Source\PSoC5/Pump.c ****     {
 668              		.loc 1 758 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672 0000 08B5     		push	{r3, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 3, -8
 675              		.cfi_offset 14, -4
 759:.\Generated_Source\PSoC5/Pump.c ****         uint8 enableInterrupts;
 760:.\Generated_Source\PSoC5/Pump.c **** 
 761:.\Generated_Source\PSoC5/Pump.c ****         /* Clear the HW FIFO */
 762:.\Generated_Source\PSoC5/Pump.c ****         enableInterrupts = CyEnterCriticalSection();
 676              		.loc 1 762 0
 677 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 678              	.LVL47:
 763:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXDATA_AUX_CTL_REG |= (uint8)  Pump_RX_FIFO_CLR;
 679              		.loc 1 763 0
 680 0006 0B4B     		ldr	r3, .L58
 681 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 682 000a 42F00102 		orr	r2, r2, #1
 683 000e 1A70     		strb	r2, [r3]
 764:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXDATA_AUX_CTL_REG &= (uint8) ~Pump_RX_FIFO_CLR;
 684              		.loc 1 764 0
 685 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 686 0012 02F0FE02 		and	r2, r2, #254
 687 0016 1A70     		strb	r2, [r3]
 765:.\Generated_Source\PSoC5/Pump.c ****         CyExitCriticalSection(enableInterrupts);
 688              		.loc 1 765 0
 689 0018 FFF7FEFF 		bl	CyExitCriticalSection
 690              	.LVL48:
 766:.\Generated_Source\PSoC5/Pump.c **** 
 767:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_RX_INTERRUPT_ENABLED)
 768:.\Generated_Source\PSoC5/Pump.c **** 
 769:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt. */
 770:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableRxInt();
 691              		.loc 1 770 0
 692 001c 0421     		movs	r1, #4
 693 001e 064B     		ldr	r3, .L58+4
 694 0020 1960     		str	r1, [r3]
 771:.\Generated_Source\PSoC5/Pump.c **** 
 772:.\Generated_Source\PSoC5/Pump.c ****         Pump_rxBufferRead = 0u;
 695              		.loc 1 772 0
 696 0022 064B     		ldr	r3, .L58+8
 697 0024 0022     		movs	r2, #0
 698 0026 5A80     		strh	r2, [r3, #2]	@ movhi
 773:.\Generated_Source\PSoC5/Pump.c ****         Pump_rxBufferWrite = 0u;
 699              		.loc 1 773 0
 700 0028 9A80     		strh	r2, [r3, #4]	@ movhi
 774:.\Generated_Source\PSoC5/Pump.c ****         Pump_rxBufferLoopDetect = 0u;
 701              		.loc 1 774 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 27


 702 002a 9A71     		strb	r2, [r3, #6]
 775:.\Generated_Source\PSoC5/Pump.c ****         Pump_rxBufferOverflow = 0u;
 703              		.loc 1 775 0
 704 002c DA71     		strb	r2, [r3, #7]
 776:.\Generated_Source\PSoC5/Pump.c **** 
 777:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableRxInt();
 705              		.loc 1 777 0
 706 002e 044B     		ldr	r3, .L58+12
 707 0030 1960     		str	r1, [r3]
 708 0032 08BD     		pop	{r3, pc}
 709              	.L59:
 710              		.align	2
 711              	.L58:
 712 0034 9B640040 		.word	1073767579
 713 0038 80E100E0 		.word	-536813184
 714 003c 00000000 		.word	.LANCHOR0
 715 0040 00E100E0 		.word	-536813312
 716              		.cfi_endproc
 717              	.LFE12:
 718              		.size	Pump_ClearRxBuffer, .-Pump_ClearRxBuffer
 719              		.section	.text.Pump_SetRxAddressMode,"ax",%progbits
 720              		.align	2
 721              		.global	Pump_SetRxAddressMode
 722              		.thumb
 723              		.thumb_func
 724              		.type	Pump_SetRxAddressMode, %function
 725              	Pump_SetRxAddressMode:
 726              	.LFB13:
 778:.\Generated_Source\PSoC5/Pump.c **** 
 779:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_RX_INTERRUPT_ENABLED) */
 780:.\Generated_Source\PSoC5/Pump.c **** 
 781:.\Generated_Source\PSoC5/Pump.c ****     }
 782:.\Generated_Source\PSoC5/Pump.c **** 
 783:.\Generated_Source\PSoC5/Pump.c **** 
 784:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 785:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetRxAddressMode
 786:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 787:.\Generated_Source\PSoC5/Pump.c ****     *
 788:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 789:.\Generated_Source\PSoC5/Pump.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:.\Generated_Source\PSoC5/Pump.c ****     *  UART.
 791:.\Generated_Source\PSoC5/Pump.c ****     *
 792:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 793:.\Generated_Source\PSoC5/Pump.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:.\Generated_Source\PSoC5/Pump.c ****     *  Pump__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:.\Generated_Source\PSoC5/Pump.c ****     *                                               detection
 796:.\Generated_Source\PSoC5/Pump.c ****     *  Pump__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:.\Generated_Source\PSoC5/Pump.c ****     *                                               address detection
 798:.\Generated_Source\PSoC5/Pump.c ****     *  Pump__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:.\Generated_Source\PSoC5/Pump.c ****     *                                               detection
 800:.\Generated_Source\PSoC5/Pump.c ****     *  Pump__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:.\Generated_Source\PSoC5/Pump.c ****     *                                               address detection
 802:.\Generated_Source\PSoC5/Pump.c ****     *  Pump__B_UART__AM_NONE - No address detection
 803:.\Generated_Source\PSoC5/Pump.c ****     *
 804:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 805:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 806:.\Generated_Source\PSoC5/Pump.c ****     *
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 28


 807:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 808:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxAddressMode - the parameter stored in this variable for
 809:.\Generated_Source\PSoC5/Pump.c ****     *   the farther usage in RX ISR.
 810:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_rxAddressDetected - set to initial state (0).
 811:.\Generated_Source\PSoC5/Pump.c ****     *
 812:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 813:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetRxAddressMode(uint8 addressMode)
 814:.\Generated_Source\PSoC5/Pump.c ****                                                         
 815:.\Generated_Source\PSoC5/Pump.c ****     {
 727              		.loc 1 815 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              	.LVL49:
 733 0000 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE13:
 736              		.size	Pump_SetRxAddressMode, .-Pump_SetRxAddressMode
 737 0002 00BF     		.section	.text.Pump_SetRxAddress1,"ax",%progbits
 738              		.align	2
 739              		.global	Pump_SetRxAddress1
 740              		.thumb
 741              		.thumb_func
 742              		.type	Pump_SetRxAddress1, %function
 743              	Pump_SetRxAddress1:
 744              	.LFB14:
 816:.\Generated_Source\PSoC5/Pump.c ****         #if(Pump_RXHW_ADDRESS_ENABLED)
 817:.\Generated_Source\PSoC5/Pump.c ****             #if(Pump_CONTROL_REG_REMOVED)
 818:.\Generated_Source\PSoC5/Pump.c ****                 if(0u != addressMode)
 819:.\Generated_Source\PSoC5/Pump.c ****                 {
 820:.\Generated_Source\PSoC5/Pump.c ****                     /* Suppress compiler warning */
 821:.\Generated_Source\PSoC5/Pump.c ****                 }
 822:.\Generated_Source\PSoC5/Pump.c ****             #else /* Pump_CONTROL_REG_REMOVED */
 823:.\Generated_Source\PSoC5/Pump.c ****                 uint8 tmpCtrl;
 824:.\Generated_Source\PSoC5/Pump.c ****                 tmpCtrl = Pump_CONTROL_REG & (uint8)~Pump_CTRL_RXADDR_MODE_MASK;
 825:.\Generated_Source\PSoC5/Pump.c ****                 tmpCtrl |= (uint8)(addressMode << Pump_CTRL_RXADDR_MODE0_SHIFT);
 826:.\Generated_Source\PSoC5/Pump.c ****                 Pump_CONTROL_REG = tmpCtrl;
 827:.\Generated_Source\PSoC5/Pump.c **** 
 828:.\Generated_Source\PSoC5/Pump.c ****                 #if(Pump_RX_INTERRUPT_ENABLED && \
 829:.\Generated_Source\PSoC5/Pump.c ****                    (Pump_RXBUFFERSIZE > Pump_FIFO_LENGTH) )
 830:.\Generated_Source\PSoC5/Pump.c ****                     Pump_rxAddressMode = addressMode;
 831:.\Generated_Source\PSoC5/Pump.c ****                     Pump_rxAddressDetected = 0u;
 832:.\Generated_Source\PSoC5/Pump.c ****                 #endif /* End Pump_RXBUFFERSIZE > Pump_FIFO_LENGTH*/
 833:.\Generated_Source\PSoC5/Pump.c ****             #endif /* End Pump_CONTROL_REG_REMOVED */
 834:.\Generated_Source\PSoC5/Pump.c ****         #else /* Pump_RXHW_ADDRESS_ENABLED */
 835:.\Generated_Source\PSoC5/Pump.c ****             if(0u != addressMode)
 836:.\Generated_Source\PSoC5/Pump.c ****             {
 837:.\Generated_Source\PSoC5/Pump.c ****                 /* Suppress compiler warning */
 838:.\Generated_Source\PSoC5/Pump.c ****             }
 839:.\Generated_Source\PSoC5/Pump.c ****         #endif /* End Pump_RXHW_ADDRESS_ENABLED */
 840:.\Generated_Source\PSoC5/Pump.c ****     }
 841:.\Generated_Source\PSoC5/Pump.c **** 
 842:.\Generated_Source\PSoC5/Pump.c **** 
 843:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 844:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetRxAddress1
 845:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 29


 846:.\Generated_Source\PSoC5/Pump.c ****     *
 847:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 848:.\Generated_Source\PSoC5/Pump.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:.\Generated_Source\PSoC5/Pump.c ****     *
 850:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 851:.\Generated_Source\PSoC5/Pump.c ****     *  address: Address #1 for hardware address detection.
 852:.\Generated_Source\PSoC5/Pump.c ****     *
 853:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 854:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 855:.\Generated_Source\PSoC5/Pump.c ****     *
 856:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 857:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetRxAddress1(uint8 address) 
 858:.\Generated_Source\PSoC5/Pump.c ****     {
 745              		.loc 1 858 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750              	.LVL50:
 859:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXADDRESS1_REG = address;
 751              		.loc 1 859 0
 752 0000 014B     		ldr	r3, .L62
 753 0002 1870     		strb	r0, [r3]
 754 0004 7047     		bx	lr
 755              	.L63:
 756 0006 00BF     		.align	2
 757              	.L62:
 758 0008 2B640040 		.word	1073767467
 759              		.cfi_endproc
 760              	.LFE14:
 761              		.size	Pump_SetRxAddress1, .-Pump_SetRxAddress1
 762              		.section	.text.Pump_SetRxAddress2,"ax",%progbits
 763              		.align	2
 764              		.global	Pump_SetRxAddress2
 765              		.thumb
 766              		.thumb_func
 767              		.type	Pump_SetRxAddress2, %function
 768              	Pump_SetRxAddress2:
 769              	.LFB15:
 860:.\Generated_Source\PSoC5/Pump.c ****     }
 861:.\Generated_Source\PSoC5/Pump.c **** 
 862:.\Generated_Source\PSoC5/Pump.c **** 
 863:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 864:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetRxAddress2
 865:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 866:.\Generated_Source\PSoC5/Pump.c ****     *
 867:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 868:.\Generated_Source\PSoC5/Pump.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:.\Generated_Source\PSoC5/Pump.c ****     *
 870:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 871:.\Generated_Source\PSoC5/Pump.c ****     *  address: Address #2 for hardware address detection.
 872:.\Generated_Source\PSoC5/Pump.c ****     *
 873:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 874:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 875:.\Generated_Source\PSoC5/Pump.c ****     *
 876:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 877:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetRxAddress2(uint8 address) 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 30


 878:.\Generated_Source\PSoC5/Pump.c ****     {
 770              		.loc 1 878 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775              	.LVL51:
 879:.\Generated_Source\PSoC5/Pump.c ****         Pump_RXADDRESS2_REG = address;
 776              		.loc 1 879 0
 777 0000 014B     		ldr	r3, .L65
 778 0002 1870     		strb	r0, [r3]
 779 0004 7047     		bx	lr
 780              	.L66:
 781 0006 00BF     		.align	2
 782              	.L65:
 783 0008 3B640040 		.word	1073767483
 784              		.cfi_endproc
 785              	.LFE15:
 786              		.size	Pump_SetRxAddress2, .-Pump_SetRxAddress2
 787              		.section	.text.Pump_SetTxInterruptMode,"ax",%progbits
 788              		.align	2
 789              		.global	Pump_SetTxInterruptMode
 790              		.thumb
 791              		.thumb_func
 792              		.type	Pump_SetTxInterruptMode, %function
 793              	Pump_SetTxInterruptMode:
 794              	.LFB16:
 880:.\Generated_Source\PSoC5/Pump.c ****     }
 881:.\Generated_Source\PSoC5/Pump.c **** 
 882:.\Generated_Source\PSoC5/Pump.c **** #endif  /* Pump_RX_ENABLED || Pump_HD_ENABLED*/
 883:.\Generated_Source\PSoC5/Pump.c **** 
 884:.\Generated_Source\PSoC5/Pump.c **** 
 885:.\Generated_Source\PSoC5/Pump.c **** #if( (Pump_TX_ENABLED) || (Pump_HD_ENABLED) )
 886:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 887:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetTxInterruptMode
 888:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 889:.\Generated_Source\PSoC5/Pump.c ****     *
 890:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 891:.\Generated_Source\PSoC5/Pump.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:.\Generated_Source\PSoC5/Pump.c ****     *  interrupt.
 893:.\Generated_Source\PSoC5/Pump.c ****     *
 894:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 895:.\Generated_Source\PSoC5/Pump.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:.\Generated_Source\PSoC5/Pump.c ****     *
 901:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 902:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 903:.\Generated_Source\PSoC5/Pump.c ****     *
 904:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
 905:.\Generated_Source\PSoC5/Pump.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:.\Generated_Source\PSoC5/Pump.c ****     *
 907:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
 908:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetTxInterruptMode(uint8 intSrc) 
 909:.\Generated_Source\PSoC5/Pump.c ****     {
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 31


 795              		.loc 1 909 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 800              	.LVL52:
 910:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXSTATUS_MASK_REG = intSrc;
 801              		.loc 1 910 0
 802 0000 014B     		ldr	r3, .L68
 803 0002 1870     		strb	r0, [r3]
 804 0004 7047     		bx	lr
 805              	.L69:
 806 0006 00BF     		.align	2
 807              	.L68:
 808 0008 89650040 		.word	1073767817
 809              		.cfi_endproc
 810              	.LFE16:
 811              		.size	Pump_SetTxInterruptMode, .-Pump_SetTxInterruptMode
 812              		.section	.text.Pump_WriteTxData,"ax",%progbits
 813              		.align	2
 814              		.global	Pump_WriteTxData
 815              		.thumb
 816              		.thumb_func
 817              		.type	Pump_WriteTxData, %function
 818              	Pump_WriteTxData:
 819              	.LFB17:
 911:.\Generated_Source\PSoC5/Pump.c ****     }
 912:.\Generated_Source\PSoC5/Pump.c **** 
 913:.\Generated_Source\PSoC5/Pump.c **** 
 914:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 915:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_WriteTxData
 916:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 917:.\Generated_Source\PSoC5/Pump.c ****     *
 918:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 919:.\Generated_Source\PSoC5/Pump.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:.\Generated_Source\PSoC5/Pump.c ****     *  available without checking the TX status register. You must check status
 921:.\Generated_Source\PSoC5/Pump.c ****     *  separately.
 922:.\Generated_Source\PSoC5/Pump.c ****     *
 923:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 924:.\Generated_Source\PSoC5/Pump.c ****     *  txDataByte: data byte
 925:.\Generated_Source\PSoC5/Pump.c ****     *
 926:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 927:.\Generated_Source\PSoC5/Pump.c ****     * None.
 928:.\Generated_Source\PSoC5/Pump.c ****     *
 929:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
 930:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBuffer - RAM buffer pointer for save data for transmission
 931:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferWrite - cyclic index for write to txBuffer,
 932:.\Generated_Source\PSoC5/Pump.c ****     *    incremented after each byte saved to buffer.
 933:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferRead - cyclic index for read from txBuffer,
 934:.\Generated_Source\PSoC5/Pump.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
 936:.\Generated_Source\PSoC5/Pump.c ****     *    initialized.
 937:.\Generated_Source\PSoC5/Pump.c ****     *
 938:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
 939:.\Generated_Source\PSoC5/Pump.c ****     *  No.
 940:.\Generated_Source\PSoC5/Pump.c ****     *
 941:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 32


 942:.\Generated_Source\PSoC5/Pump.c ****     void Pump_WriteTxData(uint8 txDataByte) 
 943:.\Generated_Source\PSoC5/Pump.c ****     {
 820              		.loc 1 943 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825              	.LVL53:
 944:.\Generated_Source\PSoC5/Pump.c ****         /* If not Initialized then skip this function*/
 945:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_initVar != 0u)
 826              		.loc 1 945 0
 827 0000 024B     		ldr	r3, .L72
 828 0002 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 829 0004 0BB1     		cbz	r3, .L70
 946:.\Generated_Source\PSoC5/Pump.c ****         {
 947:.\Generated_Source\PSoC5/Pump.c ****         #if (Pump_TX_INTERRUPT_ENABLED)
 948:.\Generated_Source\PSoC5/Pump.c **** 
 949:.\Generated_Source\PSoC5/Pump.c ****             /* Protect variables that could change on interrupt. */
 950:.\Generated_Source\PSoC5/Pump.c ****             Pump_DisableTxInt();
 951:.\Generated_Source\PSoC5/Pump.c **** 
 952:.\Generated_Source\PSoC5/Pump.c ****             if( (Pump_txBufferRead == Pump_txBufferWrite) &&
 953:.\Generated_Source\PSoC5/Pump.c ****                 ((Pump_TXSTATUS_REG & Pump_TX_STS_FIFO_FULL) == 0u) )
 954:.\Generated_Source\PSoC5/Pump.c ****             {
 955:.\Generated_Source\PSoC5/Pump.c ****                 /* Add directly to the FIFO. */
 956:.\Generated_Source\PSoC5/Pump.c ****                 Pump_TXDATA_REG = txDataByte;
 957:.\Generated_Source\PSoC5/Pump.c ****             }
 958:.\Generated_Source\PSoC5/Pump.c ****             else
 959:.\Generated_Source\PSoC5/Pump.c ****             {
 960:.\Generated_Source\PSoC5/Pump.c ****                 if(Pump_txBufferWrite >= Pump_TX_BUFFER_SIZE)
 961:.\Generated_Source\PSoC5/Pump.c ****                 {
 962:.\Generated_Source\PSoC5/Pump.c ****                     Pump_txBufferWrite = 0u;
 963:.\Generated_Source\PSoC5/Pump.c ****                 }
 964:.\Generated_Source\PSoC5/Pump.c **** 
 965:.\Generated_Source\PSoC5/Pump.c ****                 Pump_txBuffer[Pump_txBufferWrite] = txDataByte;
 966:.\Generated_Source\PSoC5/Pump.c **** 
 967:.\Generated_Source\PSoC5/Pump.c ****                 /* Add to the software buffer. */
 968:.\Generated_Source\PSoC5/Pump.c ****                 Pump_txBufferWrite++;
 969:.\Generated_Source\PSoC5/Pump.c ****             }
 970:.\Generated_Source\PSoC5/Pump.c **** 
 971:.\Generated_Source\PSoC5/Pump.c ****             Pump_EnableTxInt();
 972:.\Generated_Source\PSoC5/Pump.c **** 
 973:.\Generated_Source\PSoC5/Pump.c ****         #else
 974:.\Generated_Source\PSoC5/Pump.c **** 
 975:.\Generated_Source\PSoC5/Pump.c ****             /* Add directly to the FIFO. */
 976:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXDATA_REG = txDataByte;
 830              		.loc 1 976 0
 831 0006 024B     		ldr	r3, .L72+4
 832 0008 1870     		strb	r0, [r3]
 833              	.L70:
 834 000a 7047     		bx	lr
 835              	.L73:
 836              		.align	2
 837              	.L72:
 838 000c 00000000 		.word	.LANCHOR0
 839 0010 48650040 		.word	1073767752
 840              		.cfi_endproc
 841              	.LFE17:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 33


 842              		.size	Pump_WriteTxData, .-Pump_WriteTxData
 843              		.section	.text.Pump_ReadTxStatus,"ax",%progbits
 844              		.align	2
 845              		.global	Pump_ReadTxStatus
 846              		.thumb
 847              		.thumb_func
 848              		.type	Pump_ReadTxStatus, %function
 849              	Pump_ReadTxStatus:
 850              	.LFB18:
 977:.\Generated_Source\PSoC5/Pump.c **** 
 978:.\Generated_Source\PSoC5/Pump.c ****         #endif /*(Pump_TX_INTERRUPT_ENABLED) */
 979:.\Generated_Source\PSoC5/Pump.c ****         }
 980:.\Generated_Source\PSoC5/Pump.c ****     }
 981:.\Generated_Source\PSoC5/Pump.c **** 
 982:.\Generated_Source\PSoC5/Pump.c **** 
 983:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
 984:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_ReadTxStatus
 985:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
 986:.\Generated_Source\PSoC5/Pump.c ****     *
 987:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
 988:.\Generated_Source\PSoC5/Pump.c ****     *  Reads the status register for the TX portion of the UART.
 989:.\Generated_Source\PSoC5/Pump.c ****     *
 990:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
 991:.\Generated_Source\PSoC5/Pump.c ****     *  None.
 992:.\Generated_Source\PSoC5/Pump.c ****     *
 993:.\Generated_Source\PSoC5/Pump.c ****     * Return:
 994:.\Generated_Source\PSoC5/Pump.c ****     *  Contents of the status register
 995:.\Generated_Source\PSoC5/Pump.c ****     *
 996:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
 997:.\Generated_Source\PSoC5/Pump.c ****     *  This function reads the TX status register, which is cleared on read.
 998:.\Generated_Source\PSoC5/Pump.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:.\Generated_Source\PSoC5/Pump.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:.\Generated_Source\PSoC5/Pump.c ****     *  and must be handled accordingly.
1001:.\Generated_Source\PSoC5/Pump.c ****     *
1002:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1003:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_ReadTxStatus(void) 
1004:.\Generated_Source\PSoC5/Pump.c ****     {
 851              		.loc 1 1004 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              		@ link register save eliminated.
1005:.\Generated_Source\PSoC5/Pump.c ****         return(Pump_TXSTATUS_REG);
 856              		.loc 1 1005 0
 857 0000 014B     		ldr	r3, .L75
 858 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1006:.\Generated_Source\PSoC5/Pump.c ****     }
 859              		.loc 1 1006 0
 860 0004 7047     		bx	lr
 861              	.L76:
 862 0006 00BF     		.align	2
 863              	.L75:
 864 0008 69650040 		.word	1073767785
 865              		.cfi_endproc
 866              	.LFE18:
 867              		.size	Pump_ReadTxStatus, .-Pump_ReadTxStatus
 868              		.section	.text.Pump_PutChar,"ax",%progbits
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 34


 869              		.align	2
 870              		.global	Pump_PutChar
 871              		.thumb
 872              		.thumb_func
 873              		.type	Pump_PutChar, %function
 874              	Pump_PutChar:
 875              	.LFB19:
1007:.\Generated_Source\PSoC5/Pump.c **** 
1008:.\Generated_Source\PSoC5/Pump.c **** 
1009:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1010:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_PutChar
1011:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1012:.\Generated_Source\PSoC5/Pump.c ****     *
1013:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1014:.\Generated_Source\PSoC5/Pump.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:.\Generated_Source\PSoC5/Pump.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:.\Generated_Source\PSoC5/Pump.c ****     *  hold the data.
1017:.\Generated_Source\PSoC5/Pump.c ****     *
1018:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1019:.\Generated_Source\PSoC5/Pump.c ****     *  txDataByte: Byte containing the data to transmit
1020:.\Generated_Source\PSoC5/Pump.c ****     *
1021:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1022:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1023:.\Generated_Source\PSoC5/Pump.c ****     *
1024:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1025:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBuffer - RAM buffer pointer for save data for transmission
1026:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferWrite - cyclic index for write to txBuffer,
1027:.\Generated_Source\PSoC5/Pump.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:.\Generated_Source\PSoC5/Pump.c ****     *     saved to buffer.
1029:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferRead - cyclic index for read from txBuffer,
1030:.\Generated_Source\PSoC5/Pump.c ****     *     checked to identify free space in txBuffer.
1031:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
1032:.\Generated_Source\PSoC5/Pump.c ****     *     initialized.
1033:.\Generated_Source\PSoC5/Pump.c ****     *
1034:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1035:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1036:.\Generated_Source\PSoC5/Pump.c ****     *
1037:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1038:.\Generated_Source\PSoC5/Pump.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:.\Generated_Source\PSoC5/Pump.c ****     *
1040:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1041:.\Generated_Source\PSoC5/Pump.c ****     void Pump_PutChar(uint8 txDataByte) 
1042:.\Generated_Source\PSoC5/Pump.c ****     {
 876              		.loc 1 1042 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881              	.LVL54:
 882              	.L78:
1043:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_TX_INTERRUPT_ENABLED)
1044:.\Generated_Source\PSoC5/Pump.c ****         /* The temporary output pointer is used since it takes two instructions
1045:.\Generated_Source\PSoC5/Pump.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:.\Generated_Source\PSoC5/Pump.c ****         *  pointer and getting an interrupt in between instructions.
1047:.\Generated_Source\PSoC5/Pump.c ****         */
1048:.\Generated_Source\PSoC5/Pump.c ****         uint8 locTxBufferWrite;
1049:.\Generated_Source\PSoC5/Pump.c ****         uint8 locTxBufferRead;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 35


1050:.\Generated_Source\PSoC5/Pump.c **** 
1051:.\Generated_Source\PSoC5/Pump.c ****         do
1052:.\Generated_Source\PSoC5/Pump.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:.\Generated_Source\PSoC5/Pump.c **** 
1054:.\Generated_Source\PSoC5/Pump.c ****         #if ((Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:.\Generated_Source\PSoC5/Pump.c ****             /* Disable TX interrupt to protect variables from modification */
1056:.\Generated_Source\PSoC5/Pump.c ****             Pump_DisableTxInt();
1057:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:.\Generated_Source\PSoC5/Pump.c **** 
1059:.\Generated_Source\PSoC5/Pump.c ****             locTxBufferWrite = Pump_txBufferWrite;
1060:.\Generated_Source\PSoC5/Pump.c ****             locTxBufferRead  = Pump_txBufferRead;
1061:.\Generated_Source\PSoC5/Pump.c **** 
1062:.\Generated_Source\PSoC5/Pump.c ****         #if ((Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:.\Generated_Source\PSoC5/Pump.c ****             /* Enable interrupt to continue transmission */
1064:.\Generated_Source\PSoC5/Pump.c ****             Pump_EnableTxInt();
1065:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:.\Generated_Source\PSoC5/Pump.c ****         }
1067:.\Generated_Source\PSoC5/Pump.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:.\Generated_Source\PSoC5/Pump.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:.\Generated_Source\PSoC5/Pump.c ****                                 (uint8)(Pump_TX_BUFFER_SIZE - 1u)) );
1070:.\Generated_Source\PSoC5/Pump.c **** 
1071:.\Generated_Source\PSoC5/Pump.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:.\Generated_Source\PSoC5/Pump.c ****             ((Pump_TXSTATUS_REG & Pump_TX_STS_FIFO_FULL) == 0u) )
1073:.\Generated_Source\PSoC5/Pump.c ****         {
1074:.\Generated_Source\PSoC5/Pump.c ****             /* Add directly to the FIFO */
1075:.\Generated_Source\PSoC5/Pump.c ****             Pump_TXDATA_REG = txDataByte;
1076:.\Generated_Source\PSoC5/Pump.c ****         }
1077:.\Generated_Source\PSoC5/Pump.c ****         else
1078:.\Generated_Source\PSoC5/Pump.c ****         {
1079:.\Generated_Source\PSoC5/Pump.c ****             if(locTxBufferWrite >= Pump_TX_BUFFER_SIZE)
1080:.\Generated_Source\PSoC5/Pump.c ****             {
1081:.\Generated_Source\PSoC5/Pump.c ****                 locTxBufferWrite = 0u;
1082:.\Generated_Source\PSoC5/Pump.c ****             }
1083:.\Generated_Source\PSoC5/Pump.c ****             /* Add to the software buffer. */
1084:.\Generated_Source\PSoC5/Pump.c ****             Pump_txBuffer[locTxBufferWrite] = txDataByte;
1085:.\Generated_Source\PSoC5/Pump.c ****             locTxBufferWrite++;
1086:.\Generated_Source\PSoC5/Pump.c **** 
1087:.\Generated_Source\PSoC5/Pump.c ****             /* Finally, update the real output pointer */
1088:.\Generated_Source\PSoC5/Pump.c ****         #if ((Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:.\Generated_Source\PSoC5/Pump.c ****             Pump_DisableTxInt();
1090:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:.\Generated_Source\PSoC5/Pump.c **** 
1092:.\Generated_Source\PSoC5/Pump.c ****             Pump_txBufferWrite = locTxBufferWrite;
1093:.\Generated_Source\PSoC5/Pump.c **** 
1094:.\Generated_Source\PSoC5/Pump.c ****         #if ((Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:.\Generated_Source\PSoC5/Pump.c ****             Pump_EnableTxInt();
1096:.\Generated_Source\PSoC5/Pump.c ****         #endif /* (Pump_TX_BUFFER_SIZE > Pump_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:.\Generated_Source\PSoC5/Pump.c **** 
1098:.\Generated_Source\PSoC5/Pump.c ****             if(0u != (Pump_TXSTATUS_REG & Pump_TX_STS_FIFO_EMPTY))
1099:.\Generated_Source\PSoC5/Pump.c ****             {
1100:.\Generated_Source\PSoC5/Pump.c ****                 /* Trigger TX interrupt to send software buffer */
1101:.\Generated_Source\PSoC5/Pump.c ****                 Pump_SetPendingTxInt();
1102:.\Generated_Source\PSoC5/Pump.c ****             }
1103:.\Generated_Source\PSoC5/Pump.c ****         }
1104:.\Generated_Source\PSoC5/Pump.c **** 
1105:.\Generated_Source\PSoC5/Pump.c ****     #else
1106:.\Generated_Source\PSoC5/Pump.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 36


1107:.\Generated_Source\PSoC5/Pump.c ****         while((Pump_TXSTATUS_REG & Pump_TX_STS_FIFO_FULL) != 0u)
 883              		.loc 1 1107 0 discriminator 1
 884 0000 034B     		ldr	r3, .L79
 885 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 886 0004 13F0040F 		tst	r3, #4
 887 0008 FAD1     		bne	.L78
1108:.\Generated_Source\PSoC5/Pump.c ****         {
1109:.\Generated_Source\PSoC5/Pump.c ****             /* Wait for room in the FIFO */
1110:.\Generated_Source\PSoC5/Pump.c ****         }
1111:.\Generated_Source\PSoC5/Pump.c **** 
1112:.\Generated_Source\PSoC5/Pump.c ****         /* Add directly to the FIFO */
1113:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXDATA_REG = txDataByte;
 888              		.loc 1 1113 0
 889 000a 024B     		ldr	r3, .L79+4
 890 000c 1870     		strb	r0, [r3]
 891 000e 7047     		bx	lr
 892              	.L80:
 893              		.align	2
 894              	.L79:
 895 0010 69650040 		.word	1073767785
 896 0014 48650040 		.word	1073767752
 897              		.cfi_endproc
 898              	.LFE19:
 899              		.size	Pump_PutChar, .-Pump_PutChar
 900              		.section	.text.Pump_PutString,"ax",%progbits
 901              		.align	2
 902              		.global	Pump_PutString
 903              		.thumb
 904              		.thumb_func
 905              		.type	Pump_PutString, %function
 906              	Pump_PutString:
 907              	.LFB20:
1114:.\Generated_Source\PSoC5/Pump.c **** 
1115:.\Generated_Source\PSoC5/Pump.c ****     #endif /* Pump_TX_INTERRUPT_ENABLED */
1116:.\Generated_Source\PSoC5/Pump.c ****     }
1117:.\Generated_Source\PSoC5/Pump.c **** 
1118:.\Generated_Source\PSoC5/Pump.c **** 
1119:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1120:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_PutString
1121:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1122:.\Generated_Source\PSoC5/Pump.c ****     *
1123:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1124:.\Generated_Source\PSoC5/Pump.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:.\Generated_Source\PSoC5/Pump.c ****     *
1126:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1127:.\Generated_Source\PSoC5/Pump.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:.\Generated_Source\PSoC5/Pump.c ****     *
1129:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1130:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1131:.\Generated_Source\PSoC5/Pump.c ****     *
1132:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1133:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
1134:.\Generated_Source\PSoC5/Pump.c ****     *     initialized.
1135:.\Generated_Source\PSoC5/Pump.c ****     *
1136:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1137:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1138:.\Generated_Source\PSoC5/Pump.c ****     *
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 37


1139:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1140:.\Generated_Source\PSoC5/Pump.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:.\Generated_Source\PSoC5/Pump.c ****     *  function blocks until the last character of the string is loaded into the
1142:.\Generated_Source\PSoC5/Pump.c ****     *  TX buffer.
1143:.\Generated_Source\PSoC5/Pump.c ****     *
1144:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1145:.\Generated_Source\PSoC5/Pump.c ****     void Pump_PutString(const char8 string[]) 
1146:.\Generated_Source\PSoC5/Pump.c ****     {
 908              		.loc 1 1146 0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 912              	.LVL55:
 913 0000 38B5     		push	{r3, r4, r5, lr}
 914              		.cfi_def_cfa_offset 16
 915              		.cfi_offset 3, -16
 916              		.cfi_offset 4, -12
 917              		.cfi_offset 5, -8
 918              		.cfi_offset 14, -4
 919              	.LVL56:
1147:.\Generated_Source\PSoC5/Pump.c ****         uint16 bufIndex = 0u;
1148:.\Generated_Source\PSoC5/Pump.c **** 
1149:.\Generated_Source\PSoC5/Pump.c ****         /* If not Initialized then skip this function */
1150:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_initVar != 0u)
 920              		.loc 1 1150 0
 921 0002 074B     		ldr	r3, .L87
 922 0004 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 923 0006 2BB9     		cbnz	r3, .L85
 924 0008 38BD     		pop	{r3, r4, r5, pc}
 925              	.LVL57:
 926              	.L84:
1151:.\Generated_Source\PSoC5/Pump.c ****         {
1152:.\Generated_Source\PSoC5/Pump.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:.\Generated_Source\PSoC5/Pump.c ****             while(string[bufIndex] != (char8) 0)
1154:.\Generated_Source\PSoC5/Pump.c ****             {
1155:.\Generated_Source\PSoC5/Pump.c ****                 Pump_PutChar((uint8)string[bufIndex]);
 927              		.loc 1 1155 0
 928 000a FFF7FEFF 		bl	Pump_PutChar
 929              	.LVL58:
1156:.\Generated_Source\PSoC5/Pump.c ****                 bufIndex++;
 930              		.loc 1 1156 0
 931 000e 0134     		adds	r4, r4, #1
 932              	.LVL59:
 933 0010 A4B2     		uxth	r4, r4
 934              	.LVL60:
 935 0012 01E0     		b	.L82
 936              	.LVL61:
 937              	.L85:
 938 0014 0546     		mov	r5, r0
 939 0016 0024     		movs	r4, #0
 940              	.LVL62:
 941              	.L82:
1153:.\Generated_Source\PSoC5/Pump.c ****             {
 942              		.loc 1 1153 0
 943 0018 285D     		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 944 001a 0028     		cmp	r0, #0
 945 001c F5D1     		bne	.L84
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 38


 946 001e 38BD     		pop	{r3, r4, r5, pc}
 947              	.LVL63:
 948              	.L88:
 949              		.align	2
 950              	.L87:
 951 0020 00000000 		.word	.LANCHOR0
 952              		.cfi_endproc
 953              	.LFE20:
 954              		.size	Pump_PutString, .-Pump_PutString
 955              		.section	.text.Pump_PutArray,"ax",%progbits
 956              		.align	2
 957              		.global	Pump_PutArray
 958              		.thumb
 959              		.thumb_func
 960              		.type	Pump_PutArray, %function
 961              	Pump_PutArray:
 962              	.LFB21:
1157:.\Generated_Source\PSoC5/Pump.c ****             }
1158:.\Generated_Source\PSoC5/Pump.c ****         }
1159:.\Generated_Source\PSoC5/Pump.c ****     }
1160:.\Generated_Source\PSoC5/Pump.c **** 
1161:.\Generated_Source\PSoC5/Pump.c **** 
1162:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1163:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_PutArray
1164:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1165:.\Generated_Source\PSoC5/Pump.c ****     *
1166:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1167:.\Generated_Source\PSoC5/Pump.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:.\Generated_Source\PSoC5/Pump.c ****     *  transmission.
1169:.\Generated_Source\PSoC5/Pump.c ****     *
1170:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1171:.\Generated_Source\PSoC5/Pump.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:.\Generated_Source\PSoC5/Pump.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:.\Generated_Source\PSoC5/Pump.c ****     *             Size parameter.
1174:.\Generated_Source\PSoC5/Pump.c ****     *
1175:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1176:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1177:.\Generated_Source\PSoC5/Pump.c ****     *
1178:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1179:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
1180:.\Generated_Source\PSoC5/Pump.c ****     *     initialized.
1181:.\Generated_Source\PSoC5/Pump.c ****     *
1182:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1183:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1184:.\Generated_Source\PSoC5/Pump.c ****     *
1185:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1186:.\Generated_Source\PSoC5/Pump.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:.\Generated_Source\PSoC5/Pump.c ****     *  function blocks until the last character of the string is loaded into the
1188:.\Generated_Source\PSoC5/Pump.c ****     *  TX buffer.
1189:.\Generated_Source\PSoC5/Pump.c ****     *
1190:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1191:.\Generated_Source\PSoC5/Pump.c ****     void Pump_PutArray(const uint8 string[], uint8 byteCount)
1192:.\Generated_Source\PSoC5/Pump.c ****                                                                     
1193:.\Generated_Source\PSoC5/Pump.c ****     {
 963              		.loc 1 1193 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 39


 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              	.LVL64:
1194:.\Generated_Source\PSoC5/Pump.c ****         uint8 bufIndex = 0u;
1195:.\Generated_Source\PSoC5/Pump.c **** 
1196:.\Generated_Source\PSoC5/Pump.c ****         /* If not Initialized then skip this function */
1197:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_initVar != 0u)
 968              		.loc 1 1197 0
 969 0000 084B     		ldr	r3, .L95
 970 0002 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 971 0004 33B9     		cbnz	r3, .L93
 972 0006 7047     		bx	lr
 973              	.LVL65:
 974              	.L92:
 975              		.cfi_def_cfa_offset 16
 976              		.cfi_offset 4, -16
 977              		.cfi_offset 5, -12
 978              		.cfi_offset 6, -8
 979              		.cfi_offset 14, -4
1198:.\Generated_Source\PSoC5/Pump.c ****         {
1199:.\Generated_Source\PSoC5/Pump.c ****             while(bufIndex < byteCount)
1200:.\Generated_Source\PSoC5/Pump.c ****             {
1201:.\Generated_Source\PSoC5/Pump.c ****                 Pump_PutChar(string[bufIndex]);
 980              		.loc 1 1201 0
 981 0008 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 982 000a FFF7FEFF 		bl	Pump_PutChar
 983              	.LVL66:
1202:.\Generated_Source\PSoC5/Pump.c ****                 bufIndex++;
 984              		.loc 1 1202 0
 985 000e 0134     		adds	r4, r4, #1
 986              	.LVL67:
 987 0010 E4B2     		uxtb	r4, r4
 988              	.LVL68:
 989 0012 03E0     		b	.L90
 990              	.LVL69:
 991              	.L93:
 992              		.cfi_def_cfa_offset 0
 993              		.cfi_restore 4
 994              		.cfi_restore 5
 995              		.cfi_restore 6
 996              		.cfi_restore 14
1193:.\Generated_Source\PSoC5/Pump.c ****         uint8 bufIndex = 0u;
 997              		.loc 1 1193 0
 998 0014 70B5     		push	{r4, r5, r6, lr}
 999              		.cfi_def_cfa_offset 16
 1000              		.cfi_offset 4, -16
 1001              		.cfi_offset 5, -12
 1002              		.cfi_offset 6, -8
 1003              		.cfi_offset 14, -4
 1004 0016 0D46     		mov	r5, r1
 1005 0018 0646     		mov	r6, r0
 1006 001a 0024     		movs	r4, #0
 1007              	.LVL70:
 1008              	.L90:
1199:.\Generated_Source\PSoC5/Pump.c ****             {
 1009              		.loc 1 1199 0
 1010 001c AC42     		cmp	r4, r5
 1011 001e F3D3     		bcc	.L92
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 40


 1012 0020 70BD     		pop	{r4, r5, r6, pc}
 1013              	.LVL71:
 1014              	.L96:
 1015 0022 00BF     		.align	2
 1016              	.L95:
 1017 0024 00000000 		.word	.LANCHOR0
 1018              		.cfi_endproc
 1019              	.LFE21:
 1020              		.size	Pump_PutArray, .-Pump_PutArray
 1021              		.section	.text.Pump_PutCRLF,"ax",%progbits
 1022              		.align	2
 1023              		.global	Pump_PutCRLF
 1024              		.thumb
 1025              		.thumb_func
 1026              		.type	Pump_PutCRLF, %function
 1027              	Pump_PutCRLF:
 1028              	.LFB22:
1203:.\Generated_Source\PSoC5/Pump.c ****             }
1204:.\Generated_Source\PSoC5/Pump.c ****         }
1205:.\Generated_Source\PSoC5/Pump.c ****     }
1206:.\Generated_Source\PSoC5/Pump.c **** 
1207:.\Generated_Source\PSoC5/Pump.c **** 
1208:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1209:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_PutCRLF
1210:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1211:.\Generated_Source\PSoC5/Pump.c ****     *
1212:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1213:.\Generated_Source\PSoC5/Pump.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:.\Generated_Source\PSoC5/Pump.c ****     *  (0x0A) to the transmit buffer.
1215:.\Generated_Source\PSoC5/Pump.c ****     *
1216:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1217:.\Generated_Source\PSoC5/Pump.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:.\Generated_Source\PSoC5/Pump.c ****     *
1219:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1220:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1221:.\Generated_Source\PSoC5/Pump.c ****     *
1222:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1223:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
1224:.\Generated_Source\PSoC5/Pump.c ****     *     initialized.
1225:.\Generated_Source\PSoC5/Pump.c ****     *
1226:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1227:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1228:.\Generated_Source\PSoC5/Pump.c ****     *
1229:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1230:.\Generated_Source\PSoC5/Pump.c ****     void Pump_PutCRLF(uint8 txDataByte) 
1231:.\Generated_Source\PSoC5/Pump.c ****     {
 1029              		.loc 1 1231 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              	.LVL72:
 1034 0000 08B5     		push	{r3, lr}
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 3, -8
 1037              		.cfi_offset 14, -4
1232:.\Generated_Source\PSoC5/Pump.c ****         /* If not Initialized then skip this function */
1233:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_initVar != 0u)
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 41


 1038              		.loc 1 1233 0
 1039 0002 064B     		ldr	r3, .L100
 1040 0004 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1041 0006 3BB1     		cbz	r3, .L97
1234:.\Generated_Source\PSoC5/Pump.c ****         {
1235:.\Generated_Source\PSoC5/Pump.c ****             Pump_PutChar(txDataByte);
 1042              		.loc 1 1235 0
 1043 0008 FFF7FEFF 		bl	Pump_PutChar
 1044              	.LVL73:
1236:.\Generated_Source\PSoC5/Pump.c ****             Pump_PutChar(0x0Du);
 1045              		.loc 1 1236 0
 1046 000c 0D20     		movs	r0, #13
 1047 000e FFF7FEFF 		bl	Pump_PutChar
 1048              	.LVL74:
1237:.\Generated_Source\PSoC5/Pump.c ****             Pump_PutChar(0x0Au);
 1049              		.loc 1 1237 0
 1050 0012 0A20     		movs	r0, #10
 1051 0014 FFF7FEFF 		bl	Pump_PutChar
 1052              	.LVL75:
 1053              	.L97:
 1054 0018 08BD     		pop	{r3, pc}
 1055              	.L101:
 1056 001a 00BF     		.align	2
 1057              	.L100:
 1058 001c 00000000 		.word	.LANCHOR0
 1059              		.cfi_endproc
 1060              	.LFE22:
 1061              		.size	Pump_PutCRLF, .-Pump_PutCRLF
 1062              		.section	.text.Pump_GetTxBufferSize,"ax",%progbits
 1063              		.align	2
 1064              		.global	Pump_GetTxBufferSize
 1065              		.thumb
 1066              		.thumb_func
 1067              		.type	Pump_GetTxBufferSize, %function
 1068              	Pump_GetTxBufferSize:
 1069              	.LFB23:
1238:.\Generated_Source\PSoC5/Pump.c ****         }
1239:.\Generated_Source\PSoC5/Pump.c ****     }
1240:.\Generated_Source\PSoC5/Pump.c **** 
1241:.\Generated_Source\PSoC5/Pump.c **** 
1242:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1243:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_GetTxBufferSize
1244:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1245:.\Generated_Source\PSoC5/Pump.c ****     *
1246:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1247:.\Generated_Source\PSoC5/Pump.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:.\Generated_Source\PSoC5/Pump.c ****     *  transmitted.
1249:.\Generated_Source\PSoC5/Pump.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:.\Generated_Source\PSoC5/Pump.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:.\Generated_Source\PSoC5/Pump.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:.\Generated_Source\PSoC5/Pump.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:.\Generated_Source\PSoC5/Pump.c ****     *    TX FIFO do not count.
1254:.\Generated_Source\PSoC5/Pump.c ****     *
1255:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1256:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1257:.\Generated_Source\PSoC5/Pump.c ****     *
1258:.\Generated_Source\PSoC5/Pump.c ****     * Return:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 42


1259:.\Generated_Source\PSoC5/Pump.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:.\Generated_Source\PSoC5/Pump.c ****     *  Buffer Size parameter.
1261:.\Generated_Source\PSoC5/Pump.c ****     *
1262:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1263:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferWrite - used to calculate left space.
1264:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferRead - used to calculate left space.
1265:.\Generated_Source\PSoC5/Pump.c ****     *
1266:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1267:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1268:.\Generated_Source\PSoC5/Pump.c ****     *
1269:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1270:.\Generated_Source\PSoC5/Pump.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:.\Generated_Source\PSoC5/Pump.c ****     *
1272:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/Pump.c ****     uint8 Pump_GetTxBufferSize(void)
1274:.\Generated_Source\PSoC5/Pump.c ****                                                             
1275:.\Generated_Source\PSoC5/Pump.c ****     {
 1070              		.loc 1 1275 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 0
 1073              		@ frame_needed = 0, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
1276:.\Generated_Source\PSoC5/Pump.c ****         uint8 size;
1277:.\Generated_Source\PSoC5/Pump.c **** 
1278:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_TX_INTERRUPT_ENABLED)
1279:.\Generated_Source\PSoC5/Pump.c **** 
1280:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt. */
1281:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableTxInt();
1282:.\Generated_Source\PSoC5/Pump.c **** 
1283:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_txBufferRead == Pump_txBufferWrite)
1284:.\Generated_Source\PSoC5/Pump.c ****         {
1285:.\Generated_Source\PSoC5/Pump.c ****             size = 0u;
1286:.\Generated_Source\PSoC5/Pump.c ****         }
1287:.\Generated_Source\PSoC5/Pump.c ****         else if(Pump_txBufferRead < Pump_txBufferWrite)
1288:.\Generated_Source\PSoC5/Pump.c ****         {
1289:.\Generated_Source\PSoC5/Pump.c ****             size = (Pump_txBufferWrite - Pump_txBufferRead);
1290:.\Generated_Source\PSoC5/Pump.c ****         }
1291:.\Generated_Source\PSoC5/Pump.c ****         else
1292:.\Generated_Source\PSoC5/Pump.c ****         {
1293:.\Generated_Source\PSoC5/Pump.c ****             size = (Pump_TX_BUFFER_SIZE - Pump_txBufferRead) +
1294:.\Generated_Source\PSoC5/Pump.c ****                     Pump_txBufferWrite;
1295:.\Generated_Source\PSoC5/Pump.c ****         }
1296:.\Generated_Source\PSoC5/Pump.c **** 
1297:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableTxInt();
1298:.\Generated_Source\PSoC5/Pump.c **** 
1299:.\Generated_Source\PSoC5/Pump.c ****     #else
1300:.\Generated_Source\PSoC5/Pump.c **** 
1301:.\Generated_Source\PSoC5/Pump.c ****         size = Pump_TXSTATUS_REG;
 1075              		.loc 1 1301 0
 1076 0000 074B     		ldr	r3, .L106
 1077 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1078 0004 DBB2     		uxtb	r3, r3
 1079              	.LVL76:
1302:.\Generated_Source\PSoC5/Pump.c **** 
1303:.\Generated_Source\PSoC5/Pump.c ****         /* Is the fifo is full. */
1304:.\Generated_Source\PSoC5/Pump.c ****         if((size & Pump_TX_STS_FIFO_FULL) != 0u)
 1080              		.loc 1 1304 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 43


 1081 0006 13F0040F 		tst	r3, #4
 1082 000a 04D1     		bne	.L104
1305:.\Generated_Source\PSoC5/Pump.c ****         {
1306:.\Generated_Source\PSoC5/Pump.c ****             size = Pump_FIFO_LENGTH;
1307:.\Generated_Source\PSoC5/Pump.c ****         }
1308:.\Generated_Source\PSoC5/Pump.c ****         else if((size & Pump_TX_STS_FIFO_EMPTY) != 0u)
 1083              		.loc 1 1308 0
 1084 000c 13F0020F 		tst	r3, #2
 1085 0010 03D0     		beq	.L105
1309:.\Generated_Source\PSoC5/Pump.c ****         {
1310:.\Generated_Source\PSoC5/Pump.c ****             size = 0u;
 1086              		.loc 1 1310 0
 1087 0012 0020     		movs	r0, #0
 1088 0014 7047     		bx	lr
 1089              	.L104:
1306:.\Generated_Source\PSoC5/Pump.c ****         }
 1090              		.loc 1 1306 0
 1091 0016 0420     		movs	r0, #4
 1092 0018 7047     		bx	lr
 1093              	.L105:
1311:.\Generated_Source\PSoC5/Pump.c ****         }
1312:.\Generated_Source\PSoC5/Pump.c ****         else
1313:.\Generated_Source\PSoC5/Pump.c ****         {
1314:.\Generated_Source\PSoC5/Pump.c ****             /* We only know there is data in the fifo. */
1315:.\Generated_Source\PSoC5/Pump.c ****             size = 1u;
 1094              		.loc 1 1315 0
 1095 001a 0120     		movs	r0, #1
 1096              	.LVL77:
1316:.\Generated_Source\PSoC5/Pump.c ****         }
1317:.\Generated_Source\PSoC5/Pump.c **** 
1318:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_TX_INTERRUPT_ENABLED) */
1319:.\Generated_Source\PSoC5/Pump.c **** 
1320:.\Generated_Source\PSoC5/Pump.c ****     return(size);
1321:.\Generated_Source\PSoC5/Pump.c ****     }
 1097              		.loc 1 1321 0
 1098 001c 7047     		bx	lr
 1099              	.L107:
 1100 001e 00BF     		.align	2
 1101              	.L106:
 1102 0020 69650040 		.word	1073767785
 1103              		.cfi_endproc
 1104              	.LFE23:
 1105              		.size	Pump_GetTxBufferSize, .-Pump_GetTxBufferSize
 1106              		.section	.text.Pump_ClearTxBuffer,"ax",%progbits
 1107              		.align	2
 1108              		.global	Pump_ClearTxBuffer
 1109              		.thumb
 1110              		.thumb_func
 1111              		.type	Pump_ClearTxBuffer, %function
 1112              	Pump_ClearTxBuffer:
 1113              	.LFB24:
1322:.\Generated_Source\PSoC5/Pump.c **** 
1323:.\Generated_Source\PSoC5/Pump.c **** 
1324:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1325:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_ClearTxBuffer
1326:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1327:.\Generated_Source\PSoC5/Pump.c ****     *
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 44


1328:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1329:.\Generated_Source\PSoC5/Pump.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:.\Generated_Source\PSoC5/Pump.c ****     *
1331:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1332:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1333:.\Generated_Source\PSoC5/Pump.c ****     *
1334:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1335:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1336:.\Generated_Source\PSoC5/Pump.c ****     *
1337:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1338:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferWrite - cleared to zero.
1339:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_txBufferRead - cleared to zero.
1340:.\Generated_Source\PSoC5/Pump.c ****     *
1341:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1342:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1343:.\Generated_Source\PSoC5/Pump.c ****     *
1344:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1345:.\Generated_Source\PSoC5/Pump.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:.\Generated_Source\PSoC5/Pump.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:.\Generated_Source\PSoC5/Pump.c ****     *  remained in the RAM.
1348:.\Generated_Source\PSoC5/Pump.c ****     *
1349:.\Generated_Source\PSoC5/Pump.c ****     * Side Effects:
1350:.\Generated_Source\PSoC5/Pump.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:.\Generated_Source\PSoC5/Pump.c ****     *  transmitting finishes transmitting.
1352:.\Generated_Source\PSoC5/Pump.c ****     *
1353:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1354:.\Generated_Source\PSoC5/Pump.c ****     void Pump_ClearTxBuffer(void) 
1355:.\Generated_Source\PSoC5/Pump.c ****     {
 1114              		.loc 1 1355 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118 0000 08B5     		push	{r3, lr}
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 3, -8
 1121              		.cfi_offset 14, -4
1356:.\Generated_Source\PSoC5/Pump.c ****         uint8 enableInterrupts;
1357:.\Generated_Source\PSoC5/Pump.c **** 
1358:.\Generated_Source\PSoC5/Pump.c ****         enableInterrupts = CyEnterCriticalSection();
 1122              		.loc 1 1358 0
 1123 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 1124              	.LVL78:
1359:.\Generated_Source\PSoC5/Pump.c ****         /* Clear the HW FIFO */
1360:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXDATA_AUX_CTL_REG |= (uint8)  Pump_TX_FIFO_CLR;
 1125              		.loc 1 1360 0
 1126 0006 064B     		ldr	r3, .L110
 1127 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1128 000a 42F00102 		orr	r2, r2, #1
 1129 000e 1A70     		strb	r2, [r3]
1361:.\Generated_Source\PSoC5/Pump.c ****         Pump_TXDATA_AUX_CTL_REG &= (uint8) ~Pump_TX_FIFO_CLR;
 1130              		.loc 1 1361 0
 1131 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1132 0012 02F0FE02 		and	r2, r2, #254
 1133 0016 1A70     		strb	r2, [r3]
1362:.\Generated_Source\PSoC5/Pump.c ****         CyExitCriticalSection(enableInterrupts);
 1134              		.loc 1 1362 0
 1135 0018 FFF7FEFF 		bl	CyExitCriticalSection
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 45


 1136              	.LVL79:
 1137 001c 08BD     		pop	{r3, pc}
 1138              	.L111:
 1139 001e 00BF     		.align	2
 1140              	.L110:
 1141 0020 98650040 		.word	1073767832
 1142              		.cfi_endproc
 1143              	.LFE24:
 1144              		.size	Pump_ClearTxBuffer, .-Pump_ClearTxBuffer
 1145              		.section	.text.Pump_SendBreak,"ax",%progbits
 1146              		.align	2
 1147              		.global	Pump_SendBreak
 1148              		.thumb
 1149              		.thumb_func
 1150              		.type	Pump_SendBreak, %function
 1151              	Pump_SendBreak:
 1152              	.LFB25:
1363:.\Generated_Source\PSoC5/Pump.c **** 
1364:.\Generated_Source\PSoC5/Pump.c ****     #if (Pump_TX_INTERRUPT_ENABLED)
1365:.\Generated_Source\PSoC5/Pump.c **** 
1366:.\Generated_Source\PSoC5/Pump.c ****         /* Protect variables that could change on interrupt. */
1367:.\Generated_Source\PSoC5/Pump.c ****         Pump_DisableTxInt();
1368:.\Generated_Source\PSoC5/Pump.c **** 
1369:.\Generated_Source\PSoC5/Pump.c ****         Pump_txBufferRead = 0u;
1370:.\Generated_Source\PSoC5/Pump.c ****         Pump_txBufferWrite = 0u;
1371:.\Generated_Source\PSoC5/Pump.c **** 
1372:.\Generated_Source\PSoC5/Pump.c ****         /* Enable Tx interrupt. */
1373:.\Generated_Source\PSoC5/Pump.c ****         Pump_EnableTxInt();
1374:.\Generated_Source\PSoC5/Pump.c **** 
1375:.\Generated_Source\PSoC5/Pump.c ****     #endif /* (Pump_TX_INTERRUPT_ENABLED) */
1376:.\Generated_Source\PSoC5/Pump.c ****     }
1377:.\Generated_Source\PSoC5/Pump.c **** 
1378:.\Generated_Source\PSoC5/Pump.c **** 
1379:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1380:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SendBreak
1381:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1382:.\Generated_Source\PSoC5/Pump.c ****     *
1383:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1384:.\Generated_Source\PSoC5/Pump.c ****     *  Transmits a break signal on the bus.
1385:.\Generated_Source\PSoC5/Pump.c ****     *
1386:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1387:.\Generated_Source\PSoC5/Pump.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_SEND_BREAK - Initialize registers for break, send the Break
1389:.\Generated_Source\PSoC5/Pump.c ****     *       signal and return immediately.
1390:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:.\Generated_Source\PSoC5/Pump.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_REINIT - Reinitialize registers to normal transmission mode
1393:.\Generated_Source\PSoC5/Pump.c ****     *       then return.
1394:.\Generated_Source\PSoC5/Pump.c ****     *   Pump_SEND_WAIT_REINIT - Performs both options: 
1395:.\Generated_Source\PSoC5/Pump.c ****     *      Pump_SEND_BREAK and Pump_WAIT_FOR_COMPLETE_REINIT.
1396:.\Generated_Source\PSoC5/Pump.c ****     *      This option is recommended for most cases.
1397:.\Generated_Source\PSoC5/Pump.c ****     *
1398:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1399:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1400:.\Generated_Source\PSoC5/Pump.c ****     *
1401:.\Generated_Source\PSoC5/Pump.c ****     * Global Variables:
1402:.\Generated_Source\PSoC5/Pump.c ****     *  Pump_initVar - checked to identify that the component has been
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 46


1403:.\Generated_Source\PSoC5/Pump.c ****     *     initialized.
1404:.\Generated_Source\PSoC5/Pump.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:.\Generated_Source\PSoC5/Pump.c ****     *
1406:.\Generated_Source\PSoC5/Pump.c ****     * Reentrant:
1407:.\Generated_Source\PSoC5/Pump.c ****     *  No.
1408:.\Generated_Source\PSoC5/Pump.c ****     *
1409:.\Generated_Source\PSoC5/Pump.c ****     * Theory:
1410:.\Generated_Source\PSoC5/Pump.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:.\Generated_Source\PSoC5/Pump.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:.\Generated_Source\PSoC5/Pump.c ****     *  operation.
1413:.\Generated_Source\PSoC5/Pump.c ****     *  There are 3 variants for this API usage:
1414:.\Generated_Source\PSoC5/Pump.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:.\Generated_Source\PSoC5/Pump.c ****     *     configuration returning. Function will block CPU until transmission
1416:.\Generated_Source\PSoC5/Pump.c ****     *     complete.
1417:.\Generated_Source\PSoC5/Pump.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:.\Generated_Source\PSoC5/Pump.c ****     *     operation
1419:.\Generated_Source\PSoC5/Pump.c ****     *     Example for this case:
1420:.\Generated_Source\PSoC5/Pump.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:.\Generated_Source\PSoC5/Pump.c ****     *         Add your code here to use CPU time
1422:.\Generated_Source\PSoC5/Pump.c ****     *     SendBreak(1);     - complete Break operation
1423:.\Generated_Source\PSoC5/Pump.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:.\Generated_Source\PSoC5/Pump.c ****     *     complete break operation.
1425:.\Generated_Source\PSoC5/Pump.c ****     *     Example for this case:
1426:.\Generated_Source\PSoC5/Pump.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:.\Generated_Source\PSoC5/Pump.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:.\Generated_Source\PSoC5/Pump.c ****     *         Add your code here to use CPU time
1429:.\Generated_Source\PSoC5/Pump.c ****     *     When interrupt appear with Pump_TX_STS_COMPLETE status:
1430:.\Generated_Source\PSoC5/Pump.c ****     *     SendBreak(2);     - complete Break operation
1431:.\Generated_Source\PSoC5/Pump.c ****     *
1432:.\Generated_Source\PSoC5/Pump.c ****     * Side Effects:
1433:.\Generated_Source\PSoC5/Pump.c ****     *  The Pump_SendBreak() function initializes registers to send a
1434:.\Generated_Source\PSoC5/Pump.c ****     *  break signal.
1435:.\Generated_Source\PSoC5/Pump.c ****     *  Break signal length depends on the break signal bits configuration.
1436:.\Generated_Source\PSoC5/Pump.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:.\Generated_Source\PSoC5/Pump.c ****     *  communication can continue.
1438:.\Generated_Source\PSoC5/Pump.c ****     *
1439:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1440:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SendBreak(uint8 retMode) 
1441:.\Generated_Source\PSoC5/Pump.c ****     {
 1153              		.loc 1 1441 0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157              		@ link register save eliminated.
 1158              	.LVL80:
1442:.\Generated_Source\PSoC5/Pump.c **** 
1443:.\Generated_Source\PSoC5/Pump.c ****         /* If not Initialized then skip this function*/
1444:.\Generated_Source\PSoC5/Pump.c ****         if(Pump_initVar != 0u)
 1159              		.loc 1 1444 0
 1160 0000 124B     		ldr	r3, .L119
 1161 0002 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1162 0004 0BB3     		cbz	r3, .L112
 1163              	.LBB2:
1445:.\Generated_Source\PSoC5/Pump.c ****         {
1446:.\Generated_Source\PSoC5/Pump.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:.\Generated_Source\PSoC5/Pump.c ****             /* When that is done then reset the counter value back */
1448:.\Generated_Source\PSoC5/Pump.c ****             uint8 tmpStat;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 47


1449:.\Generated_Source\PSoC5/Pump.c **** 
1450:.\Generated_Source\PSoC5/Pump.c ****         #if(Pump_HD_ENABLED) /* Half Duplex mode*/
1451:.\Generated_Source\PSoC5/Pump.c **** 
1452:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_SEND_BREAK) ||
1453:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT ) )
1454:.\Generated_Source\PSoC5/Pump.c ****             {
1455:.\Generated_Source\PSoC5/Pump.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:.\Generated_Source\PSoC5/Pump.c ****                 Pump_WriteControlRegister(Pump_ReadControlRegister() |
1457:.\Generated_Source\PSoC5/Pump.c ****                                                       Pump_CTRL_HD_SEND_BREAK);
1458:.\Generated_Source\PSoC5/Pump.c ****                 /* Send zeros */
1459:.\Generated_Source\PSoC5/Pump.c ****                 Pump_TXDATA_REG = 0u;
1460:.\Generated_Source\PSoC5/Pump.c **** 
1461:.\Generated_Source\PSoC5/Pump.c ****                 do /* Wait until transmit starts */
1462:.\Generated_Source\PSoC5/Pump.c ****                 {
1463:.\Generated_Source\PSoC5/Pump.c ****                     tmpStat = Pump_TXSTATUS_REG;
1464:.\Generated_Source\PSoC5/Pump.c ****                 }
1465:.\Generated_Source\PSoC5/Pump.c ****                 while((tmpStat & Pump_TX_STS_FIFO_EMPTY) != 0u);
1466:.\Generated_Source\PSoC5/Pump.c ****             }
1467:.\Generated_Source\PSoC5/Pump.c **** 
1468:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_WAIT_FOR_COMPLETE_REINIT) ||
1469:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT) )
1470:.\Generated_Source\PSoC5/Pump.c ****             {
1471:.\Generated_Source\PSoC5/Pump.c ****                 do /* Wait until transmit complete */
1472:.\Generated_Source\PSoC5/Pump.c ****                 {
1473:.\Generated_Source\PSoC5/Pump.c ****                     tmpStat = Pump_TXSTATUS_REG;
1474:.\Generated_Source\PSoC5/Pump.c ****                 }
1475:.\Generated_Source\PSoC5/Pump.c ****                 while(((uint8)~tmpStat & Pump_TX_STS_COMPLETE) != 0u);
1476:.\Generated_Source\PSoC5/Pump.c ****             }
1477:.\Generated_Source\PSoC5/Pump.c **** 
1478:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_WAIT_FOR_COMPLETE_REINIT) ||
1479:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_REINIT) ||
1480:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT) )
1481:.\Generated_Source\PSoC5/Pump.c ****             {
1482:.\Generated_Source\PSoC5/Pump.c ****                 Pump_WriteControlRegister(Pump_ReadControlRegister() &
1483:.\Generated_Source\PSoC5/Pump.c ****                                               (uint8)~Pump_CTRL_HD_SEND_BREAK);
1484:.\Generated_Source\PSoC5/Pump.c ****             }
1485:.\Generated_Source\PSoC5/Pump.c **** 
1486:.\Generated_Source\PSoC5/Pump.c ****         #else /* Pump_HD_ENABLED Full Duplex mode */
1487:.\Generated_Source\PSoC5/Pump.c **** 
1488:.\Generated_Source\PSoC5/Pump.c ****             static uint8 txPeriod;
1489:.\Generated_Source\PSoC5/Pump.c **** 
1490:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_SEND_BREAK) ||
 1164              		.loc 1 1490 0
 1165 0006 08B1     		cbz	r0, .L114
 1166              		.loc 1 1490 0 is_stmt 0 discriminator 1
 1167 0008 0328     		cmp	r0, #3
 1168 000a 0DD1     		bne	.L115
 1169              	.L114:
1491:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT) )
1492:.\Generated_Source\PSoC5/Pump.c ****             {
1493:.\Generated_Source\PSoC5/Pump.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:.\Generated_Source\PSoC5/Pump.c ****                 #if( (Pump_PARITY_TYPE != Pump__B_UART__NONE_REVB) || \
1495:.\Generated_Source\PSoC5/Pump.c ****                                     (Pump_PARITY_TYPE_SW != 0u) )
1496:.\Generated_Source\PSoC5/Pump.c ****                     Pump_WriteControlRegister(Pump_ReadControlRegister() |
1497:.\Generated_Source\PSoC5/Pump.c ****                                                           Pump_CTRL_HD_SEND_BREAK);
1498:.\Generated_Source\PSoC5/Pump.c ****                 #endif /* End Pump_PARITY_TYPE != Pump__B_UART__NONE_REVB  */
1499:.\Generated_Source\PSoC5/Pump.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 48


1500:.\Generated_Source\PSoC5/Pump.c ****                 #if(Pump_TXCLKGEN_DP)
1501:.\Generated_Source\PSoC5/Pump.c ****                     txPeriod = Pump_TXBITCLKTX_COMPLETE_REG;
 1170              		.loc 1 1501 0 is_stmt 1
 1171 000c 104B     		ldr	r3, .L119+4
 1172 000e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1173 0010 0E4A     		ldr	r2, .L119
 1174 0012 1172     		strb	r1, [r2, #8]
1502:.\Generated_Source\PSoC5/Pump.c ****                     Pump_TXBITCLKTX_COMPLETE_REG = Pump_TXBITCTR_BREAKBITS;
 1175              		.loc 1 1502 0
 1176 0014 6722     		movs	r2, #103
 1177 0016 1A70     		strb	r2, [r3]
1503:.\Generated_Source\PSoC5/Pump.c ****                 #else
1504:.\Generated_Source\PSoC5/Pump.c ****                     txPeriod = Pump_TXBITCTR_PERIOD_REG;
1505:.\Generated_Source\PSoC5/Pump.c ****                     Pump_TXBITCTR_PERIOD_REG = Pump_TXBITCTR_BREAKBITS8X;
1506:.\Generated_Source\PSoC5/Pump.c ****                 #endif /* End Pump_TXCLKGEN_DP */
1507:.\Generated_Source\PSoC5/Pump.c **** 
1508:.\Generated_Source\PSoC5/Pump.c ****                 /* Send zeros */
1509:.\Generated_Source\PSoC5/Pump.c ****                 Pump_TXDATA_REG = 0u;
 1178              		.loc 1 1509 0
 1179 0018 0022     		movs	r2, #0
 1180 001a 1333     		adds	r3, r3, #19
 1181 001c 1A70     		strb	r2, [r3]
 1182              	.L116:
1510:.\Generated_Source\PSoC5/Pump.c **** 
1511:.\Generated_Source\PSoC5/Pump.c ****                 do /* Wait until transmit starts */
1512:.\Generated_Source\PSoC5/Pump.c ****                 {
1513:.\Generated_Source\PSoC5/Pump.c ****                     tmpStat = Pump_TXSTATUS_REG;
 1183              		.loc 1 1513 0 discriminator 1
 1184 001e 0D4B     		ldr	r3, .L119+8
 1185 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1186              	.LVL81:
1514:.\Generated_Source\PSoC5/Pump.c ****                 }
1515:.\Generated_Source\PSoC5/Pump.c ****                 while((tmpStat & Pump_TX_STS_FIFO_EMPTY) != 0u);
 1187              		.loc 1 1515 0 discriminator 1
 1188 0022 13F0020F 		tst	r3, #2
 1189 0026 FAD1     		bne	.L116
 1190              	.LVL82:
 1191              	.L115:
1516:.\Generated_Source\PSoC5/Pump.c ****             }
1517:.\Generated_Source\PSoC5/Pump.c **** 
1518:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_WAIT_FOR_COMPLETE_REINIT) ||
 1192              		.loc 1 1518 0
 1193 0028 0128     		cmp	r0, #1
 1194 002a 01D0     		beq	.L117
 1195              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1196 002c 0328     		cmp	r0, #3
 1197 002e 04D1     		bne	.L118
 1198              	.L117:
1519:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT) )
1520:.\Generated_Source\PSoC5/Pump.c ****             {
1521:.\Generated_Source\PSoC5/Pump.c ****                 do /* Wait until transmit complete */
1522:.\Generated_Source\PSoC5/Pump.c ****                 {
1523:.\Generated_Source\PSoC5/Pump.c ****                     tmpStat = Pump_TXSTATUS_REG;
 1199              		.loc 1 1523 0 is_stmt 1 discriminator 1
 1200 0030 084B     		ldr	r3, .L119+8
 1201 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1202              	.LVL83:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 49


1524:.\Generated_Source\PSoC5/Pump.c ****                 }
1525:.\Generated_Source\PSoC5/Pump.c ****                 while(((uint8)~tmpStat & Pump_TX_STS_COMPLETE) != 0u);
 1203              		.loc 1 1525 0 discriminator 1
 1204 0034 13F0010F 		tst	r3, #1
 1205 0038 FAD0     		beq	.L117
 1206              	.LVL84:
 1207              	.L118:
1526:.\Generated_Source\PSoC5/Pump.c ****             }
1527:.\Generated_Source\PSoC5/Pump.c **** 
1528:.\Generated_Source\PSoC5/Pump.c ****             if( (retMode == Pump_WAIT_FOR_COMPLETE_REINIT) ||
1529:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_REINIT) ||
 1208              		.loc 1 1529 0
 1209 003a 0138     		subs	r0, r0, #1
 1210              	.LVL85:
 1211 003c C0B2     		uxtb	r0, r0
1528:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_REINIT) ||
 1212              		.loc 1 1528 0
 1213 003e 0228     		cmp	r0, #2
 1214 0040 03D8     		bhi	.L112
1530:.\Generated_Source\PSoC5/Pump.c ****                 (retMode == Pump_SEND_WAIT_REINIT) )
1531:.\Generated_Source\PSoC5/Pump.c ****             {
1532:.\Generated_Source\PSoC5/Pump.c **** 
1533:.\Generated_Source\PSoC5/Pump.c ****             #if(Pump_TXCLKGEN_DP)
1534:.\Generated_Source\PSoC5/Pump.c ****                 Pump_TXBITCLKTX_COMPLETE_REG = txPeriod;
 1215              		.loc 1 1534 0
 1216 0042 024B     		ldr	r3, .L119
 1217 0044 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 1218 0046 024B     		ldr	r3, .L119+4
 1219 0048 1A70     		strb	r2, [r3]
 1220              	.L112:
 1221 004a 7047     		bx	lr
 1222              	.L120:
 1223              		.align	2
 1224              	.L119:
 1225 004c 00000000 		.word	.LANCHOR0
 1226 0050 35650040 		.word	1073767733
 1227 0054 69650040 		.word	1073767785
 1228              	.LBE2:
 1229              		.cfi_endproc
 1230              	.LFE25:
 1231              		.size	Pump_SendBreak, .-Pump_SendBreak
 1232              		.section	.text.Pump_SetTxAddressMode,"ax",%progbits
 1233              		.align	2
 1234              		.global	Pump_SetTxAddressMode
 1235              		.thumb
 1236              		.thumb_func
 1237              		.type	Pump_SetTxAddressMode, %function
 1238              	Pump_SetTxAddressMode:
 1239              	.LFB26:
1535:.\Generated_Source\PSoC5/Pump.c ****             #else
1536:.\Generated_Source\PSoC5/Pump.c ****                 Pump_TXBITCTR_PERIOD_REG = txPeriod;
1537:.\Generated_Source\PSoC5/Pump.c ****             #endif /* End Pump_TXCLKGEN_DP */
1538:.\Generated_Source\PSoC5/Pump.c **** 
1539:.\Generated_Source\PSoC5/Pump.c ****             #if( (Pump_PARITY_TYPE != Pump__B_UART__NONE_REVB) || \
1540:.\Generated_Source\PSoC5/Pump.c ****                  (Pump_PARITY_TYPE_SW != 0u) )
1541:.\Generated_Source\PSoC5/Pump.c ****                 Pump_WriteControlRegister(Pump_ReadControlRegister() &
1542:.\Generated_Source\PSoC5/Pump.c ****                                                       (uint8) ~Pump_CTRL_HD_SEND_BREAK);
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 50


1543:.\Generated_Source\PSoC5/Pump.c ****             #endif /* End Pump_PARITY_TYPE != NONE */
1544:.\Generated_Source\PSoC5/Pump.c ****             }
1545:.\Generated_Source\PSoC5/Pump.c ****         #endif    /* End Pump_HD_ENABLED */
1546:.\Generated_Source\PSoC5/Pump.c ****         }
1547:.\Generated_Source\PSoC5/Pump.c ****     }
1548:.\Generated_Source\PSoC5/Pump.c **** 
1549:.\Generated_Source\PSoC5/Pump.c **** 
1550:.\Generated_Source\PSoC5/Pump.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC5/Pump.c ****     * Function Name: Pump_SetTxAddressMode
1552:.\Generated_Source\PSoC5/Pump.c ****     ********************************************************************************
1553:.\Generated_Source\PSoC5/Pump.c ****     *
1554:.\Generated_Source\PSoC5/Pump.c ****     * Summary:
1555:.\Generated_Source\PSoC5/Pump.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:.\Generated_Source\PSoC5/Pump.c ****     *
1557:.\Generated_Source\PSoC5/Pump.c ****     * Parameters:
1558:.\Generated_Source\PSoC5/Pump.c ****     *  addressMode: 
1559:.\Generated_Source\PSoC5/Pump.c ****     *       Pump_SET_SPACE - Configure the transmitter to send the next
1560:.\Generated_Source\PSoC5/Pump.c ****     *                                    byte as a data.
1561:.\Generated_Source\PSoC5/Pump.c ****     *       Pump_SET_MARK  - Configure the transmitter to send the next
1562:.\Generated_Source\PSoC5/Pump.c ****     *                                    byte as an address.
1563:.\Generated_Source\PSoC5/Pump.c ****     *
1564:.\Generated_Source\PSoC5/Pump.c ****     * Return:
1565:.\Generated_Source\PSoC5/Pump.c ****     *  None.
1566:.\Generated_Source\PSoC5/Pump.c ****     *
1567:.\Generated_Source\PSoC5/Pump.c ****     * Side Effects:
1568:.\Generated_Source\PSoC5/Pump.c ****     *  This function sets and clears Pump_CTRL_MARK bit in the Control
1569:.\Generated_Source\PSoC5/Pump.c ****     *  register.
1570:.\Generated_Source\PSoC5/Pump.c ****     *
1571:.\Generated_Source\PSoC5/Pump.c ****     *******************************************************************************/
1572:.\Generated_Source\PSoC5/Pump.c ****     void Pump_SetTxAddressMode(uint8 addressMode) 
1573:.\Generated_Source\PSoC5/Pump.c ****     {
 1240              		.loc 1 1573 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244              		@ link register save eliminated.
 1245              	.LVL86:
 1246 0000 7047     		bx	lr
 1247              		.cfi_endproc
 1248              	.LFE26:
 1249              		.size	Pump_SetTxAddressMode, .-Pump_SetTxAddressMode
 1250              		.global	Pump_rxBufferOverflow
 1251              		.global	Pump_rxBufferLoopDetect
 1252              		.global	Pump_rxBufferWrite
 1253              		.global	Pump_rxBufferRead
 1254              		.comm	Pump_rxBuffer,256,4
 1255              		.global	Pump_errorStatus
 1256              		.global	Pump_initVar
 1257 0002 00BF     		.bss
 1258              		.align	1
 1259              		.set	.LANCHOR0,. + 0
 1260              		.type	Pump_errorStatus, %object
 1261              		.size	Pump_errorStatus, 1
 1262              	Pump_errorStatus:
 1263 0000 00       		.space	1
 1264              		.type	Pump_initVar, %object
 1265              		.size	Pump_initVar, 1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 51


 1266              	Pump_initVar:
 1267 0001 00       		.space	1
 1268              		.type	Pump_rxBufferRead, %object
 1269              		.size	Pump_rxBufferRead, 2
 1270              	Pump_rxBufferRead:
 1271 0002 0000     		.space	2
 1272              		.type	Pump_rxBufferWrite, %object
 1273              		.size	Pump_rxBufferWrite, 2
 1274              	Pump_rxBufferWrite:
 1275 0004 0000     		.space	2
 1276              		.type	Pump_rxBufferLoopDetect, %object
 1277              		.size	Pump_rxBufferLoopDetect, 1
 1278              	Pump_rxBufferLoopDetect:
 1279 0006 00       		.space	1
 1280              		.type	Pump_rxBufferOverflow, %object
 1281              		.size	Pump_rxBufferOverflow, 1
 1282              	Pump_rxBufferOverflow:
 1283 0007 00       		.space	1
 1284              		.type	txPeriod.4985, %object
 1285              		.size	txPeriod.4985, 1
 1286              	txPeriod.4985:
 1287 0008 00       		.space	1
 1288 0009 00       		.text
 1289              	.Letext0:
 1290              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1291              		.file 3 ".\\Generated_Source\\PSoC5\\CyLib.h"
 1292              		.section	.debug_info,"",%progbits
 1293              	.Ldebug_info0:
 1294 0000 20070000 		.4byte	0x720
 1295 0004 0400     		.2byte	0x4
 1296 0006 00000000 		.4byte	.Ldebug_abbrev0
 1297 000a 04       		.byte	0x4
 1298 000b 01       		.uleb128 0x1
 1299 000c 6B040000 		.4byte	.LASF73
 1300 0010 01       		.byte	0x1
 1301 0011 86020000 		.4byte	.LASF74
 1302 0015 09020000 		.4byte	.LASF75
 1303 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1304 001d 00000000 		.4byte	0
 1305 0021 00000000 		.4byte	.Ldebug_line0
 1306 0025 02       		.uleb128 0x2
 1307 0026 01       		.byte	0x1
 1308 0027 06       		.byte	0x6
 1309 0028 98000000 		.4byte	.LASF0
 1310 002c 02       		.uleb128 0x2
 1311 002d 01       		.byte	0x1
 1312 002e 08       		.byte	0x8
 1313 002f 5E030000 		.4byte	.LASF1
 1314 0033 02       		.uleb128 0x2
 1315 0034 02       		.byte	0x2
 1316 0035 05       		.byte	0x5
 1317 0036 6C030000 		.4byte	.LASF2
 1318 003a 02       		.uleb128 0x2
 1319 003b 02       		.byte	0x2
 1320 003c 07       		.byte	0x7
 1321 003d C6010000 		.4byte	.LASF3
 1322 0041 02       		.uleb128 0x2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 52


 1323 0042 04       		.byte	0x4
 1324 0043 05       		.byte	0x5
 1325 0044 E7000000 		.4byte	.LASF4
 1326 0048 02       		.uleb128 0x2
 1327 0049 04       		.byte	0x4
 1328 004a 07       		.byte	0x7
 1329 004b 86010000 		.4byte	.LASF5
 1330 004f 02       		.uleb128 0x2
 1331 0050 08       		.byte	0x8
 1332 0051 05       		.byte	0x5
 1333 0052 8A000000 		.4byte	.LASF6
 1334 0056 02       		.uleb128 0x2
 1335 0057 08       		.byte	0x8
 1336 0058 07       		.byte	0x7
 1337 0059 3D000000 		.4byte	.LASF7
 1338 005d 03       		.uleb128 0x3
 1339 005e 04       		.byte	0x4
 1340 005f 05       		.byte	0x5
 1341 0060 696E7400 		.ascii	"int\000"
 1342 0064 02       		.uleb128 0x2
 1343 0065 04       		.byte	0x4
 1344 0066 07       		.byte	0x7
 1345 0067 6A010000 		.4byte	.LASF8
 1346 006b 04       		.uleb128 0x4
 1347 006c 01010000 		.4byte	.LASF9
 1348 0070 02       		.byte	0x2
 1349 0071 3801     		.2byte	0x138
 1350 0073 2C000000 		.4byte	0x2c
 1351 0077 04       		.uleb128 0x4
 1352 0078 00000000 		.4byte	.LASF10
 1353 007c 02       		.byte	0x2
 1354 007d 3901     		.2byte	0x139
 1355 007f 3A000000 		.4byte	0x3a
 1356 0083 04       		.uleb128 0x4
 1357 0084 3D010000 		.4byte	.LASF11
 1358 0088 02       		.byte	0x2
 1359 0089 3A01     		.2byte	0x13a
 1360 008b 48000000 		.4byte	0x48
 1361 008f 02       		.uleb128 0x2
 1362 0090 04       		.byte	0x4
 1363 0091 04       		.byte	0x4
 1364 0092 18030000 		.4byte	.LASF12
 1365 0096 02       		.uleb128 0x2
 1366 0097 08       		.byte	0x8
 1367 0098 04       		.byte	0x4
 1368 0099 07010000 		.4byte	.LASF13
 1369 009d 04       		.uleb128 0x4
 1370 009e D6030000 		.4byte	.LASF14
 1371 00a2 02       		.byte	0x2
 1372 00a3 4901     		.2byte	0x149
 1373 00a5 A9000000 		.4byte	0xa9
 1374 00a9 02       		.uleb128 0x2
 1375 00aa 01       		.byte	0x1
 1376 00ab 08       		.byte	0x8
 1377 00ac C4030000 		.4byte	.LASF15
 1378 00b0 04       		.uleb128 0x4
 1379 00b1 59030000 		.4byte	.LASF16
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 53


 1380 00b5 02       		.byte	0x2
 1381 00b6 E201     		.2byte	0x1e2
 1382 00b8 BC000000 		.4byte	0xbc
 1383 00bc 05       		.uleb128 0x5
 1384 00bd 6B000000 		.4byte	0x6b
 1385 00c1 05       		.uleb128 0x5
 1386 00c2 77000000 		.4byte	0x77
 1387 00c6 04       		.uleb128 0x4
 1388 00c7 A6020000 		.4byte	.LASF17
 1389 00cb 02       		.byte	0x2
 1390 00cc E401     		.2byte	0x1e4
 1391 00ce D2000000 		.4byte	0xd2
 1392 00d2 05       		.uleb128 0x5
 1393 00d3 83000000 		.4byte	0x83
 1394 00d7 04       		.uleb128 0x4
 1395 00d8 C9030000 		.4byte	.LASF18
 1396 00dc 02       		.byte	0x2
 1397 00dd F401     		.2byte	0x1f4
 1398 00df E3000000 		.4byte	0xe3
 1399 00e3 06       		.uleb128 0x6
 1400 00e4 04       		.byte	0x4
 1401 00e5 E9000000 		.4byte	0xe9
 1402 00e9 07       		.uleb128 0x7
 1403 00ea 02       		.uleb128 0x2
 1404 00eb 04       		.byte	0x4
 1405 00ec 07       		.byte	0x7
 1406 00ed C1020000 		.4byte	.LASF19
 1407 00f1 08       		.uleb128 0x8
 1408 00f2 1A050000 		.4byte	.LASF20
 1409 00f6 01       		.byte	0x1
 1410 00f7 6A       		.byte	0x6a
 1411 00f8 00000000 		.4byte	.LFB1
 1412 00fc 44000000 		.4byte	.LFE1-.LFB1
 1413 0100 01       		.uleb128 0x1
 1414 0101 9C       		.byte	0x9c
 1415 0102 2E010000 		.4byte	0x12e
 1416 0106 09       		.uleb128 0x9
 1417 0107 0A000000 		.4byte	.LVL0
 1418 010b DB060000 		.4byte	0x6db
 1419 010f 19010000 		.4byte	0x119
 1420 0113 0A       		.uleb128 0xa
 1421 0114 01       		.uleb128 0x1
 1422 0115 50       		.byte	0x50
 1423 0116 01       		.uleb128 0x1
 1424 0117 32       		.byte	0x32
 1425 0118 00       		.byte	0
 1426 0119 0B       		.uleb128 0xb
 1427 011a 12000000 		.4byte	.LVL1
 1428 011e F5060000 		.4byte	0x6f5
 1429 0122 0A       		.uleb128 0xa
 1430 0123 01       		.uleb128 0x1
 1431 0124 51       		.byte	0x51
 1432 0125 01       		.uleb128 0x1
 1433 0126 37       		.byte	0x37
 1434 0127 0A       		.uleb128 0xa
 1435 0128 01       		.uleb128 0x1
 1436 0129 50       		.byte	0x50
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 54


 1437 012a 01       		.uleb128 0x1
 1438 012b 32       		.byte	0x32
 1439 012c 00       		.byte	0
 1440 012d 00       		.byte	0
 1441 012e 08       		.uleb128 0x8
 1442 012f F2030000 		.4byte	.LASF21
 1443 0133 01       		.byte	0x1
 1444 0134 B7       		.byte	0xb7
 1445 0135 00000000 		.4byte	.LFB2
 1446 0139 3C000000 		.4byte	.LFE2-.LFB2
 1447 013d 01       		.uleb128 0x1
 1448 013e 9C       		.byte	0x9c
 1449 013f 65010000 		.4byte	0x165
 1450 0143 0C       		.uleb128 0xc
 1451 0144 40040000 		.4byte	.LASF24
 1452 0148 01       		.byte	0x1
 1453 0149 B9       		.byte	0xb9
 1454 014a 6B000000 		.4byte	0x6b
 1455 014e 00000000 		.4byte	.LLST0
 1456 0152 0D       		.uleb128 0xd
 1457 0153 06000000 		.4byte	.LVL2
 1458 0157 0B070000 		.4byte	0x70b
 1459 015b 0D       		.uleb128 0xd
 1460 015c 2E000000 		.4byte	.LVL3
 1461 0160 16070000 		.4byte	0x716
 1462 0164 00       		.byte	0
 1463 0165 08       		.uleb128 0x8
 1464 0166 1E030000 		.4byte	.LASF22
 1465 016a 01       		.byte	0x1
 1466 016b 4C       		.byte	0x4c
 1467 016c 00000000 		.4byte	.LFB0
 1468 0170 1C000000 		.4byte	.LFE0-.LFB0
 1469 0174 01       		.uleb128 0x1
 1470 0175 9C       		.byte	0x9c
 1471 0176 8D010000 		.4byte	0x18d
 1472 017a 0D       		.uleb128 0xd
 1473 017b 0C000000 		.4byte	.LVL4
 1474 017f F1000000 		.4byte	0xf1
 1475 0183 0D       		.uleb128 0xd
 1476 0184 16000000 		.4byte	.LVL5
 1477 0188 2E010000 		.4byte	0x12e
 1478 018c 00       		.byte	0
 1479 018d 08       		.uleb128 0x8
 1480 018e F3020000 		.4byte	.LASF23
 1481 0192 01       		.byte	0x1
 1482 0193 F0       		.byte	0xf0
 1483 0194 00000000 		.4byte	.LFB3
 1484 0198 3C000000 		.4byte	.LFE3-.LFB3
 1485 019c 01       		.uleb128 0x1
 1486 019d 9C       		.byte	0x9c
 1487 019e C4010000 		.4byte	0x1c4
 1488 01a2 0C       		.uleb128 0xc
 1489 01a3 40040000 		.4byte	.LASF24
 1490 01a7 01       		.byte	0x1
 1491 01a8 F2       		.byte	0xf2
 1492 01a9 6B000000 		.4byte	0x6b
 1493 01ad 13000000 		.4byte	.LLST1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 55


 1494 01b1 0D       		.uleb128 0xd
 1495 01b2 06000000 		.4byte	.LVL6
 1496 01b6 0B070000 		.4byte	0x70b
 1497 01ba 0D       		.uleb128 0xd
 1498 01bb 2E000000 		.4byte	.LVL7
 1499 01bf 16070000 		.4byte	0x716
 1500 01c3 00       		.byte	0
 1501 01c4 0E       		.uleb128 0xe
 1502 01c5 76030000 		.4byte	.LASF50
 1503 01c9 01       		.byte	0x1
 1504 01ca 2701     		.2byte	0x127
 1505 01cc 6B000000 		.4byte	0x6b
 1506 01d0 00000000 		.4byte	.LFB4
 1507 01d4 04000000 		.4byte	.LFE4-.LFB4
 1508 01d8 01       		.uleb128 0x1
 1509 01d9 9C       		.byte	0x9c
 1510 01da 0F       		.uleb128 0xf
 1511 01db FE030000 		.4byte	.LASF25
 1512 01df 01       		.byte	0x1
 1513 01e0 3F01     		.2byte	0x13f
 1514 01e2 00000000 		.4byte	.LFB5
 1515 01e6 02000000 		.4byte	.LFE5-.LFB5
 1516 01ea 01       		.uleb128 0x1
 1517 01eb 9C       		.byte	0x9c
 1518 01ec FF010000 		.4byte	0x1ff
 1519 01f0 10       		.uleb128 0x10
 1520 01f1 44010000 		.4byte	.LASF27
 1521 01f5 01       		.byte	0x1
 1522 01f6 3F01     		.2byte	0x13f
 1523 01f8 6B000000 		.4byte	0x6b
 1524 01fc 01       		.uleb128 0x1
 1525 01fd 50       		.byte	0x50
 1526 01fe 00       		.byte	0
 1527 01ff 0F       		.uleb128 0xf
 1528 0200 18040000 		.4byte	.LASF26
 1529 0204 01       		.byte	0x1
 1530 0205 6701     		.2byte	0x167
 1531 0207 00000000 		.4byte	.LFB6
 1532 020b 0C000000 		.4byte	.LFE6-.LFB6
 1533 020f 01       		.uleb128 0x1
 1534 0210 9C       		.byte	0x9c
 1535 0211 24020000 		.4byte	0x224
 1536 0215 10       		.uleb128 0x10
 1537 0216 F1010000 		.4byte	.LASF28
 1538 021a 01       		.byte	0x1
 1539 021b 6701     		.2byte	0x167
 1540 021d 6B000000 		.4byte	0x6b
 1541 0221 01       		.uleb128 0x1
 1542 0222 50       		.byte	0x50
 1543 0223 00       		.byte	0
 1544 0224 11       		.uleb128 0x11
 1545 0225 1A010000 		.4byte	.LASF32
 1546 0229 01       		.byte	0x1
 1547 022a 8801     		.2byte	0x188
 1548 022c 6B000000 		.4byte	0x6b
 1549 0230 00000000 		.4byte	.LFB7
 1550 0234 64000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 56


 1551 0238 01       		.uleb128 0x1
 1552 0239 9C       		.byte	0x9c
 1553 023a 6D020000 		.4byte	0x26d
 1554 023e 12       		.uleb128 0x12
 1555 023f A8030000 		.4byte	.LASF29
 1556 0243 01       		.byte	0x1
 1557 0244 8A01     		.2byte	0x18a
 1558 0246 6B000000 		.4byte	0x6b
 1559 024a 26000000 		.4byte	.LLST2
 1560 024e 12       		.uleb128 0x12
 1561 024f 30040000 		.4byte	.LASF30
 1562 0253 01       		.byte	0x1
 1563 0254 8E01     		.2byte	0x18e
 1564 0256 77000000 		.4byte	0x77
 1565 025a 44000000 		.4byte	.LLST3
 1566 025e 13       		.uleb128 0x13
 1567 025f 4F020000 		.4byte	.LASF31
 1568 0263 01       		.byte	0x1
 1569 0264 8F01     		.2byte	0x18f
 1570 0266 77000000 		.4byte	0x77
 1571 026a 01       		.uleb128 0x1
 1572 026b 51       		.byte	0x51
 1573 026c 00       		.byte	0
 1574 026d 11       		.uleb128 0x11
 1575 026e F9040000 		.4byte	.LASF33
 1576 0272 01       		.byte	0x1
 1577 0273 E501     		.2byte	0x1e5
 1578 0275 6B000000 		.4byte	0x6b
 1579 0279 00000000 		.4byte	.LFB8
 1580 027d 28000000 		.4byte	.LFE8-.LFB8
 1581 0281 01       		.uleb128 0x1
 1582 0282 9C       		.byte	0x9c
 1583 0283 96020000 		.4byte	0x296
 1584 0287 13       		.uleb128 0x13
 1585 0288 64040000 		.4byte	.LASF34
 1586 028c 01       		.byte	0x1
 1587 028d E701     		.2byte	0x1e7
 1588 028f 6B000000 		.4byte	0x6b
 1589 0293 01       		.uleb128 0x1
 1590 0294 50       		.byte	0x50
 1591 0295 00       		.byte	0
 1592 0296 11       		.uleb128 0x11
 1593 0297 54000000 		.4byte	.LASF35
 1594 029b 01       		.byte	0x1
 1595 029c 1402     		.2byte	0x214
 1596 029e 6B000000 		.4byte	0x6b
 1597 02a2 00000000 		.4byte	.LFB9
 1598 02a6 80000000 		.4byte	.LFE9-.LFB9
 1599 02aa 01       		.uleb128 0x1
 1600 02ab 9C       		.byte	0x9c
 1601 02ac EF020000 		.4byte	0x2ef
 1602 02b0 12       		.uleb128 0x12
 1603 02b1 A8030000 		.4byte	.LASF29
 1604 02b5 01       		.byte	0x1
 1605 02b6 1602     		.2byte	0x216
 1606 02b8 6B000000 		.4byte	0x6b
 1607 02bc 89000000 		.4byte	.LLST4
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 57


 1608 02c0 12       		.uleb128 0x12
 1609 02c1 FD020000 		.4byte	.LASF36
 1610 02c5 01       		.byte	0x1
 1611 02c6 1702     		.2byte	0x217
 1612 02c8 6B000000 		.4byte	0x6b
 1613 02cc D6000000 		.4byte	.LLST5
 1614 02d0 12       		.uleb128 0x12
 1615 02d1 30040000 		.4byte	.LASF30
 1616 02d5 01       		.byte	0x1
 1617 02d6 1A02     		.2byte	0x21a
 1618 02d8 77000000 		.4byte	0x77
 1619 02dc E9000000 		.4byte	.LLST6
 1620 02e0 13       		.uleb128 0x13
 1621 02e1 4F020000 		.4byte	.LASF31
 1622 02e5 01       		.byte	0x1
 1623 02e6 1B02     		.2byte	0x21b
 1624 02e8 77000000 		.4byte	0x77
 1625 02ec 01       		.uleb128 0x1
 1626 02ed 51       		.byte	0x51
 1627 02ee 00       		.byte	0
 1628 02ef 11       		.uleb128 0x11
 1629 02f0 3F030000 		.4byte	.LASF37
 1630 02f4 01       		.byte	0x1
 1631 02f5 7A02     		.2byte	0x27a
 1632 02f7 77000000 		.4byte	0x77
 1633 02fb 00000000 		.4byte	.LFB10
 1634 02ff 2C000000 		.4byte	.LFE10-.LFB10
 1635 0303 01       		.uleb128 0x1
 1636 0304 9C       		.byte	0x9c
 1637 0305 23030000 		.4byte	0x323
 1638 0309 12       		.uleb128 0x12
 1639 030a 77010000 		.4byte	.LASF38
 1640 030e 01       		.byte	0x1
 1641 030f 7E02     		.2byte	0x27e
 1642 0311 77000000 		.4byte	0x77
 1643 0315 2E010000 		.4byte	.LLST7
 1644 0319 0D       		.uleb128 0xd
 1645 031a 1A000000 		.4byte	.LVL41
 1646 031e 24020000 		.4byte	0x224
 1647 0322 00       		.byte	0
 1648 0323 11       		.uleb128 0x11
 1649 0324 AF030000 		.4byte	.LASF39
 1650 0328 01       		.byte	0x1
 1651 0329 AB02     		.2byte	0x2ab
 1652 032b 77000000 		.4byte	0x77
 1653 032f 00000000 		.4byte	.LFB11
 1654 0333 68000000 		.4byte	.LFE11-.LFB11
 1655 0337 01       		.uleb128 0x1
 1656 0338 9C       		.byte	0x9c
 1657 0339 4E030000 		.4byte	0x34e
 1658 033d 12       		.uleb128 0x12
 1659 033e C1010000 		.4byte	.LASF40
 1660 0342 01       		.byte	0x1
 1661 0343 AE02     		.2byte	0x2ae
 1662 0345 77000000 		.4byte	0x77
 1663 0349 41010000 		.4byte	.LLST8
 1664 034d 00       		.byte	0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 58


 1665 034e 0F       		.uleb128 0xf
 1666 034f E0020000 		.4byte	.LASF41
 1667 0353 01       		.byte	0x1
 1668 0354 F502     		.2byte	0x2f5
 1669 0356 00000000 		.4byte	.LFB12
 1670 035a 44000000 		.4byte	.LFE12-.LFB12
 1671 035e 01       		.uleb128 0x1
 1672 035f 9C       		.byte	0x9c
 1673 0360 87030000 		.4byte	0x387
 1674 0364 12       		.uleb128 0x12
 1675 0365 40040000 		.4byte	.LASF24
 1676 0369 01       		.byte	0x1
 1677 036a F702     		.2byte	0x2f7
 1678 036c 6B000000 		.4byte	0x6b
 1679 0370 6A010000 		.4byte	.LLST9
 1680 0374 0D       		.uleb128 0xd
 1681 0375 06000000 		.4byte	.LVL47
 1682 0379 0B070000 		.4byte	0x70b
 1683 037d 0D       		.uleb128 0xd
 1684 037e 1C000000 		.4byte	.LVL48
 1685 0382 16070000 		.4byte	0x716
 1686 0386 00       		.byte	0
 1687 0387 0F       		.uleb128 0xf
 1688 0388 DC030000 		.4byte	.LASF42
 1689 038c 01       		.byte	0x1
 1690 038d 2D03     		.2byte	0x32d
 1691 038f 00000000 		.4byte	.LFB13
 1692 0393 02000000 		.4byte	.LFE13-.LFB13
 1693 0397 01       		.uleb128 0x1
 1694 0398 9C       		.byte	0x9c
 1695 0399 AC030000 		.4byte	0x3ac
 1696 039d 10       		.uleb128 0x10
 1697 039e 0E010000 		.4byte	.LASF43
 1698 03a2 01       		.byte	0x1
 1699 03a3 2D03     		.2byte	0x32d
 1700 03a5 6B000000 		.4byte	0x6b
 1701 03a9 01       		.uleb128 0x1
 1702 03aa 50       		.byte	0x50
 1703 03ab 00       		.byte	0
 1704 03ac 0F       		.uleb128 0xf
 1705 03ad 60020000 		.4byte	.LASF44
 1706 03b1 01       		.byte	0x1
 1707 03b2 5903     		.2byte	0x359
 1708 03b4 00000000 		.4byte	.LFB14
 1709 03b8 0C000000 		.4byte	.LFE14-.LFB14
 1710 03bc 01       		.uleb128 0x1
 1711 03bd 9C       		.byte	0x9c
 1712 03be D1030000 		.4byte	0x3d1
 1713 03c2 10       		.uleb128 0x10
 1714 03c3 D8020000 		.4byte	.LASF45
 1715 03c7 01       		.byte	0x1
 1716 03c8 5903     		.2byte	0x359
 1717 03ca 6B000000 		.4byte	0x6b
 1718 03ce 01       		.uleb128 0x1
 1719 03cf 50       		.byte	0x50
 1720 03d0 00       		.byte	0
 1721 03d1 0F       		.uleb128 0xf
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 59


 1722 03d2 73020000 		.4byte	.LASF46
 1723 03d6 01       		.byte	0x1
 1724 03d7 6D03     		.2byte	0x36d
 1725 03d9 00000000 		.4byte	.LFB15
 1726 03dd 0C000000 		.4byte	.LFE15-.LFB15
 1727 03e1 01       		.uleb128 0x1
 1728 03e2 9C       		.byte	0x9c
 1729 03e3 F6030000 		.4byte	0x3f6
 1730 03e7 10       		.uleb128 0x10
 1731 03e8 D8020000 		.4byte	.LASF45
 1732 03ec 01       		.byte	0x1
 1733 03ed 6D03     		.2byte	0x36d
 1734 03ef 6B000000 		.4byte	0x6b
 1735 03f3 01       		.uleb128 0x1
 1736 03f4 50       		.byte	0x50
 1737 03f5 00       		.byte	0
 1738 03f6 0F       		.uleb128 0xf
 1739 03f7 A4000000 		.4byte	.LASF47
 1740 03fb 01       		.byte	0x1
 1741 03fc 8C03     		.2byte	0x38c
 1742 03fe 00000000 		.4byte	.LFB16
 1743 0402 0C000000 		.4byte	.LFE16-.LFB16
 1744 0406 01       		.uleb128 0x1
 1745 0407 9C       		.byte	0x9c
 1746 0408 1B040000 		.4byte	0x41b
 1747 040c 10       		.uleb128 0x10
 1748 040d F1010000 		.4byte	.LASF28
 1749 0411 01       		.byte	0x1
 1750 0412 8C03     		.2byte	0x38c
 1751 0414 6B000000 		.4byte	0x6b
 1752 0418 01       		.uleb128 0x1
 1753 0419 50       		.byte	0x50
 1754 041a 00       		.byte	0
 1755 041b 0F       		.uleb128 0xf
 1756 041c F0000000 		.4byte	.LASF48
 1757 0420 01       		.byte	0x1
 1758 0421 AE03     		.2byte	0x3ae
 1759 0423 00000000 		.4byte	.LFB17
 1760 0427 14000000 		.4byte	.LFE17-.LFB17
 1761 042b 01       		.uleb128 0x1
 1762 042c 9C       		.byte	0x9c
 1763 042d 40040000 		.4byte	0x440
 1764 0431 10       		.uleb128 0x10
 1765 0432 1D000000 		.4byte	.LASF49
 1766 0436 01       		.byte	0x1
 1767 0437 AE03     		.2byte	0x3ae
 1768 0439 6B000000 		.4byte	0x6b
 1769 043d 01       		.uleb128 0x1
 1770 043e 50       		.byte	0x50
 1771 043f 00       		.byte	0
 1772 0440 0E       		.uleb128 0xe
 1773 0441 98010000 		.4byte	.LASF51
 1774 0445 01       		.byte	0x1
 1775 0446 EB03     		.2byte	0x3eb
 1776 0448 6B000000 		.4byte	0x6b
 1777 044c 00000000 		.4byte	.LFB18
 1778 0450 0C000000 		.4byte	.LFE18-.LFB18
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 60


 1779 0454 01       		.uleb128 0x1
 1780 0455 9C       		.byte	0x9c
 1781 0456 0F       		.uleb128 0xf
 1782 0457 B4020000 		.4byte	.LASF52
 1783 045b 01       		.byte	0x1
 1784 045c 1104     		.2byte	0x411
 1785 045e 00000000 		.4byte	.LFB19
 1786 0462 18000000 		.4byte	.LFE19-.LFB19
 1787 0466 01       		.uleb128 0x1
 1788 0467 9C       		.byte	0x9c
 1789 0468 7B040000 		.4byte	0x47b
 1790 046c 10       		.uleb128 0x10
 1791 046d 1D000000 		.4byte	.LASF49
 1792 0471 01       		.byte	0x1
 1793 0472 1104     		.2byte	0x411
 1794 0474 6B000000 		.4byte	0x6b
 1795 0478 01       		.uleb128 0x1
 1796 0479 50       		.byte	0x50
 1797 047a 00       		.byte	0
 1798 047b 0F       		.uleb128 0xf
 1799 047c 0B050000 		.4byte	.LASF53
 1800 0480 01       		.byte	0x1
 1801 0481 7904     		.2byte	0x479
 1802 0483 00000000 		.4byte	.LFB20
 1803 0487 24000000 		.4byte	.LFE20-.LFB20
 1804 048b 01       		.uleb128 0x1
 1805 048c 9C       		.byte	0x9c
 1806 048d BB040000 		.4byte	0x4bb
 1807 0491 14       		.uleb128 0x14
 1808 0492 36000000 		.4byte	.LASF54
 1809 0496 01       		.byte	0x1
 1810 0497 7904     		.2byte	0x479
 1811 0499 BB040000 		.4byte	0x4bb
 1812 049d 7D010000 		.4byte	.LLST10
 1813 04a1 12       		.uleb128 0x12
 1814 04a2 E8010000 		.4byte	.LASF55
 1815 04a6 01       		.byte	0x1
 1816 04a7 7B04     		.2byte	0x47b
 1817 04a9 77000000 		.4byte	0x77
 1818 04ad BF010000 		.4byte	.LLST11
 1819 04b1 0D       		.uleb128 0xd
 1820 04b2 0E000000 		.4byte	.LVL58
 1821 04b6 56040000 		.4byte	0x456
 1822 04ba 00       		.byte	0
 1823 04bb 06       		.uleb128 0x6
 1824 04bc 04       		.byte	0x4
 1825 04bd C1040000 		.4byte	0x4c1
 1826 04c1 15       		.uleb128 0x15
 1827 04c2 9D000000 		.4byte	0x9d
 1828 04c6 0F       		.uleb128 0xf
 1829 04c7 CA020000 		.4byte	.LASF56
 1830 04cb 01       		.byte	0x1
 1831 04cc A704     		.2byte	0x4a7
 1832 04ce 00000000 		.4byte	.LFB21
 1833 04d2 28000000 		.4byte	.LFE21-.LFB21
 1834 04d6 01       		.uleb128 0x1
 1835 04d7 9C       		.byte	0x9c
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 61


 1836 04d8 16050000 		.4byte	0x516
 1837 04dc 14       		.uleb128 0x14
 1838 04dd 36000000 		.4byte	.LASF54
 1839 04e1 01       		.byte	0x1
 1840 04e2 A704     		.2byte	0x4a7
 1841 04e4 16050000 		.4byte	0x516
 1842 04e8 00020000 		.4byte	.LLST12
 1843 04ec 14       		.uleb128 0x14
 1844 04ed 9E030000 		.4byte	.LASF57
 1845 04f1 01       		.byte	0x1
 1846 04f2 A704     		.2byte	0x4a7
 1847 04f4 6B000000 		.4byte	0x6b
 1848 04f8 42020000 		.4byte	.LLST13
 1849 04fc 12       		.uleb128 0x12
 1850 04fd E8010000 		.4byte	.LASF55
 1851 0501 01       		.byte	0x1
 1852 0502 AA04     		.2byte	0x4aa
 1853 0504 6B000000 		.4byte	0x6b
 1854 0508 7C020000 		.4byte	.LLST14
 1855 050c 0D       		.uleb128 0xd
 1856 050d 0E000000 		.4byte	.LVL66
 1857 0511 56040000 		.4byte	0x456
 1858 0515 00       		.byte	0
 1859 0516 06       		.uleb128 0x6
 1860 0517 04       		.byte	0x4
 1861 0518 1C050000 		.4byte	0x51c
 1862 051c 15       		.uleb128 0x15
 1863 051d 6B000000 		.4byte	0x6b
 1864 0521 0F       		.uleb128 0xf
 1865 0522 4C030000 		.4byte	.LASF58
 1866 0526 01       		.byte	0x1
 1867 0527 CE04     		.2byte	0x4ce
 1868 0529 00000000 		.4byte	.LFB22
 1869 052d 20000000 		.4byte	.LFE22-.LFB22
 1870 0531 01       		.uleb128 0x1
 1871 0532 9C       		.byte	0x9c
 1872 0533 73050000 		.4byte	0x573
 1873 0537 14       		.uleb128 0x14
 1874 0538 1D000000 		.4byte	.LASF49
 1875 053c 01       		.byte	0x1
 1876 053d CE04     		.2byte	0x4ce
 1877 053f 6B000000 		.4byte	0x6b
 1878 0543 BD020000 		.4byte	.LLST15
 1879 0547 0D       		.uleb128 0xd
 1880 0548 0C000000 		.4byte	.LVL73
 1881 054c 56040000 		.4byte	0x456
 1882 0550 09       		.uleb128 0x9
 1883 0551 12000000 		.4byte	.LVL74
 1884 0555 56040000 		.4byte	0x456
 1885 0559 63050000 		.4byte	0x563
 1886 055d 0A       		.uleb128 0xa
 1887 055e 01       		.uleb128 0x1
 1888 055f 50       		.byte	0x50
 1889 0560 01       		.uleb128 0x1
 1890 0561 3D       		.byte	0x3d
 1891 0562 00       		.byte	0
 1892 0563 0B       		.uleb128 0xb
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 62


 1893 0564 18000000 		.4byte	.LVL75
 1894 0568 56040000 		.4byte	0x456
 1895 056c 0A       		.uleb128 0xa
 1896 056d 01       		.uleb128 0x1
 1897 056e 50       		.byte	0x50
 1898 056f 01       		.uleb128 0x1
 1899 0570 3A       		.byte	0x3a
 1900 0571 00       		.byte	0
 1901 0572 00       		.byte	0
 1902 0573 11       		.uleb128 0x11
 1903 0574 D2000000 		.4byte	.LASF59
 1904 0578 01       		.byte	0x1
 1905 0579 F904     		.2byte	0x4f9
 1906 057b 6B000000 		.4byte	0x6b
 1907 057f 00000000 		.4byte	.LFB23
 1908 0583 24000000 		.4byte	.LFE23-.LFB23
 1909 0587 01       		.uleb128 0x1
 1910 0588 9C       		.byte	0x9c
 1911 0589 9E050000 		.4byte	0x59e
 1912 058d 12       		.uleb128 0x12
 1913 058e C1010000 		.4byte	.LASF40
 1914 0592 01       		.byte	0x1
 1915 0593 FC04     		.2byte	0x4fc
 1916 0595 6B000000 		.4byte	0x6b
 1917 0599 DE020000 		.4byte	.LLST16
 1918 059d 00       		.byte	0
 1919 059e 0F       		.uleb128 0xf
 1920 059f 2A010000 		.4byte	.LASF60
 1921 05a3 01       		.byte	0x1
 1922 05a4 4A05     		.2byte	0x54a
 1923 05a6 00000000 		.4byte	.LFB24
 1924 05aa 24000000 		.4byte	.LFE24-.LFB24
 1925 05ae 01       		.uleb128 0x1
 1926 05af 9C       		.byte	0x9c
 1927 05b0 D7050000 		.4byte	0x5d7
 1928 05b4 12       		.uleb128 0x12
 1929 05b5 40040000 		.4byte	.LASF24
 1930 05b9 01       		.byte	0x1
 1931 05ba 4C05     		.2byte	0x54c
 1932 05bc 6B000000 		.4byte	0x6b
 1933 05c0 FC020000 		.4byte	.LLST17
 1934 05c4 0D       		.uleb128 0xd
 1935 05c5 06000000 		.4byte	.LVL78
 1936 05c9 0B070000 		.4byte	0x70b
 1937 05cd 0D       		.uleb128 0xd
 1938 05ce 1C000000 		.4byte	.LVL79
 1939 05d2 16070000 		.4byte	0x716
 1940 05d6 00       		.byte	0
 1941 05d7 0F       		.uleb128 0xf
 1942 05d8 8F030000 		.4byte	.LASF61
 1943 05dc 01       		.byte	0x1
 1944 05dd A005     		.2byte	0x5a0
 1945 05df 00000000 		.4byte	.LFB25
 1946 05e3 58000000 		.4byte	.LFE25-.LFB25
 1947 05e7 01       		.uleb128 0x1
 1948 05e8 9C       		.byte	0x9c
 1949 05e9 2A060000 		.4byte	0x62a
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 63


 1950 05ed 14       		.uleb128 0x14
 1951 05ee 62010000 		.4byte	.LASF62
 1952 05f2 01       		.byte	0x1
 1953 05f3 A005     		.2byte	0x5a0
 1954 05f5 6B000000 		.4byte	0x6b
 1955 05f9 0F030000 		.4byte	.LLST18
 1956 05fd 16       		.uleb128 0x16
 1957 05fe 06000000 		.4byte	.LBB2
 1958 0602 52000000 		.4byte	.LBE2-.LBB2
 1959 0606 12       		.uleb128 0x12
 1960 0607 AC020000 		.4byte	.LASF63
 1961 060b 01       		.byte	0x1
 1962 060c A805     		.2byte	0x5a8
 1963 060e 6B000000 		.4byte	0x6b
 1964 0612 30030000 		.4byte	.LLST19
 1965 0616 13       		.uleb128 0x13
 1966 0617 BC000000 		.4byte	.LASF64
 1967 061b 01       		.byte	0x1
 1968 061c D005     		.2byte	0x5d0
 1969 061e 6B000000 		.4byte	0x6b
 1970 0622 05       		.uleb128 0x5
 1971 0623 03       		.byte	0x3
 1972 0624 08000000 		.4byte	txPeriod.4985
 1973 0628 00       		.byte	0
 1974 0629 00       		.byte	0
 1975 062a 0F       		.uleb128 0xf
 1976 062b 29030000 		.4byte	.LASF65
 1977 062f 01       		.byte	0x1
 1978 0630 2406     		.2byte	0x624
 1979 0632 00000000 		.4byte	.LFB26
 1980 0636 02000000 		.4byte	.LFE26-.LFB26
 1981 063a 01       		.uleb128 0x1
 1982 063b 9C       		.byte	0x9c
 1983 063c 4F060000 		.4byte	0x64f
 1984 0640 10       		.uleb128 0x10
 1985 0641 0E010000 		.4byte	.LASF43
 1986 0645 01       		.byte	0x1
 1987 0646 2406     		.2byte	0x624
 1988 0648 6B000000 		.4byte	0x6b
 1989 064c 01       		.uleb128 0x1
 1990 064d 50       		.byte	0x50
 1991 064e 00       		.byte	0
 1992 064f 17       		.uleb128 0x17
 1993 0650 C5000000 		.4byte	.LASF66
 1994 0654 01       		.byte	0x1
 1995 0655 1B       		.byte	0x1b
 1996 0656 6B000000 		.4byte	0x6b
 1997 065a 05       		.uleb128 0x5
 1998 065b 03       		.byte	0x3
 1999 065c 00000000 		.4byte	Pump_initVar
 2000 0660 17       		.uleb128 0x17
 2001 0661 79000000 		.4byte	.LASF67
 2002 0665 01       		.byte	0x1
 2003 0666 24       		.byte	0x24
 2004 0667 6B000000 		.4byte	0x6b
 2005 066b 05       		.uleb128 0x5
 2006 066c 03       		.byte	0x3
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 64


 2007 066d 00000000 		.4byte	Pump_errorStatus
 2008 0671 18       		.uleb128 0x18
 2009 0672 6B000000 		.4byte	0x6b
 2010 0676 81060000 		.4byte	0x681
 2011 067a 19       		.uleb128 0x19
 2012 067b EA000000 		.4byte	0xea
 2013 067f FF       		.byte	0xff
 2014 0680 00       		.byte	0
 2015 0681 17       		.uleb128 0x17
 2016 0682 28000000 		.4byte	.LASF68
 2017 0686 01       		.byte	0x1
 2018 0687 25       		.byte	0x25
 2019 0688 92060000 		.4byte	0x692
 2020 068c 05       		.uleb128 0x5
 2021 068d 03       		.byte	0x3
 2022 068e 00000000 		.4byte	Pump_rxBuffer
 2023 0692 05       		.uleb128 0x5
 2024 0693 71060000 		.4byte	0x671
 2025 0697 17       		.uleb128 0x17
 2026 0698 06030000 		.4byte	.LASF69
 2027 069c 01       		.byte	0x1
 2028 069d 26       		.byte	0x26
 2029 069e C1000000 		.4byte	0xc1
 2030 06a2 05       		.uleb128 0x5
 2031 06a3 03       		.byte	0x3
 2032 06a4 00000000 		.4byte	Pump_rxBufferRead
 2033 06a8 17       		.uleb128 0x17
 2034 06a9 51040000 		.4byte	.LASF70
 2035 06ad 01       		.byte	0x1
 2036 06ae 27       		.byte	0x27
 2037 06af C1000000 		.4byte	0xc1
 2038 06b3 05       		.uleb128 0x5
 2039 06b4 03       		.byte	0x3
 2040 06b5 00000000 		.4byte	Pump_rxBufferWrite
 2041 06b9 17       		.uleb128 0x17
 2042 06ba 61000000 		.4byte	.LASF71
 2043 06be 01       		.byte	0x1
 2044 06bf 28       		.byte	0x28
 2045 06c0 BC000000 		.4byte	0xbc
 2046 06c4 05       		.uleb128 0x5
 2047 06c5 03       		.byte	0x3
 2048 06c6 00000000 		.4byte	Pump_rxBufferLoopDetect
 2049 06ca 17       		.uleb128 0x17
 2050 06cb 4C010000 		.4byte	.LASF72
 2051 06cf 01       		.byte	0x1
 2052 06d0 29       		.byte	0x29
 2053 06d1 BC000000 		.4byte	0xbc
 2054 06d5 05       		.uleb128 0x5
 2055 06d6 03       		.byte	0x3
 2056 06d7 00000000 		.4byte	Pump_rxBufferOverflow
 2057 06db 1A       		.uleb128 0x1a
 2058 06dc D9010000 		.4byte	.LASF76
 2059 06e0 03       		.byte	0x3
 2060 06e1 89       		.byte	0x89
 2061 06e2 D7000000 		.4byte	0xd7
 2062 06e6 F5060000 		.4byte	0x6f5
 2063 06ea 1B       		.uleb128 0x1b
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 65


 2064 06eb 6B000000 		.4byte	0x6b
 2065 06ef 1B       		.uleb128 0x1b
 2066 06f0 D7000000 		.4byte	0xd7
 2067 06f4 00       		.byte	0
 2068 06f5 1C       		.uleb128 0x1c
 2069 06f6 F8010000 		.4byte	.LASF77
 2070 06fa 03       		.byte	0x3
 2071 06fb 8C       		.byte	0x8c
 2072 06fc 0B070000 		.4byte	0x70b
 2073 0700 1B       		.uleb128 0x1b
 2074 0701 6B000000 		.4byte	0x6b
 2075 0705 1B       		.uleb128 0x1b
 2076 0706 6B000000 		.4byte	0x6b
 2077 070a 00       		.byte	0
 2078 070b 1D       		.uleb128 0x1d
 2079 070c AA010000 		.4byte	.LASF78
 2080 0710 03       		.byte	0x3
 2081 0711 7E       		.byte	0x7e
 2082 0712 6B000000 		.4byte	0x6b
 2083 0716 1E       		.uleb128 0x1e
 2084 0717 07000000 		.4byte	.LASF79
 2085 071b 03       		.byte	0x3
 2086 071c 7F       		.byte	0x7f
 2087 071d 1B       		.uleb128 0x1b
 2088 071e 6B000000 		.4byte	0x6b
 2089 0722 00       		.byte	0
 2090 0723 00       		.byte	0
 2091              		.section	.debug_abbrev,"",%progbits
 2092              	.Ldebug_abbrev0:
 2093 0000 01       		.uleb128 0x1
 2094 0001 11       		.uleb128 0x11
 2095 0002 01       		.byte	0x1
 2096 0003 25       		.uleb128 0x25
 2097 0004 0E       		.uleb128 0xe
 2098 0005 13       		.uleb128 0x13
 2099 0006 0B       		.uleb128 0xb
 2100 0007 03       		.uleb128 0x3
 2101 0008 0E       		.uleb128 0xe
 2102 0009 1B       		.uleb128 0x1b
 2103 000a 0E       		.uleb128 0xe
 2104 000b 55       		.uleb128 0x55
 2105 000c 17       		.uleb128 0x17
 2106 000d 11       		.uleb128 0x11
 2107 000e 01       		.uleb128 0x1
 2108 000f 10       		.uleb128 0x10
 2109 0010 17       		.uleb128 0x17
 2110 0011 00       		.byte	0
 2111 0012 00       		.byte	0
 2112 0013 02       		.uleb128 0x2
 2113 0014 24       		.uleb128 0x24
 2114 0015 00       		.byte	0
 2115 0016 0B       		.uleb128 0xb
 2116 0017 0B       		.uleb128 0xb
 2117 0018 3E       		.uleb128 0x3e
 2118 0019 0B       		.uleb128 0xb
 2119 001a 03       		.uleb128 0x3
 2120 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 66


 2121 001c 00       		.byte	0
 2122 001d 00       		.byte	0
 2123 001e 03       		.uleb128 0x3
 2124 001f 24       		.uleb128 0x24
 2125 0020 00       		.byte	0
 2126 0021 0B       		.uleb128 0xb
 2127 0022 0B       		.uleb128 0xb
 2128 0023 3E       		.uleb128 0x3e
 2129 0024 0B       		.uleb128 0xb
 2130 0025 03       		.uleb128 0x3
 2131 0026 08       		.uleb128 0x8
 2132 0027 00       		.byte	0
 2133 0028 00       		.byte	0
 2134 0029 04       		.uleb128 0x4
 2135 002a 16       		.uleb128 0x16
 2136 002b 00       		.byte	0
 2137 002c 03       		.uleb128 0x3
 2138 002d 0E       		.uleb128 0xe
 2139 002e 3A       		.uleb128 0x3a
 2140 002f 0B       		.uleb128 0xb
 2141 0030 3B       		.uleb128 0x3b
 2142 0031 05       		.uleb128 0x5
 2143 0032 49       		.uleb128 0x49
 2144 0033 13       		.uleb128 0x13
 2145 0034 00       		.byte	0
 2146 0035 00       		.byte	0
 2147 0036 05       		.uleb128 0x5
 2148 0037 35       		.uleb128 0x35
 2149 0038 00       		.byte	0
 2150 0039 49       		.uleb128 0x49
 2151 003a 13       		.uleb128 0x13
 2152 003b 00       		.byte	0
 2153 003c 00       		.byte	0
 2154 003d 06       		.uleb128 0x6
 2155 003e 0F       		.uleb128 0xf
 2156 003f 00       		.byte	0
 2157 0040 0B       		.uleb128 0xb
 2158 0041 0B       		.uleb128 0xb
 2159 0042 49       		.uleb128 0x49
 2160 0043 13       		.uleb128 0x13
 2161 0044 00       		.byte	0
 2162 0045 00       		.byte	0
 2163 0046 07       		.uleb128 0x7
 2164 0047 15       		.uleb128 0x15
 2165 0048 00       		.byte	0
 2166 0049 27       		.uleb128 0x27
 2167 004a 19       		.uleb128 0x19
 2168 004b 00       		.byte	0
 2169 004c 00       		.byte	0
 2170 004d 08       		.uleb128 0x8
 2171 004e 2E       		.uleb128 0x2e
 2172 004f 01       		.byte	0x1
 2173 0050 3F       		.uleb128 0x3f
 2174 0051 19       		.uleb128 0x19
 2175 0052 03       		.uleb128 0x3
 2176 0053 0E       		.uleb128 0xe
 2177 0054 3A       		.uleb128 0x3a
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 67


 2178 0055 0B       		.uleb128 0xb
 2179 0056 3B       		.uleb128 0x3b
 2180 0057 0B       		.uleb128 0xb
 2181 0058 27       		.uleb128 0x27
 2182 0059 19       		.uleb128 0x19
 2183 005a 11       		.uleb128 0x11
 2184 005b 01       		.uleb128 0x1
 2185 005c 12       		.uleb128 0x12
 2186 005d 06       		.uleb128 0x6
 2187 005e 40       		.uleb128 0x40
 2188 005f 18       		.uleb128 0x18
 2189 0060 9742     		.uleb128 0x2117
 2190 0062 19       		.uleb128 0x19
 2191 0063 01       		.uleb128 0x1
 2192 0064 13       		.uleb128 0x13
 2193 0065 00       		.byte	0
 2194 0066 00       		.byte	0
 2195 0067 09       		.uleb128 0x9
 2196 0068 898201   		.uleb128 0x4109
 2197 006b 01       		.byte	0x1
 2198 006c 11       		.uleb128 0x11
 2199 006d 01       		.uleb128 0x1
 2200 006e 31       		.uleb128 0x31
 2201 006f 13       		.uleb128 0x13
 2202 0070 01       		.uleb128 0x1
 2203 0071 13       		.uleb128 0x13
 2204 0072 00       		.byte	0
 2205 0073 00       		.byte	0
 2206 0074 0A       		.uleb128 0xa
 2207 0075 8A8201   		.uleb128 0x410a
 2208 0078 00       		.byte	0
 2209 0079 02       		.uleb128 0x2
 2210 007a 18       		.uleb128 0x18
 2211 007b 9142     		.uleb128 0x2111
 2212 007d 18       		.uleb128 0x18
 2213 007e 00       		.byte	0
 2214 007f 00       		.byte	0
 2215 0080 0B       		.uleb128 0xb
 2216 0081 898201   		.uleb128 0x4109
 2217 0084 01       		.byte	0x1
 2218 0085 11       		.uleb128 0x11
 2219 0086 01       		.uleb128 0x1
 2220 0087 31       		.uleb128 0x31
 2221 0088 13       		.uleb128 0x13
 2222 0089 00       		.byte	0
 2223 008a 00       		.byte	0
 2224 008b 0C       		.uleb128 0xc
 2225 008c 34       		.uleb128 0x34
 2226 008d 00       		.byte	0
 2227 008e 03       		.uleb128 0x3
 2228 008f 0E       		.uleb128 0xe
 2229 0090 3A       		.uleb128 0x3a
 2230 0091 0B       		.uleb128 0xb
 2231 0092 3B       		.uleb128 0x3b
 2232 0093 0B       		.uleb128 0xb
 2233 0094 49       		.uleb128 0x49
 2234 0095 13       		.uleb128 0x13
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 68


 2235 0096 02       		.uleb128 0x2
 2236 0097 17       		.uleb128 0x17
 2237 0098 00       		.byte	0
 2238 0099 00       		.byte	0
 2239 009a 0D       		.uleb128 0xd
 2240 009b 898201   		.uleb128 0x4109
 2241 009e 00       		.byte	0
 2242 009f 11       		.uleb128 0x11
 2243 00a0 01       		.uleb128 0x1
 2244 00a1 31       		.uleb128 0x31
 2245 00a2 13       		.uleb128 0x13
 2246 00a3 00       		.byte	0
 2247 00a4 00       		.byte	0
 2248 00a5 0E       		.uleb128 0xe
 2249 00a6 2E       		.uleb128 0x2e
 2250 00a7 00       		.byte	0
 2251 00a8 3F       		.uleb128 0x3f
 2252 00a9 19       		.uleb128 0x19
 2253 00aa 03       		.uleb128 0x3
 2254 00ab 0E       		.uleb128 0xe
 2255 00ac 3A       		.uleb128 0x3a
 2256 00ad 0B       		.uleb128 0xb
 2257 00ae 3B       		.uleb128 0x3b
 2258 00af 05       		.uleb128 0x5
 2259 00b0 27       		.uleb128 0x27
 2260 00b1 19       		.uleb128 0x19
 2261 00b2 49       		.uleb128 0x49
 2262 00b3 13       		.uleb128 0x13
 2263 00b4 11       		.uleb128 0x11
 2264 00b5 01       		.uleb128 0x1
 2265 00b6 12       		.uleb128 0x12
 2266 00b7 06       		.uleb128 0x6
 2267 00b8 40       		.uleb128 0x40
 2268 00b9 18       		.uleb128 0x18
 2269 00ba 9742     		.uleb128 0x2117
 2270 00bc 19       		.uleb128 0x19
 2271 00bd 00       		.byte	0
 2272 00be 00       		.byte	0
 2273 00bf 0F       		.uleb128 0xf
 2274 00c0 2E       		.uleb128 0x2e
 2275 00c1 01       		.byte	0x1
 2276 00c2 3F       		.uleb128 0x3f
 2277 00c3 19       		.uleb128 0x19
 2278 00c4 03       		.uleb128 0x3
 2279 00c5 0E       		.uleb128 0xe
 2280 00c6 3A       		.uleb128 0x3a
 2281 00c7 0B       		.uleb128 0xb
 2282 00c8 3B       		.uleb128 0x3b
 2283 00c9 05       		.uleb128 0x5
 2284 00ca 27       		.uleb128 0x27
 2285 00cb 19       		.uleb128 0x19
 2286 00cc 11       		.uleb128 0x11
 2287 00cd 01       		.uleb128 0x1
 2288 00ce 12       		.uleb128 0x12
 2289 00cf 06       		.uleb128 0x6
 2290 00d0 40       		.uleb128 0x40
 2291 00d1 18       		.uleb128 0x18
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 69


 2292 00d2 9742     		.uleb128 0x2117
 2293 00d4 19       		.uleb128 0x19
 2294 00d5 01       		.uleb128 0x1
 2295 00d6 13       		.uleb128 0x13
 2296 00d7 00       		.byte	0
 2297 00d8 00       		.byte	0
 2298 00d9 10       		.uleb128 0x10
 2299 00da 05       		.uleb128 0x5
 2300 00db 00       		.byte	0
 2301 00dc 03       		.uleb128 0x3
 2302 00dd 0E       		.uleb128 0xe
 2303 00de 3A       		.uleb128 0x3a
 2304 00df 0B       		.uleb128 0xb
 2305 00e0 3B       		.uleb128 0x3b
 2306 00e1 05       		.uleb128 0x5
 2307 00e2 49       		.uleb128 0x49
 2308 00e3 13       		.uleb128 0x13
 2309 00e4 02       		.uleb128 0x2
 2310 00e5 18       		.uleb128 0x18
 2311 00e6 00       		.byte	0
 2312 00e7 00       		.byte	0
 2313 00e8 11       		.uleb128 0x11
 2314 00e9 2E       		.uleb128 0x2e
 2315 00ea 01       		.byte	0x1
 2316 00eb 3F       		.uleb128 0x3f
 2317 00ec 19       		.uleb128 0x19
 2318 00ed 03       		.uleb128 0x3
 2319 00ee 0E       		.uleb128 0xe
 2320 00ef 3A       		.uleb128 0x3a
 2321 00f0 0B       		.uleb128 0xb
 2322 00f1 3B       		.uleb128 0x3b
 2323 00f2 05       		.uleb128 0x5
 2324 00f3 27       		.uleb128 0x27
 2325 00f4 19       		.uleb128 0x19
 2326 00f5 49       		.uleb128 0x49
 2327 00f6 13       		.uleb128 0x13
 2328 00f7 11       		.uleb128 0x11
 2329 00f8 01       		.uleb128 0x1
 2330 00f9 12       		.uleb128 0x12
 2331 00fa 06       		.uleb128 0x6
 2332 00fb 40       		.uleb128 0x40
 2333 00fc 18       		.uleb128 0x18
 2334 00fd 9742     		.uleb128 0x2117
 2335 00ff 19       		.uleb128 0x19
 2336 0100 01       		.uleb128 0x1
 2337 0101 13       		.uleb128 0x13
 2338 0102 00       		.byte	0
 2339 0103 00       		.byte	0
 2340 0104 12       		.uleb128 0x12
 2341 0105 34       		.uleb128 0x34
 2342 0106 00       		.byte	0
 2343 0107 03       		.uleb128 0x3
 2344 0108 0E       		.uleb128 0xe
 2345 0109 3A       		.uleb128 0x3a
 2346 010a 0B       		.uleb128 0xb
 2347 010b 3B       		.uleb128 0x3b
 2348 010c 05       		.uleb128 0x5
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 70


 2349 010d 49       		.uleb128 0x49
 2350 010e 13       		.uleb128 0x13
 2351 010f 02       		.uleb128 0x2
 2352 0110 17       		.uleb128 0x17
 2353 0111 00       		.byte	0
 2354 0112 00       		.byte	0
 2355 0113 13       		.uleb128 0x13
 2356 0114 34       		.uleb128 0x34
 2357 0115 00       		.byte	0
 2358 0116 03       		.uleb128 0x3
 2359 0117 0E       		.uleb128 0xe
 2360 0118 3A       		.uleb128 0x3a
 2361 0119 0B       		.uleb128 0xb
 2362 011a 3B       		.uleb128 0x3b
 2363 011b 05       		.uleb128 0x5
 2364 011c 49       		.uleb128 0x49
 2365 011d 13       		.uleb128 0x13
 2366 011e 02       		.uleb128 0x2
 2367 011f 18       		.uleb128 0x18
 2368 0120 00       		.byte	0
 2369 0121 00       		.byte	0
 2370 0122 14       		.uleb128 0x14
 2371 0123 05       		.uleb128 0x5
 2372 0124 00       		.byte	0
 2373 0125 03       		.uleb128 0x3
 2374 0126 0E       		.uleb128 0xe
 2375 0127 3A       		.uleb128 0x3a
 2376 0128 0B       		.uleb128 0xb
 2377 0129 3B       		.uleb128 0x3b
 2378 012a 05       		.uleb128 0x5
 2379 012b 49       		.uleb128 0x49
 2380 012c 13       		.uleb128 0x13
 2381 012d 02       		.uleb128 0x2
 2382 012e 17       		.uleb128 0x17
 2383 012f 00       		.byte	0
 2384 0130 00       		.byte	0
 2385 0131 15       		.uleb128 0x15
 2386 0132 26       		.uleb128 0x26
 2387 0133 00       		.byte	0
 2388 0134 49       		.uleb128 0x49
 2389 0135 13       		.uleb128 0x13
 2390 0136 00       		.byte	0
 2391 0137 00       		.byte	0
 2392 0138 16       		.uleb128 0x16
 2393 0139 0B       		.uleb128 0xb
 2394 013a 01       		.byte	0x1
 2395 013b 11       		.uleb128 0x11
 2396 013c 01       		.uleb128 0x1
 2397 013d 12       		.uleb128 0x12
 2398 013e 06       		.uleb128 0x6
 2399 013f 00       		.byte	0
 2400 0140 00       		.byte	0
 2401 0141 17       		.uleb128 0x17
 2402 0142 34       		.uleb128 0x34
 2403 0143 00       		.byte	0
 2404 0144 03       		.uleb128 0x3
 2405 0145 0E       		.uleb128 0xe
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 71


 2406 0146 3A       		.uleb128 0x3a
 2407 0147 0B       		.uleb128 0xb
 2408 0148 3B       		.uleb128 0x3b
 2409 0149 0B       		.uleb128 0xb
 2410 014a 49       		.uleb128 0x49
 2411 014b 13       		.uleb128 0x13
 2412 014c 3F       		.uleb128 0x3f
 2413 014d 19       		.uleb128 0x19
 2414 014e 02       		.uleb128 0x2
 2415 014f 18       		.uleb128 0x18
 2416 0150 00       		.byte	0
 2417 0151 00       		.byte	0
 2418 0152 18       		.uleb128 0x18
 2419 0153 01       		.uleb128 0x1
 2420 0154 01       		.byte	0x1
 2421 0155 49       		.uleb128 0x49
 2422 0156 13       		.uleb128 0x13
 2423 0157 01       		.uleb128 0x1
 2424 0158 13       		.uleb128 0x13
 2425 0159 00       		.byte	0
 2426 015a 00       		.byte	0
 2427 015b 19       		.uleb128 0x19
 2428 015c 21       		.uleb128 0x21
 2429 015d 00       		.byte	0
 2430 015e 49       		.uleb128 0x49
 2431 015f 13       		.uleb128 0x13
 2432 0160 2F       		.uleb128 0x2f
 2433 0161 0B       		.uleb128 0xb
 2434 0162 00       		.byte	0
 2435 0163 00       		.byte	0
 2436 0164 1A       		.uleb128 0x1a
 2437 0165 2E       		.uleb128 0x2e
 2438 0166 01       		.byte	0x1
 2439 0167 3F       		.uleb128 0x3f
 2440 0168 19       		.uleb128 0x19
 2441 0169 03       		.uleb128 0x3
 2442 016a 0E       		.uleb128 0xe
 2443 016b 3A       		.uleb128 0x3a
 2444 016c 0B       		.uleb128 0xb
 2445 016d 3B       		.uleb128 0x3b
 2446 016e 0B       		.uleb128 0xb
 2447 016f 27       		.uleb128 0x27
 2448 0170 19       		.uleb128 0x19
 2449 0171 49       		.uleb128 0x49
 2450 0172 13       		.uleb128 0x13
 2451 0173 3C       		.uleb128 0x3c
 2452 0174 19       		.uleb128 0x19
 2453 0175 01       		.uleb128 0x1
 2454 0176 13       		.uleb128 0x13
 2455 0177 00       		.byte	0
 2456 0178 00       		.byte	0
 2457 0179 1B       		.uleb128 0x1b
 2458 017a 05       		.uleb128 0x5
 2459 017b 00       		.byte	0
 2460 017c 49       		.uleb128 0x49
 2461 017d 13       		.uleb128 0x13
 2462 017e 00       		.byte	0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 72


 2463 017f 00       		.byte	0
 2464 0180 1C       		.uleb128 0x1c
 2465 0181 2E       		.uleb128 0x2e
 2466 0182 01       		.byte	0x1
 2467 0183 3F       		.uleb128 0x3f
 2468 0184 19       		.uleb128 0x19
 2469 0185 03       		.uleb128 0x3
 2470 0186 0E       		.uleb128 0xe
 2471 0187 3A       		.uleb128 0x3a
 2472 0188 0B       		.uleb128 0xb
 2473 0189 3B       		.uleb128 0x3b
 2474 018a 0B       		.uleb128 0xb
 2475 018b 27       		.uleb128 0x27
 2476 018c 19       		.uleb128 0x19
 2477 018d 3C       		.uleb128 0x3c
 2478 018e 19       		.uleb128 0x19
 2479 018f 01       		.uleb128 0x1
 2480 0190 13       		.uleb128 0x13
 2481 0191 00       		.byte	0
 2482 0192 00       		.byte	0
 2483 0193 1D       		.uleb128 0x1d
 2484 0194 2E       		.uleb128 0x2e
 2485 0195 00       		.byte	0
 2486 0196 3F       		.uleb128 0x3f
 2487 0197 19       		.uleb128 0x19
 2488 0198 03       		.uleb128 0x3
 2489 0199 0E       		.uleb128 0xe
 2490 019a 3A       		.uleb128 0x3a
 2491 019b 0B       		.uleb128 0xb
 2492 019c 3B       		.uleb128 0x3b
 2493 019d 0B       		.uleb128 0xb
 2494 019e 27       		.uleb128 0x27
 2495 019f 19       		.uleb128 0x19
 2496 01a0 49       		.uleb128 0x49
 2497 01a1 13       		.uleb128 0x13
 2498 01a2 3C       		.uleb128 0x3c
 2499 01a3 19       		.uleb128 0x19
 2500 01a4 00       		.byte	0
 2501 01a5 00       		.byte	0
 2502 01a6 1E       		.uleb128 0x1e
 2503 01a7 2E       		.uleb128 0x2e
 2504 01a8 01       		.byte	0x1
 2505 01a9 3F       		.uleb128 0x3f
 2506 01aa 19       		.uleb128 0x19
 2507 01ab 03       		.uleb128 0x3
 2508 01ac 0E       		.uleb128 0xe
 2509 01ad 3A       		.uleb128 0x3a
 2510 01ae 0B       		.uleb128 0xb
 2511 01af 3B       		.uleb128 0x3b
 2512 01b0 0B       		.uleb128 0xb
 2513 01b1 27       		.uleb128 0x27
 2514 01b2 19       		.uleb128 0x19
 2515 01b3 3C       		.uleb128 0x3c
 2516 01b4 19       		.uleb128 0x19
 2517 01b5 00       		.byte	0
 2518 01b6 00       		.byte	0
 2519 01b7 00       		.byte	0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 73


 2520              		.section	.debug_loc,"",%progbits
 2521              	.Ldebug_loc0:
 2522              	.LLST0:
 2523 0000 06000000 		.4byte	.LVL2
 2524 0004 2D000000 		.4byte	.LVL3-1
 2525 0008 0100     		.2byte	0x1
 2526 000a 50       		.byte	0x50
 2527 000b 00000000 		.4byte	0
 2528 000f 00000000 		.4byte	0
 2529              	.LLST1:
 2530 0013 06000000 		.4byte	.LVL6
 2531 0017 2D000000 		.4byte	.LVL7-1
 2532 001b 0100     		.2byte	0x1
 2533 001d 50       		.byte	0x50
 2534 001e 00000000 		.4byte	0
 2535 0022 00000000 		.4byte	0
 2536              	.LLST2:
 2537 0026 22000000 		.4byte	.LVL12
 2538 002a 40000000 		.4byte	.LVL18
 2539 002e 0100     		.2byte	0x1
 2540 0030 50       		.byte	0x50
 2541 0031 46000000 		.4byte	.LVL20
 2542 0035 64000000 		.4byte	.LFE7
 2543 0039 0100     		.2byte	0x1
 2544 003b 50       		.byte	0x50
 2545 003c 00000000 		.4byte	0
 2546 0040 00000000 		.4byte	0
 2547              	.LLST3:
 2548 0044 0C000000 		.4byte	.LVL10
 2549 0048 24000000 		.4byte	.LVL13
 2550 004c 0100     		.2byte	0x1
 2551 004e 53       		.byte	0x53
 2552 004f 24000000 		.4byte	.LVL13
 2553 0053 26000000 		.4byte	.LVL14
 2554 0057 0300     		.2byte	0x3
 2555 0059 73       		.byte	0x73
 2556 005a 7F       		.sleb128 -1
 2557 005b 9F       		.byte	0x9f
 2558 005c 26000000 		.4byte	.LVL14
 2559 0060 32000000 		.4byte	.LVL16
 2560 0064 0100     		.2byte	0x1
 2561 0066 53       		.byte	0x53
 2562 0067 32000000 		.4byte	.LVL16
 2563 006b 3E000000 		.4byte	.LVL17
 2564 006f 0500     		.2byte	0x5
 2565 0071 03       		.byte	0x3
 2566 0072 00000000 		.4byte	Pump_rxBufferRead
 2567 0076 40000000 		.4byte	.LVL18
 2568 007a 42000000 		.4byte	.LVL19
 2569 007e 0100     		.2byte	0x1
 2570 0080 53       		.byte	0x53
 2571 0081 00000000 		.4byte	0
 2572 0085 00000000 		.4byte	0
 2573              	.LLST4:
 2574 0089 00000000 		.4byte	.LVL23
 2575 008d 22000000 		.4byte	.LVL26
 2576 0091 0200     		.2byte	0x2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 74


 2577 0093 30       		.byte	0x30
 2578 0094 9F       		.byte	0x9f
 2579 0095 22000000 		.4byte	.LVL26
 2580 0099 40000000 		.4byte	.LVL32
 2581 009d 0100     		.2byte	0x1
 2582 009f 50       		.byte	0x50
 2583 00a0 40000000 		.4byte	.LVL32
 2584 00a4 52000000 		.4byte	.LVL35
 2585 00a8 0200     		.2byte	0x2
 2586 00aa 30       		.byte	0x30
 2587 00ab 9F       		.byte	0x9f
 2588 00ac 52000000 		.4byte	.LVL35
 2589 00b0 5A000000 		.4byte	.LVL36
 2590 00b4 0100     		.2byte	0x1
 2591 00b6 50       		.byte	0x50
 2592 00b7 5A000000 		.4byte	.LVL36
 2593 00bb 5E000000 		.4byte	.LVL37
 2594 00bf 0200     		.2byte	0x2
 2595 00c1 30       		.byte	0x30
 2596 00c2 9F       		.byte	0x9f
 2597 00c3 5E000000 		.4byte	.LVL37
 2598 00c7 80000000 		.4byte	.LFE9
 2599 00cb 0100     		.2byte	0x1
 2600 00cd 50       		.byte	0x50
 2601 00ce 00000000 		.4byte	0
 2602 00d2 00000000 		.4byte	0
 2603              	.LLST5:
 2604 00d6 46000000 		.4byte	.LVL34
 2605 00da 60000000 		.4byte	.LVL38
 2606 00de 0100     		.2byte	0x1
 2607 00e0 53       		.byte	0x53
 2608 00e1 00000000 		.4byte	0
 2609 00e5 00000000 		.4byte	0
 2610              	.LLST6:
 2611 00e9 0C000000 		.4byte	.LVL24
 2612 00ed 24000000 		.4byte	.LVL27
 2613 00f1 0100     		.2byte	0x1
 2614 00f3 53       		.byte	0x53
 2615 00f4 24000000 		.4byte	.LVL27
 2616 00f8 26000000 		.4byte	.LVL28
 2617 00fc 0300     		.2byte	0x3
 2618 00fe 73       		.byte	0x73
 2619 00ff 7F       		.sleb128 -1
 2620 0100 9F       		.byte	0x9f
 2621 0101 26000000 		.4byte	.LVL28
 2622 0105 32000000 		.4byte	.LVL30
 2623 0109 0100     		.2byte	0x1
 2624 010b 53       		.byte	0x53
 2625 010c 32000000 		.4byte	.LVL30
 2626 0110 3E000000 		.4byte	.LVL31
 2627 0114 0500     		.2byte	0x5
 2628 0116 03       		.byte	0x3
 2629 0117 00000000 		.4byte	Pump_rxBufferRead
 2630 011b 40000000 		.4byte	.LVL32
 2631 011f 42000000 		.4byte	.LVL33
 2632 0123 0100     		.2byte	0x1
 2633 0125 53       		.byte	0x53
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 75


 2634 0126 00000000 		.4byte	0
 2635 012a 00000000 		.4byte	0
 2636              	.LLST7:
 2637 012e 0C000000 		.4byte	.LVL39
 2638 0132 16000000 		.4byte	.LVL40
 2639 0136 0100     		.2byte	0x1
 2640 0138 54       		.byte	0x54
 2641 0139 00000000 		.4byte	0
 2642 013d 00000000 		.4byte	0
 2643              	.LLST8:
 2644 0141 3C000000 		.4byte	.LVL42
 2645 0145 3E000000 		.4byte	.LVL43
 2646 0149 0100     		.2byte	0x1
 2647 014b 50       		.byte	0x50
 2648 014c 50000000 		.4byte	.LVL44
 2649 0150 52000000 		.4byte	.LVL45
 2650 0154 0100     		.2byte	0x1
 2651 0156 50       		.byte	0x50
 2652 0157 54000000 		.4byte	.LVL46
 2653 015b 68000000 		.4byte	.LFE11
 2654 015f 0100     		.2byte	0x1
 2655 0161 50       		.byte	0x50
 2656 0162 00000000 		.4byte	0
 2657 0166 00000000 		.4byte	0
 2658              	.LLST9:
 2659 016a 06000000 		.4byte	.LVL47
 2660 016e 1B000000 		.4byte	.LVL48-1
 2661 0172 0100     		.2byte	0x1
 2662 0174 50       		.byte	0x50
 2663 0175 00000000 		.4byte	0
 2664 0179 00000000 		.4byte	0
 2665              	.LLST10:
 2666 017d 00000000 		.4byte	.LVL55
 2667 0181 0A000000 		.4byte	.LVL57
 2668 0185 0100     		.2byte	0x1
 2669 0187 50       		.byte	0x50
 2670 0188 0A000000 		.4byte	.LVL57
 2671 018c 14000000 		.4byte	.LVL61
 2672 0190 0100     		.2byte	0x1
 2673 0192 55       		.byte	0x55
 2674 0193 14000000 		.4byte	.LVL61
 2675 0197 18000000 		.4byte	.LVL62
 2676 019b 0100     		.2byte	0x1
 2677 019d 50       		.byte	0x50
 2678 019e 18000000 		.4byte	.LVL62
 2679 01a2 20000000 		.4byte	.LVL63
 2680 01a6 0100     		.2byte	0x1
 2681 01a8 55       		.byte	0x55
 2682 01a9 20000000 		.4byte	.LVL63
 2683 01ad 24000000 		.4byte	.LFE20
 2684 01b1 0400     		.2byte	0x4
 2685 01b3 F3       		.byte	0xf3
 2686 01b4 01       		.uleb128 0x1
 2687 01b5 50       		.byte	0x50
 2688 01b6 9F       		.byte	0x9f
 2689 01b7 00000000 		.4byte	0
 2690 01bb 00000000 		.4byte	0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 76


 2691              	.LLST11:
 2692 01bf 02000000 		.4byte	.LVL56
 2693 01c3 0A000000 		.4byte	.LVL57
 2694 01c7 0200     		.2byte	0x2
 2695 01c9 30       		.byte	0x30
 2696 01ca 9F       		.byte	0x9f
 2697 01cb 0A000000 		.4byte	.LVL57
 2698 01cf 10000000 		.4byte	.LVL59
 2699 01d3 0100     		.2byte	0x1
 2700 01d5 54       		.byte	0x54
 2701 01d6 12000000 		.4byte	.LVL60
 2702 01da 14000000 		.4byte	.LVL61
 2703 01de 0100     		.2byte	0x1
 2704 01e0 54       		.byte	0x54
 2705 01e1 14000000 		.4byte	.LVL61
 2706 01e5 18000000 		.4byte	.LVL62
 2707 01e9 0200     		.2byte	0x2
 2708 01eb 30       		.byte	0x30
 2709 01ec 9F       		.byte	0x9f
 2710 01ed 18000000 		.4byte	.LVL62
 2711 01f1 20000000 		.4byte	.LVL63
 2712 01f5 0100     		.2byte	0x1
 2713 01f7 54       		.byte	0x54
 2714 01f8 00000000 		.4byte	0
 2715 01fc 00000000 		.4byte	0
 2716              	.LLST12:
 2717 0200 00000000 		.4byte	.LVL64
 2718 0204 08000000 		.4byte	.LVL65
 2719 0208 0100     		.2byte	0x1
 2720 020a 50       		.byte	0x50
 2721 020b 08000000 		.4byte	.LVL65
 2722 020f 14000000 		.4byte	.LVL69
 2723 0213 0100     		.2byte	0x1
 2724 0215 56       		.byte	0x56
 2725 0216 14000000 		.4byte	.LVL69
 2726 021a 1C000000 		.4byte	.LVL70
 2727 021e 0100     		.2byte	0x1
 2728 0220 50       		.byte	0x50
 2729 0221 1C000000 		.4byte	.LVL70
 2730 0225 22000000 		.4byte	.LVL71
 2731 0229 0100     		.2byte	0x1
 2732 022b 56       		.byte	0x56
 2733 022c 22000000 		.4byte	.LVL71
 2734 0230 28000000 		.4byte	.LFE21
 2735 0234 0400     		.2byte	0x4
 2736 0236 F3       		.byte	0xf3
 2737 0237 01       		.uleb128 0x1
 2738 0238 50       		.byte	0x50
 2739 0239 9F       		.byte	0x9f
 2740 023a 00000000 		.4byte	0
 2741 023e 00000000 		.4byte	0
 2742              	.LLST13:
 2743 0242 00000000 		.4byte	.LVL64
 2744 0246 08000000 		.4byte	.LVL65
 2745 024a 0100     		.2byte	0x1
 2746 024c 51       		.byte	0x51
 2747 024d 08000000 		.4byte	.LVL65
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 77


 2748 0251 14000000 		.4byte	.LVL69
 2749 0255 0400     		.2byte	0x4
 2750 0257 F3       		.byte	0xf3
 2751 0258 01       		.uleb128 0x1
 2752 0259 51       		.byte	0x51
 2753 025a 9F       		.byte	0x9f
 2754 025b 14000000 		.4byte	.LVL69
 2755 025f 1C000000 		.4byte	.LVL70
 2756 0263 0100     		.2byte	0x1
 2757 0265 51       		.byte	0x51
 2758 0266 1C000000 		.4byte	.LVL70
 2759 026a 28000000 		.4byte	.LFE21
 2760 026e 0400     		.2byte	0x4
 2761 0270 F3       		.byte	0xf3
 2762 0271 01       		.uleb128 0x1
 2763 0272 51       		.byte	0x51
 2764 0273 9F       		.byte	0x9f
 2765 0274 00000000 		.4byte	0
 2766 0278 00000000 		.4byte	0
 2767              	.LLST14:
 2768 027c 00000000 		.4byte	.LVL64
 2769 0280 08000000 		.4byte	.LVL65
 2770 0284 0200     		.2byte	0x2
 2771 0286 30       		.byte	0x30
 2772 0287 9F       		.byte	0x9f
 2773 0288 08000000 		.4byte	.LVL65
 2774 028c 10000000 		.4byte	.LVL67
 2775 0290 0100     		.2byte	0x1
 2776 0292 54       		.byte	0x54
 2777 0293 12000000 		.4byte	.LVL68
 2778 0297 14000000 		.4byte	.LVL69
 2779 029b 0100     		.2byte	0x1
 2780 029d 54       		.byte	0x54
 2781 029e 14000000 		.4byte	.LVL69
 2782 02a2 1C000000 		.4byte	.LVL70
 2783 02a6 0200     		.2byte	0x2
 2784 02a8 30       		.byte	0x30
 2785 02a9 9F       		.byte	0x9f
 2786 02aa 1C000000 		.4byte	.LVL70
 2787 02ae 22000000 		.4byte	.LVL71
 2788 02b2 0100     		.2byte	0x1
 2789 02b4 54       		.byte	0x54
 2790 02b5 00000000 		.4byte	0
 2791 02b9 00000000 		.4byte	0
 2792              	.LLST15:
 2793 02bd 00000000 		.4byte	.LVL72
 2794 02c1 0B000000 		.4byte	.LVL73-1
 2795 02c5 0100     		.2byte	0x1
 2796 02c7 50       		.byte	0x50
 2797 02c8 0B000000 		.4byte	.LVL73-1
 2798 02cc 20000000 		.4byte	.LFE22
 2799 02d0 0400     		.2byte	0x4
 2800 02d2 F3       		.byte	0xf3
 2801 02d3 01       		.uleb128 0x1
 2802 02d4 50       		.byte	0x50
 2803 02d5 9F       		.byte	0x9f
 2804 02d6 00000000 		.4byte	0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 78


 2805 02da 00000000 		.4byte	0
 2806              	.LLST16:
 2807 02de 06000000 		.4byte	.LVL76
 2808 02e2 1C000000 		.4byte	.LVL77
 2809 02e6 0100     		.2byte	0x1
 2810 02e8 53       		.byte	0x53
 2811 02e9 1C000000 		.4byte	.LVL77
 2812 02ed 24000000 		.4byte	.LFE23
 2813 02f1 0100     		.2byte	0x1
 2814 02f3 50       		.byte	0x50
 2815 02f4 00000000 		.4byte	0
 2816 02f8 00000000 		.4byte	0
 2817              	.LLST17:
 2818 02fc 06000000 		.4byte	.LVL78
 2819 0300 1B000000 		.4byte	.LVL79-1
 2820 0304 0100     		.2byte	0x1
 2821 0306 50       		.byte	0x50
 2822 0307 00000000 		.4byte	0
 2823 030b 00000000 		.4byte	0
 2824              	.LLST18:
 2825 030f 00000000 		.4byte	.LVL80
 2826 0313 3C000000 		.4byte	.LVL85
 2827 0317 0100     		.2byte	0x1
 2828 0319 50       		.byte	0x50
 2829 031a 3C000000 		.4byte	.LVL85
 2830 031e 58000000 		.4byte	.LFE25
 2831 0322 0400     		.2byte	0x4
 2832 0324 F3       		.byte	0xf3
 2833 0325 01       		.uleb128 0x1
 2834 0326 50       		.byte	0x50
 2835 0327 9F       		.byte	0x9f
 2836 0328 00000000 		.4byte	0
 2837 032c 00000000 		.4byte	0
 2838              	.LLST19:
 2839 0330 22000000 		.4byte	.LVL81
 2840 0334 28000000 		.4byte	.LVL82
 2841 0338 0100     		.2byte	0x1
 2842 033a 53       		.byte	0x53
 2843 033b 34000000 		.4byte	.LVL83
 2844 033f 3A000000 		.4byte	.LVL84
 2845 0343 0100     		.2byte	0x1
 2846 0345 53       		.byte	0x53
 2847 0346 00000000 		.4byte	0
 2848 034a 00000000 		.4byte	0
 2849              		.section	.debug_aranges,"",%progbits
 2850 0000 EC000000 		.4byte	0xec
 2851 0004 0200     		.2byte	0x2
 2852 0006 00000000 		.4byte	.Ldebug_info0
 2853 000a 04       		.byte	0x4
 2854 000b 00       		.byte	0
 2855 000c 0000     		.2byte	0
 2856 000e 0000     		.2byte	0
 2857 0010 00000000 		.4byte	.LFB1
 2858 0014 44000000 		.4byte	.LFE1-.LFB1
 2859 0018 00000000 		.4byte	.LFB2
 2860 001c 3C000000 		.4byte	.LFE2-.LFB2
 2861 0020 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 79


 2862 0024 1C000000 		.4byte	.LFE0-.LFB0
 2863 0028 00000000 		.4byte	.LFB3
 2864 002c 3C000000 		.4byte	.LFE3-.LFB3
 2865 0030 00000000 		.4byte	.LFB4
 2866 0034 04000000 		.4byte	.LFE4-.LFB4
 2867 0038 00000000 		.4byte	.LFB5
 2868 003c 02000000 		.4byte	.LFE5-.LFB5
 2869 0040 00000000 		.4byte	.LFB6
 2870 0044 0C000000 		.4byte	.LFE6-.LFB6
 2871 0048 00000000 		.4byte	.LFB7
 2872 004c 64000000 		.4byte	.LFE7-.LFB7
 2873 0050 00000000 		.4byte	.LFB8
 2874 0054 28000000 		.4byte	.LFE8-.LFB8
 2875 0058 00000000 		.4byte	.LFB9
 2876 005c 80000000 		.4byte	.LFE9-.LFB9
 2877 0060 00000000 		.4byte	.LFB10
 2878 0064 2C000000 		.4byte	.LFE10-.LFB10
 2879 0068 00000000 		.4byte	.LFB11
 2880 006c 68000000 		.4byte	.LFE11-.LFB11
 2881 0070 00000000 		.4byte	.LFB12
 2882 0074 44000000 		.4byte	.LFE12-.LFB12
 2883 0078 00000000 		.4byte	.LFB13
 2884 007c 02000000 		.4byte	.LFE13-.LFB13
 2885 0080 00000000 		.4byte	.LFB14
 2886 0084 0C000000 		.4byte	.LFE14-.LFB14
 2887 0088 00000000 		.4byte	.LFB15
 2888 008c 0C000000 		.4byte	.LFE15-.LFB15
 2889 0090 00000000 		.4byte	.LFB16
 2890 0094 0C000000 		.4byte	.LFE16-.LFB16
 2891 0098 00000000 		.4byte	.LFB17
 2892 009c 14000000 		.4byte	.LFE17-.LFB17
 2893 00a0 00000000 		.4byte	.LFB18
 2894 00a4 0C000000 		.4byte	.LFE18-.LFB18
 2895 00a8 00000000 		.4byte	.LFB19
 2896 00ac 18000000 		.4byte	.LFE19-.LFB19
 2897 00b0 00000000 		.4byte	.LFB20
 2898 00b4 24000000 		.4byte	.LFE20-.LFB20
 2899 00b8 00000000 		.4byte	.LFB21
 2900 00bc 28000000 		.4byte	.LFE21-.LFB21
 2901 00c0 00000000 		.4byte	.LFB22
 2902 00c4 20000000 		.4byte	.LFE22-.LFB22
 2903 00c8 00000000 		.4byte	.LFB23
 2904 00cc 24000000 		.4byte	.LFE23-.LFB23
 2905 00d0 00000000 		.4byte	.LFB24
 2906 00d4 24000000 		.4byte	.LFE24-.LFB24
 2907 00d8 00000000 		.4byte	.LFB25
 2908 00dc 58000000 		.4byte	.LFE25-.LFB25
 2909 00e0 00000000 		.4byte	.LFB26
 2910 00e4 02000000 		.4byte	.LFE26-.LFB26
 2911 00e8 00000000 		.4byte	0
 2912 00ec 00000000 		.4byte	0
 2913              		.section	.debug_ranges,"",%progbits
 2914              	.Ldebug_ranges0:
 2915 0000 00000000 		.4byte	.LFB1
 2916 0004 44000000 		.4byte	.LFE1
 2917 0008 00000000 		.4byte	.LFB2
 2918 000c 3C000000 		.4byte	.LFE2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 80


 2919 0010 00000000 		.4byte	.LFB0
 2920 0014 1C000000 		.4byte	.LFE0
 2921 0018 00000000 		.4byte	.LFB3
 2922 001c 3C000000 		.4byte	.LFE3
 2923 0020 00000000 		.4byte	.LFB4
 2924 0024 04000000 		.4byte	.LFE4
 2925 0028 00000000 		.4byte	.LFB5
 2926 002c 02000000 		.4byte	.LFE5
 2927 0030 00000000 		.4byte	.LFB6
 2928 0034 0C000000 		.4byte	.LFE6
 2929 0038 00000000 		.4byte	.LFB7
 2930 003c 64000000 		.4byte	.LFE7
 2931 0040 00000000 		.4byte	.LFB8
 2932 0044 28000000 		.4byte	.LFE8
 2933 0048 00000000 		.4byte	.LFB9
 2934 004c 80000000 		.4byte	.LFE9
 2935 0050 00000000 		.4byte	.LFB10
 2936 0054 2C000000 		.4byte	.LFE10
 2937 0058 00000000 		.4byte	.LFB11
 2938 005c 68000000 		.4byte	.LFE11
 2939 0060 00000000 		.4byte	.LFB12
 2940 0064 44000000 		.4byte	.LFE12
 2941 0068 00000000 		.4byte	.LFB13
 2942 006c 02000000 		.4byte	.LFE13
 2943 0070 00000000 		.4byte	.LFB14
 2944 0074 0C000000 		.4byte	.LFE14
 2945 0078 00000000 		.4byte	.LFB15
 2946 007c 0C000000 		.4byte	.LFE15
 2947 0080 00000000 		.4byte	.LFB16
 2948 0084 0C000000 		.4byte	.LFE16
 2949 0088 00000000 		.4byte	.LFB17
 2950 008c 14000000 		.4byte	.LFE17
 2951 0090 00000000 		.4byte	.LFB18
 2952 0094 0C000000 		.4byte	.LFE18
 2953 0098 00000000 		.4byte	.LFB19
 2954 009c 18000000 		.4byte	.LFE19
 2955 00a0 00000000 		.4byte	.LFB20
 2956 00a4 24000000 		.4byte	.LFE20
 2957 00a8 00000000 		.4byte	.LFB21
 2958 00ac 28000000 		.4byte	.LFE21
 2959 00b0 00000000 		.4byte	.LFB22
 2960 00b4 20000000 		.4byte	.LFE22
 2961 00b8 00000000 		.4byte	.LFB23
 2962 00bc 24000000 		.4byte	.LFE23
 2963 00c0 00000000 		.4byte	.LFB24
 2964 00c4 24000000 		.4byte	.LFE24
 2965 00c8 00000000 		.4byte	.LFB25
 2966 00cc 58000000 		.4byte	.LFE25
 2967 00d0 00000000 		.4byte	.LFB26
 2968 00d4 02000000 		.4byte	.LFE26
 2969 00d8 00000000 		.4byte	0
 2970 00dc 00000000 		.4byte	0
 2971              		.section	.debug_line,"",%progbits
 2972              	.Ldebug_line0:
 2973 0000 ED020000 		.section	.debug_str,"MS",%progbits,1
 2973      02004E00 
 2973      00000201 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 81


 2973      FB0E0D00 
 2973      01010101 
 2974              	.LASF10:
 2975 0000 75696E74 		.ascii	"uint16\000"
 2975      313600
 2976              	.LASF79:
 2977 0007 43794578 		.ascii	"CyExitCriticalSection\000"
 2977      69744372 
 2977      69746963 
 2977      616C5365 
 2977      6374696F 
 2978              	.LASF49:
 2979 001d 74784461 		.ascii	"txDataByte\000"
 2979      74614279 
 2979      746500
 2980              	.LASF68:
 2981 0028 50756D70 		.ascii	"Pump_rxBuffer\000"
 2981      5F727842 
 2981      75666665 
 2981      7200
 2982              	.LASF54:
 2983 0036 73747269 		.ascii	"string\000"
 2983      6E6700
 2984              	.LASF7:
 2985 003d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2985      206C6F6E 
 2985      6720756E 
 2985      7369676E 
 2985      65642069 
 2986              	.LASF35:
 2987 0054 50756D70 		.ascii	"Pump_GetChar\000"
 2987      5F476574 
 2987      43686172 
 2987      00
 2988              	.LASF71:
 2989 0061 50756D70 		.ascii	"Pump_rxBufferLoopDetect\000"
 2989      5F727842 
 2989      75666665 
 2989      724C6F6F 
 2989      70446574 
 2990              	.LASF67:
 2991 0079 50756D70 		.ascii	"Pump_errorStatus\000"
 2991      5F657272 
 2991      6F725374 
 2991      61747573 
 2991      00
 2992              	.LASF6:
 2993 008a 6C6F6E67 		.ascii	"long long int\000"
 2993      206C6F6E 
 2993      6720696E 
 2993      7400
 2994              	.LASF0:
 2995 0098 7369676E 		.ascii	"signed char\000"
 2995      65642063 
 2995      68617200 
 2996              	.LASF47:
 2997 00a4 50756D70 		.ascii	"Pump_SetTxInterruptMode\000"
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 82


 2997      5F536574 
 2997      5478496E 
 2997      74657272 
 2997      7570744D 
 2998              	.LASF64:
 2999 00bc 74785065 		.ascii	"txPeriod\000"
 2999      72696F64 
 2999      00
 3000              	.LASF66:
 3001 00c5 50756D70 		.ascii	"Pump_initVar\000"
 3001      5F696E69 
 3001      74566172 
 3001      00
 3002              	.LASF59:
 3003 00d2 50756D70 		.ascii	"Pump_GetTxBufferSize\000"
 3003      5F476574 
 3003      54784275 
 3003      66666572 
 3003      53697A65 
 3004              	.LASF4:
 3005 00e7 6C6F6E67 		.ascii	"long int\000"
 3005      20696E74 
 3005      00
 3006              	.LASF48:
 3007 00f0 50756D70 		.ascii	"Pump_WriteTxData\000"
 3007      5F577269 
 3007      74655478 
 3007      44617461 
 3007      00
 3008              	.LASF9:
 3009 0101 75696E74 		.ascii	"uint8\000"
 3009      3800
 3010              	.LASF13:
 3011 0107 646F7562 		.ascii	"double\000"
 3011      6C6500
 3012              	.LASF43:
 3013 010e 61646472 		.ascii	"addressMode\000"
 3013      6573734D 
 3013      6F646500 
 3014              	.LASF32:
 3015 011a 50756D70 		.ascii	"Pump_ReadRxData\000"
 3015      5F526561 
 3015      64527844 
 3015      61746100 
 3016              	.LASF60:
 3017 012a 50756D70 		.ascii	"Pump_ClearTxBuffer\000"
 3017      5F436C65 
 3017      61725478 
 3017      42756666 
 3017      657200
 3018              	.LASF11:
 3019 013d 75696E74 		.ascii	"uint32\000"
 3019      333200
 3020              	.LASF27:
 3021 0144 636F6E74 		.ascii	"control\000"
 3021      726F6C00 
 3022              	.LASF72:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 83


 3023 014c 50756D70 		.ascii	"Pump_rxBufferOverflow\000"
 3023      5F727842 
 3023      75666665 
 3023      724F7665 
 3023      72666C6F 
 3024              	.LASF62:
 3025 0162 7265744D 		.ascii	"retMode\000"
 3025      6F646500 
 3026              	.LASF8:
 3027 016a 756E7369 		.ascii	"unsigned int\000"
 3027      676E6564 
 3027      20696E74 
 3027      00
 3028              	.LASF38:
 3029 0177 6C6F6345 		.ascii	"locErrorStatus\000"
 3029      72726F72 
 3029      53746174 
 3029      757300
 3030              	.LASF5:
 3031 0186 6C6F6E67 		.ascii	"long unsigned int\000"
 3031      20756E73 
 3031      69676E65 
 3031      6420696E 
 3031      7400
 3032              	.LASF51:
 3033 0198 50756D70 		.ascii	"Pump_ReadTxStatus\000"
 3033      5F526561 
 3033      64547853 
 3033      74617475 
 3033      7300
 3034              	.LASF78:
 3035 01aa 4379456E 		.ascii	"CyEnterCriticalSection\000"
 3035      74657243 
 3035      72697469 
 3035      63616C53 
 3035      65637469 
 3036              	.LASF40:
 3037 01c1 73697A65 		.ascii	"size\000"
 3037      00
 3038              	.LASF3:
 3039 01c6 73686F72 		.ascii	"short unsigned int\000"
 3039      7420756E 
 3039      7369676E 
 3039      65642069 
 3039      6E7400
 3040              	.LASF76:
 3041 01d9 4379496E 		.ascii	"CyIntSetVector\000"
 3041      74536574 
 3041      56656374 
 3041      6F7200
 3042              	.LASF55:
 3043 01e8 62756649 		.ascii	"bufIndex\000"
 3043      6E646578 
 3043      00
 3044              	.LASF28:
 3045 01f1 696E7453 		.ascii	"intSrc\000"
 3045      726300
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 84


 3046              	.LASF77:
 3047 01f8 4379496E 		.ascii	"CyIntSetPriority\000"
 3047      74536574 
 3047      5072696F 
 3047      72697479 
 3047      00
 3048              	.LASF75:
 3049 0209 433A5C55 		.ascii	"C:\\Users\\Recepcion\\Documents\\GitHub\\NSY-DH\\Wo"
 3049      73657273 
 3049      5C526563 
 3049      65706369 
 3049      6F6E5C44 
 3050 0236 726B7370 		.ascii	"rkspace01\\Design01.cydsn\000"
 3050      61636530 
 3050      315C4465 
 3050      7369676E 
 3050      30312E63 
 3051              	.LASF31:
 3052 024f 6C6F6352 		.ascii	"locRxBufferWrite\000"
 3052      78427566 
 3052      66657257 
 3052      72697465 
 3052      00
 3053              	.LASF44:
 3054 0260 50756D70 		.ascii	"Pump_SetRxAddress1\000"
 3054      5F536574 
 3054      52784164 
 3054      64726573 
 3054      733100
 3055              	.LASF46:
 3056 0273 50756D70 		.ascii	"Pump_SetRxAddress2\000"
 3056      5F536574 
 3056      52784164 
 3056      64726573 
 3056      733200
 3057              	.LASF74:
 3058 0286 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Pump.c\000"
 3058      6E657261 
 3058      7465645F 
 3058      536F7572 
 3058      63655C50 
 3059              	.LASF17:
 3060 02a6 72656733 		.ascii	"reg32\000"
 3060      3200
 3061              	.LASF63:
 3062 02ac 746D7053 		.ascii	"tmpStat\000"
 3062      74617400 
 3063              	.LASF52:
 3064 02b4 50756D70 		.ascii	"Pump_PutChar\000"
 3064      5F507574 
 3064      43686172 
 3064      00
 3065              	.LASF19:
 3066 02c1 73697A65 		.ascii	"sizetype\000"
 3066      74797065 
 3066      00
 3067              	.LASF56:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 85


 3068 02ca 50756D70 		.ascii	"Pump_PutArray\000"
 3068      5F507574 
 3068      41727261 
 3068      7900
 3069              	.LASF45:
 3070 02d8 61646472 		.ascii	"address\000"
 3070      65737300 
 3071              	.LASF41:
 3072 02e0 50756D70 		.ascii	"Pump_ClearRxBuffer\000"
 3072      5F436C65 
 3072      61725278 
 3072      42756666 
 3072      657200
 3073              	.LASF23:
 3074 02f3 50756D70 		.ascii	"Pump_Stop\000"
 3074      5F53746F 
 3074      7000
 3075              	.LASF36:
 3076 02fd 72785374 		.ascii	"rxStatus\000"
 3076      61747573 
 3076      00
 3077              	.LASF69:
 3078 0306 50756D70 		.ascii	"Pump_rxBufferRead\000"
 3078      5F727842 
 3078      75666665 
 3078      72526561 
 3078      6400
 3079              	.LASF12:
 3080 0318 666C6F61 		.ascii	"float\000"
 3080      7400
 3081              	.LASF22:
 3082 031e 50756D70 		.ascii	"Pump_Start\000"
 3082      5F537461 
 3082      727400
 3083              	.LASF65:
 3084 0329 50756D70 		.ascii	"Pump_SetTxAddressMode\000"
 3084      5F536574 
 3084      54784164 
 3084      64726573 
 3084      734D6F64 
 3085              	.LASF37:
 3086 033f 50756D70 		.ascii	"Pump_GetByte\000"
 3086      5F476574 
 3086      42797465 
 3086      00
 3087              	.LASF58:
 3088 034c 50756D70 		.ascii	"Pump_PutCRLF\000"
 3088      5F507574 
 3088      43524C46 
 3088      00
 3089              	.LASF16:
 3090 0359 72656738 		.ascii	"reg8\000"
 3090      00
 3091              	.LASF1:
 3092 035e 756E7369 		.ascii	"unsigned char\000"
 3092      676E6564 
 3092      20636861 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 86


 3092      7200
 3093              	.LASF2:
 3094 036c 73686F72 		.ascii	"short int\000"
 3094      7420696E 
 3094      7400
 3095              	.LASF50:
 3096 0376 50756D70 		.ascii	"Pump_ReadControlRegister\000"
 3096      5F526561 
 3096      64436F6E 
 3096      74726F6C 
 3096      52656769 
 3097              	.LASF61:
 3098 038f 50756D70 		.ascii	"Pump_SendBreak\000"
 3098      5F53656E 
 3098      64427265 
 3098      616B00
 3099              	.LASF57:
 3100 039e 62797465 		.ascii	"byteCount\000"
 3100      436F756E 
 3100      7400
 3101              	.LASF29:
 3102 03a8 72784461 		.ascii	"rxData\000"
 3102      746100
 3103              	.LASF39:
 3104 03af 50756D70 		.ascii	"Pump_GetRxBufferSize\000"
 3104      5F476574 
 3104      52784275 
 3104      66666572 
 3104      53697A65 
 3105              	.LASF15:
 3106 03c4 63686172 		.ascii	"char\000"
 3106      00
 3107              	.LASF18:
 3108 03c9 63796973 		.ascii	"cyisraddress\000"
 3108      72616464 
 3108      72657373 
 3108      00
 3109              	.LASF14:
 3110 03d6 63686172 		.ascii	"char8\000"
 3110      3800
 3111              	.LASF42:
 3112 03dc 50756D70 		.ascii	"Pump_SetRxAddressMode\000"
 3112      5F536574 
 3112      52784164 
 3112      64726573 
 3112      734D6F64 
 3113              	.LASF21:
 3114 03f2 50756D70 		.ascii	"Pump_Enable\000"
 3114      5F456E61 
 3114      626C6500 
 3115              	.LASF25:
 3116 03fe 50756D70 		.ascii	"Pump_WriteControlRegister\000"
 3116      5F577269 
 3116      7465436F 
 3116      6E74726F 
 3116      6C526567 
 3117              	.LASF26:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 87


 3118 0418 50756D70 		.ascii	"Pump_SetRxInterruptMode\000"
 3118      5F536574 
 3118      5278496E 
 3118      74657272 
 3118      7570744D 
 3119              	.LASF30:
 3120 0430 6C6F6352 		.ascii	"locRxBufferRead\000"
 3120      78427566 
 3120      66657252 
 3120      65616400 
 3121              	.LASF24:
 3122 0440 656E6162 		.ascii	"enableInterrupts\000"
 3122      6C65496E 
 3122      74657272 
 3122      75707473 
 3122      00
 3123              	.LASF70:
 3124 0451 50756D70 		.ascii	"Pump_rxBufferWrite\000"
 3124      5F727842 
 3124      75666665 
 3124      72577269 
 3124      746500
 3125              	.LASF34:
 3126 0464 73746174 		.ascii	"status\000"
 3126      757300
 3127              	.LASF73:
 3128 046b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3128      4320342E 
 3128      392E3320 
 3128      32303135 
 3128      30333033 
 3129 049e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3129      20726576 
 3129      6973696F 
 3129      6E203232 
 3129      31323230 
 3130 04d1 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3130      66756E63 
 3130      74696F6E 
 3130      2D736563 
 3130      74696F6E 
 3131              	.LASF33:
 3132 04f9 50756D70 		.ascii	"Pump_ReadRxStatus\000"
 3132      5F526561 
 3132      64527853 
 3132      74617475 
 3132      7300
 3133              	.LASF53:
 3134 050b 50756D70 		.ascii	"Pump_PutString\000"
 3134      5F507574 
 3134      53747269 
 3134      6E6700
 3135              	.LASF20:
 3136 051a 50756D70 		.ascii	"Pump_Init\000"
 3136      5F496E69 
 3136      7400
 3137              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\cchGNRfb.s 			page 88


